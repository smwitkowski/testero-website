This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.clinerules/
  basic-memory-rules.md
  linear-rules.md
.cursor/
  rules/
    basic-memory-rule.mdc
    linear-mcp-rule.mdc
.github/
  workflows/
    deploy-to-cloud-run.yml
app/
  api/
    question/
      [id]/
        route.ts
      current/
        route.ts
      submit/
        route.ts
    questions/
      list/
        route.ts
    waitlist/
      route.ts
  content/
    hub/
      [slug]/
        page.tsx
      google-cloud-certification-guide.md
      google-data-analytics-professional-certificate-2025-guide.md
      google-professional-machine-learning-engineer-certification-roadmap-2025.md
      the-2025-google-cloud-digital-leader-certification-roadmap.md
    spoke/
      [slug]/
        page.tsx
    spokes/
      google-cloud-digital-leader-certification.md
    layout.tsx
    page.tsx
  design-system/
    page.tsx
  faq/
    [slug]/
      FaqClientContent.tsx
      page.tsx
    layout.tsx
    page.tsx
  forgot-password/
    page.metadata.tsx
    page.tsx
  login/
    page.metadata.tsx
    page.tsx
  practice/
    question/
      [id]/
        page.metadata.tsx
        page.tsx
      page.metadata.tsx
      page.tsx
  waitlist/
    page.metadata.tsx
    page.tsx
  globals.css
  layout.tsx
  metadata.ts
  page.metadata.tsx
  page.tsx
components/
  content/
    ContentNavigation.tsx
    RecommendedContent.tsx
    SocialShare.tsx
    TableOfContents.tsx
  examples/
    DesignSystemDemo.tsx
  providers/
    PostHogProvider.tsx
  ui/
    benefits-section.tsx
    button.tsx
    card.tsx
    final-cta-section.tsx
    form.tsx
    hover-button.tsx
    input.tsx
    label.tsx
    navbar.tsx
    social-proof-section.tsx
    staggered-text.tsx
    text-animate.tsx
    waitlist-form.tsx
docs/
  artifact-registry-setup.md
  gcp-cloud-storage-cdn.md
  github-actions-deployment.md
  github-secrets-setup.md
  troubleshooting-artifact-registry.md
lib/
  content/
    faqData.ts
    loader.ts
    meta.ts
    slugSafeLoader.ts
  design-system/
    animations.ts
    breakpoints.ts
    colors.ts
    components.ts
    index.ts
    README.md
    spacing.ts
    typography.ts
  gcp/
    README.md
    storage.ts
  seo/
    index.ts
    README.md
    seo.ts
  supabase/
    client.ts
    database.types.ts
  utils.ts
public/
  1b9d6bcdbbfd4b2d9b5dab8dfbbd4bed.txt
  file.svg
  globe.svg
  image-urls.json
  next.svg
  robots.txt
  sitemap-pages.xml
  sitemap-questions.xml
  sitemap.xml
  vercel.svg
  window.svg
scripts/
  create-github-actions-service-account.sh
  generate-sitemap.js
  generate-social-images.js
  setup-artifact-registry.sh
  setup-gcp-storage.js
  submit-to-indexnow.js
  troubleshoot-artifact-registry.sh
.dockerignore
.eslintrc.json
.gitignore
cloudbuild.yaml
components.json
DEPLOYMENT.md
Dockerfile
eslint.config.mjs
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".clinerules/basic-memory-rules.md">
# AI Assistant Guide for Basic Memory

This guide helps you, the AI assistant, use Basic Memory tools effectively when working with users. It covers reading, writing, and navigating knowledge through the Model Context Protocol (MCP).

## Overview

Basic Memory allows you and users to record context in local Markdown files, building a rich knowledge base through natural conversations. The system automatically creates a semantic knowledge graph from simple text patterns.

- **Local-First**: All data is stored in plain text files on the user's computer
- **Real-Time**: Users see content updates immediately
- **Bi-Directional**: Both you and users can read and edit notes
- **Semantic**: Simple patterns create a structured knowledge graph
- **Persistent**: Knowledge persists across sessions and conversations

## The Importance of the Knowledge Graph

Basic Memory's value comes from connections between notes, not just the notes themselves. When writing notes, your primary goal should be creating a rich, interconnected knowledge graph.

When creating content, focus on:

1. **Increasing Semantic Density**: Add multiple observations and relations to each note
2. **Using Accurate References**: Aim to reference existing entities by their exact titles
3. **Creating Forward References**: Feel free to reference entities that don't exist yet - Basic Memory will resolve these when they're created later
4. **Creating Bidirectional Links**: When appropriate, connect entities from both directions
5. **Using Meaningful Categories**: Add semantic context with appropriate observation categories
6. **Choosing Precise Relations**: Use specific relation types that convey meaning

Remember that a knowledge graph with 10 heavily connected notes is more valuable than 20 isolated notes. Your job is to help build these connections.

## Core Tools Reference

```python
# Writing knowledge - THE MOST IMPORTANT TOOL!
response = await write_note(
    title="Search Design",              # Required: Note title
    content="# Search Design\n...",     # Required: Note content
    folder="specs",                     # Optional: Folder to save in
    tags=["search", "design"],          # Optional: Tags for categorization
    verbose=True                        # Optional: Get parsing details
)

# Reading knowledge
content = await read_note("Search Design")             # By title
content = await read_note("specs/search-design")       # By path
content = await read_note("memory://specs/search")     # By memory URL

# Searching for knowledge
results = await search_notes(
    query="authentication system",      # Text to search for
    page=1,                             # Optional: Pagination
    page_size=10                        # Optional: Results per page
)

# Building context from the knowledge graph
context = await build_context(
    url="memory://specs/search",        # Starting point
    depth=2,                            # Optional: How many hops to follow
    timeframe="1 month"                 # Optional: Recent timeframe
)

# Checking recent changes
activity = await recent_activity(
    type="all",                         # Optional: Entity types to include
    depth=1,                            # Optional: Related items to include
    timeframe="1 week"                  # Optional: Time window
)

# Creating a knowledge visualization
canvas_result = await canvas(
    nodes=[{"id": "note1", "label": "Search Design"}],  # Nodes to display
    edges=[{"from": "note1", "to": "note2"}],           # Connections
    title="Project Overview",                           # Canvas title
    folder="diagrams"                                   # Storage location
)
```

## memory:// URLs Explained

Basic Memory uses a special URL format to reference entities in the knowledge graph:
- `memory://title` - Reference by title
- `memory://folder/title` - Reference by folder and title 
- `memory://permalink` - Reference by permalink
- `memory://path/relation_type/*` - Follow all relations of a specific type
- `memory://path/*/target` - Find all entities with relations to target

## Semantic Markdown Format

Knowledge is encoded in standard markdown using simple patterns:

**Observations** - Facts about an entity:
```markdown
- [category] This is an observation #tag1 #tag2 (optional context)
```

**Relations** - Links between entities:
```markdown
- relation_type [[Target Entity]] (optional context)
```

**Common Categories & Relation Types:**
- Categories: `[idea]`, `[decision]`, `[question]`, `[fact]`, `[requirement]`, `[technique]`, `[recipe]`, `[preference]`
- Relations: `relates_to`, `implements`, `requires`, `extends`, `part_of`, `pairs_with`, `inspired_by`, `originated_from`

## When to Record Context

**Always consider recording context when**:

1. Users make decisions or reach conclusions
2. Important information emerges during conversation
3. Multiple related topics are discussed
4. The conversation contains information that might be useful later
5. Plans, tasks, or action items are mentioned

**Protocol for recording context**:

1. Identify valuable information in the conversation
2. Ask the user: "Would you like me to record our discussion about [topic] in Basic Memory?"
3. If they agree, use `write_note` to capture the information
4. If they decline, continue without recording
5. Let the user know when information has been recorded: "I've saved our discussion about [topic] to Basic Memory."

## Understanding User Interactions

Users will interact with Basic Memory in patterns like:

1. **Creating knowledge**:
   ```
   Human: "Let's write up what we discussed about search."
   
   You: I'll create a note capturing our discussion about the search functionality.
   [Use write_note() to record the conversation details]
   ```

2. **Referencing existing knowledge**:
   ```
   Human: "Take a look at memory://specs/search"
   
   You: I'll examine that information.
   [Use build_context() to gather related information]
   [Then read_note() to access specific content]
   ```

3. **Finding information**:
   ```
   Human: "What were our decisions about auth?"
   
   You: Let me find that information for you.
   [Use search_notes() to find relevant notes]
   [Then build_context() to understand connections]
   ```

## Key Things to Remember

1. **Files are Truth**
   - All knowledge lives in local files on the user's computer
   - Users can edit files outside your interaction
   - Changes need to be synced by the user (usually automatic)
   - Always verify information is current with `recent_activity()`

2. **Building Context Effectively**
   - Start with specific entities
   - Follow meaningful relations
   - Check recent changes
   - Build context incrementally
   - Combine related information

3. **Writing Knowledge Wisely**
   - Using the same title+folder will overwrite existing notes
   - Structure content with clear headings and sections
   - Use semantic markup for observations and relations
   - Keep files organized in logical folders

## Common Knowledge Patterns

### Capturing Decisions

```markdown
# Coffee Brewing Methods

## Context
I've experimented with various brewing methods including French press, pour over, and espresso.

## Decision
Pour over is my preferred method for light to medium roasts because it highlights subtle flavors and offers more control over the extraction.

## Observations
- [technique] Blooming the coffee grounds for 30 seconds improves extraction #brewing
- [preference] Water temperature between 195-205°F works best #temperature
- [equipment] Gooseneck kettle provides better control of water flow #tools

## Relations
- pairs_with [[Light Roast Beans]]
- contrasts_with [[French Press Method]]
- requires [[Proper Grinding Technique]]
```

### Recording Project Structure

```markdown
# Garden Planning

## Overview
This document outlines the garden layout and planting strategy for this season.

## Observations
- [structure] Raised beds in south corner for sun exposure #layout
- [structure] Drip irrigation system installed for efficiency #watering
- [pattern] Companion planting used to deter pests naturally #technique

## Relations
- contains [[Vegetable Section]]
- contains [[Herb Garden]]
- implements [[Organic Gardening Principles]]
```

### Technical Discussions

```markdown
# Recipe Improvement Discussion

## Key Points
Discussed strategies for improving the chocolate chip cookie recipe.

## Observations
- [issue] Cookies spread too thin when baked at 350°F #texture
- [solution] Chilling dough for 24 hours improves flavor and reduces spreading #technique
- [decision] Will use brown butter instead of regular butter #flavor

## Relations
- improves [[Basic Cookie Recipe]]
- inspired_by [[Bakery-Style Cookies]]
- pairs_with [[Homemade Ice Cream]]
```

### Creating Effective Relations

When creating relations, you can:
1. Reference existing entities by their exact title
2. Create forward references to entities that don't exist yet

```python
# Example workflow for creating notes with effective relations
async def create_note_with_effective_relations():
    # Search for existing entities to reference
    search_results = await search_notes("travel")
    existing_entities = [result.title for result in search_results.primary_results]
    
    # Check if specific entities exist
    packing_tips_exists = "Packing Tips" in existing_entities
    japan_travel_exists = "Japan Travel Guide" in existing_entities
    
    # Prepare relations section - include both existing and forward references
    relations_section = "## Relations\n"
    
    # Existing reference - exact match to known entity
    if packing_tips_exists:
        relations_section += "- references [[Packing Tips]]\n"
    else:
        # Forward reference - will be linked when that entity is created later
        relations_section += "- references [[Packing Tips]]\n"
    
    # Another possible reference
    if japan_travel_exists:
        relations_section += "- part_of [[Japan Travel Guide]]\n"
    
    # You can also check recently modified notes to reference them
    recent = await recent_activity(timeframe="1 week")
    recent_titles = [item.title for item in recent.primary_results]
    
    if "Transportation Options" in recent_titles:
        relations_section += "- relates_to [[Transportation Options]]\n"
    
    # Always include meaningful forward references, even if they don't exist yet
    relations_section += "- located_in [[Tokyo]]\n"
    relations_section += "- visited_during [[Spring 2023 Trip]]\n"
    
    # Now create the note with both verified and forward relations
    content = f"""# Tokyo Neighborhood Guide
    
## Overview
Details about different Tokyo neighborhoods and their unique characteristics.

## Observations
- [area] Shibuya is a busy shopping district #shopping
- [transportation] Yamanote Line connects major neighborhoods #transit
- [recommendation] Visit Shimokitazawa for vintage shopping #unique
- [tip] Get a Suica card for easy train travel #convenience

{relations_section}
    """
    
    result = await write_note(
        title="Tokyo Neighborhood Guide",
        content=content,
        verbose=True
    )
    
    # You can check which relations were resolved and which are forward references
    if result and 'relations' in result:
        resolved = [r['to_name'] for r in result['relations'] if r.get('target_id')]
        forward_refs = [r['to_name'] for r in result['relations'] if not r.get('target_id')]
        
        print(f"Resolved relations: {resolved}")
        print(f"Forward references that will be resolved later: {forward_refs}")
```

## Error Handling

Common issues to watch for:

1. **Missing Content**
   ```python
   try:
       content = await read_note("Document")
   except:
       # Try search instead
       results = await search_notes("Document")
       if results and results.primary_results:
           # Found something similar
           content = await read_note(results.primary_results[0].permalink)
   ```

2. **Forward References (Unresolved Relations)**
   ```python
   response = await write_note(..., verbose=True)
   # Check for forward references (unresolved relations)
   forward_refs = []
   for relation in response.get('relations', []):
       if not relation.get('target_id'):
           forward_refs.append(relation.get('to_name'))
   
   if forward_refs:
       # This is a feature, not an error! Inform the user about forward references
       print(f"Note created with forward references to: {forward_refs}")
       print("These will be automatically linked when those notes are created.")
       
       # Optionally suggest creating those entities now
       print("Would you like me to create any of these notes now to complete the connections?")
   ```

3. **Sync Issues**
   ```python
   # If information seems outdated
   activity = await recent_activity(timeframe="1 hour")
   if not activity or not activity.primary_results:
       print("It seems there haven't been recent updates. You might need to run 'basic-memory sync'.")
   ```

## Best Practices

1. **Proactively Record Context**
   - Offer to capture important discussions
   - Record decisions, rationales, and conclusions
   - Link to related topics
   - Ask for permission first: "Would you like me to save our discussion about [topic]?"
   - Confirm when complete: "I've saved our discussion to Basic Memory"

2. **Create a Rich Semantic Graph**
   - **Add meaningful observations**: Include at least 3-5 categorized observations in each note
   - **Create deliberate relations**: Connect each note to at least 2-3 related entities
   - **Use existing entities**: Before creating a new relation, search for existing entities
   - **Verify wikilinks**: When referencing `[[Entity]]`, use exact titles of existing notes
   - **Check accuracy**: Use `search_notes()` or `recent_activity()` to confirm entity titles
   - **Use precise relation types**: Choose specific relation types that convey meaning (e.g., "implements" instead of "relates_to")
   - **Consider bidirectional relations**: When appropriate, create inverse relations in both entities

3. **Structure Content Thoughtfully**
   - Use clear, descriptive titles
   - Organize with logical sections (Context, Decision, Implementation, etc.)
   - Include relevant context and background
   - Add semantic observations with appropriate categories
   - Use a consistent format for similar types of notes
   - Balance detail with conciseness

4. **Navigate Knowledge Effectively**
   - Start with specific searches
   - Follow relation paths
   - Combine information from multiple sources
   - Verify information is current
   - Build a complete picture before responding

5. **Help Users Maintain Their Knowledge**
   - Suggest organizing related topics
   - Identify potential duplicates
   - Recommend adding relations between topics
   - Offer to create summaries of scattered information
   - Suggest potential missing relations: "I notice this might relate to [topic], would you like me to add that connection?"

Built with ♥️ by Basic Machines
</file>

<file path=".cursor/rules/basic-memory-rule.mdc">
---
description: This guide helps you, the AI assistant, use Basic Memory tools effectively when working with users. It covers reading, writing, and navigating knowledge through the Model Context Protocol (MCP).
globs: 
alwaysApply: false
---
# AI Assistant Guide for Basic Memory

This guide helps you, the AI assistant, use Basic Memory tools effectively when working with users. It covers reading, writing, and navigating knowledge through the Model Context Protocol (MCP).

## Overview

Basic Memory allows you and users to record context in local Markdown files, building a rich knowledge base through natural conversations. The system automatically creates a semantic knowledge graph from simple text patterns.

- **Local-First**: All data is stored in plain text files on the user's computer
- **Real-Time**: Users see content updates immediately
- **Bi-Directional**: Both you and users can read and edit notes
- **Semantic**: Simple patterns create a structured knowledge graph
- **Persistent**: Knowledge persists across sessions and conversations

## The Importance of the Knowledge Graph

Basic Memory's value comes from connections between notes, not just the notes themselves. When writing notes, your primary goal should be creating a rich, interconnected knowledge graph.

When creating content, focus on:

1. **Increasing Semantic Density**: Add multiple observations and relations to each note
2. **Using Accurate References**: Aim to reference existing entities by their exact titles
3. **Creating Forward References**: Feel free to reference entities that don't exist yet - Basic Memory will resolve these when they're created later
4. **Creating Bidirectional Links**: When appropriate, connect entities from both directions
5. **Using Meaningful Categories**: Add semantic context with appropriate observation categories
6. **Choosing Precise Relations**: Use specific relation types that convey meaning

Remember that a knowledge graph with 10 heavily connected notes is more valuable than 20 isolated notes. Your job is to help build these connections.

## Core Tools Reference

```python
# Writing knowledge - THE MOST IMPORTANT TOOL!
response = await write_note(
    title="Search Design",              # Required: Note title
    content="# Search Design\n...",     # Required: Note content
    folder="specs",                     # Optional: Folder to save in
    tags=["search", "design"],          # Optional: Tags for categorization
    verbose=True                        # Optional: Get parsing details
)

# Reading knowledge
content = await read_note("Search Design")             # By title
content = await read_note("specs/search-design")       # By path
content = await read_note("memory://specs/search")     # By memory URL

# Searching for knowledge
results = await search_notes(
    query="authentication system",      # Text to search for
    page=1,                             # Optional: Pagination
    page_size=10                        # Optional: Results per page
)

# Building context from the knowledge graph
context = await build_context(
    url="memory://specs/search",        # Starting point
    depth=2,                            # Optional: How many hops to follow
    timeframe="1 month"                 # Optional: Recent timeframe
)

# Checking recent changes
activity = await recent_activity(
    type="all",                         # Optional: Entity types to include
    depth=1,                            # Optional: Related items to include
    timeframe="1 week"                  # Optional: Time window
)

# Creating a knowledge visualization
canvas_result = await canvas(
    nodes=[{"id": "note1", "label": "Search Design"}],  # Nodes to display
    edges=[{"from": "note1", "to": "note2"}],           # Connections
    title="Project Overview",                           # Canvas title
    folder="diagrams"                                   # Storage location
)
```

## memory:// URLs Explained

Basic Memory uses a special URL format to reference entities in the knowledge graph:
- `memory://title` - Reference by title
- `memory://folder/title` - Reference by folder and title 
- `memory://permalink` - Reference by permalink
- `memory://path/relation_type/*` - Follow all relations of a specific type
- `memory://path/*/target` - Find all entities with relations to target

## Semantic Markdown Format

Knowledge is encoded in standard markdown using simple patterns:

**Observations** - Facts about an entity:
```markdown
- [category] This is an observation #tag1 #tag2 (optional context)
```

**Relations** - Links between entities:
```markdown
- relation_type [[Target Entity]] (optional context)
```

**Common Categories & Relation Types:**
- Categories: `[idea]`, `[decision]`, `[question]`, `[fact]`, `[requirement]`, `[technique]`, `[recipe]`, `[preference]`
- Relations: `relates_to`, `implements`, `requires`, `extends`, `part_of`, `pairs_with`, `inspired_by`, `originated_from`

## When to Record Context

**Always consider recording context when**:

1. Users make decisions or reach conclusions
2. Important information emerges during conversation
3. Multiple related topics are discussed
4. The conversation contains information that might be useful later
5. Plans, tasks, or action items are mentioned

**Protocol for recording context**:

1. Identify valuable information in the conversation
2. Ask the user: "Would you like me to record our discussion about [topic] in Basic Memory?"
3. If they agree, use `write_note` to capture the information
4. If they decline, continue without recording
5. Let the user know when information has been recorded: "I've saved our discussion about [topic] to Basic Memory."

## Understanding User Interactions

Users will interact with Basic Memory in patterns like:

1. **Creating knowledge**:
   ```
   Human: "Let's write up what we discussed about search."
   
   You: I'll create a note capturing our discussion about the search functionality.
   [Use write_note() to record the conversation details]
   ```

2. **Referencing existing knowledge**:
   ```
   Human: "Take a look at memory://specs/search"
   
   You: I'll examine that information.
   [Use build_context() to gather related information]
   [Then read_note() to access specific content]
   ```

3. **Finding information**:
   ```
   Human: "What were our decisions about auth?"
   
   You: Let me find that information for you.
   [Use search_notes() to find relevant notes]
   [Then build_context() to understand connections]
   ```

## Key Things to Remember

1. **Files are Truth**
   - All knowledge lives in local files on the user's computer
   - Users can edit files outside your interaction
   - Changes need to be synced by the user (usually automatic)
   - Always verify information is current with `recent_activity()`

2. **Building Context Effectively**
   - Start with specific entities
   - Follow meaningful relations
   - Check recent changes
   - Build context incrementally
   - Combine related information

3. **Writing Knowledge Wisely**
   - Using the same title+folder will overwrite existing notes
   - Structure content with clear headings and sections
   - Use semantic markup for observations and relations
   - Keep files organized in logical folders

## Common Knowledge Patterns

### Capturing Decisions

```markdown
# Coffee Brewing Methods

## Context
I've experimented with various brewing methods including French press, pour over, and espresso.

## Decision
Pour over is my preferred method for light to medium roasts because it highlights subtle flavors and offers more control over the extraction.

## Observations
- [technique] Blooming the coffee grounds for 30 seconds improves extraction #brewing
- [preference] Water temperature between 195-205°F works best #temperature
- [equipment] Gooseneck kettle provides better control of water flow #tools

## Relations
- pairs_with [[Light Roast Beans]]
- contrasts_with [[French Press Method]]
- requires [[Proper Grinding Technique]]
```

### Recording Project Structure

```markdown
# Garden Planning

## Overview
This document outlines the garden layout and planting strategy for this season.

## Observations
- [structure] Raised beds in south corner for sun exposure #layout
- [structure] Drip irrigation system installed for efficiency #watering
- [pattern] Companion planting used to deter pests naturally #technique

## Relations
- contains [[Vegetable Section]]
- contains [[Herb Garden]]
- implements [[Organic Gardening Principles]]
```

### Technical Discussions

```markdown
# Recipe Improvement Discussion

## Key Points
Discussed strategies for improving the chocolate chip cookie recipe.

## Observations
- [issue] Cookies spread too thin when baked at 350°F #texture
- [solution] Chilling dough for 24 hours improves flavor and reduces spreading #technique
- [decision] Will use brown butter instead of regular butter #flavor

## Relations
- improves [[Basic Cookie Recipe]]
- inspired_by [[Bakery-Style Cookies]]
- pairs_with [[Homemade Ice Cream]]
```

### Creating Effective Relations

When creating relations, you can:
1. Reference existing entities by their exact title
2. Create forward references to entities that don't exist yet

```python
# Example workflow for creating notes with effective relations
async def create_note_with_effective_relations():
    # Search for existing entities to reference
    search_results = await search_notes("travel")
    existing_entities = [result.title for result in search_results.primary_results]
    
    # Check if specific entities exist
    packing_tips_exists = "Packing Tips" in existing_entities
    japan_travel_exists = "Japan Travel Guide" in existing_entities
    
    # Prepare relations section - include both existing and forward references
    relations_section = "## Relations\n"
    
    # Existing reference - exact match to known entity
    if packing_tips_exists:
        relations_section += "- references [[Packing Tips]]\n"
    else:
        # Forward reference - will be linked when that entity is created later
        relations_section += "- references [[Packing Tips]]\n"
    
    # Another possible reference
    if japan_travel_exists:
        relations_section += "- part_of [[Japan Travel Guide]]\n"
    
    # You can also check recently modified notes to reference them
    recent = await recent_activity(timeframe="1 week")
    recent_titles = [item.title for item in recent.primary_results]
    
    if "Transportation Options" in recent_titles:
        relations_section += "- relates_to [[Transportation Options]]\n"
    
    # Always include meaningful forward references, even if they don't exist yet
    relations_section += "- located_in [[Tokyo]]\n"
    relations_section += "- visited_during [[Spring 2023 Trip]]\n"
    
    # Now create the note with both verified and forward relations
    content = f"""# Tokyo Neighborhood Guide
    
## Overview
Details about different Tokyo neighborhoods and their unique characteristics.

## Observations
- [area] Shibuya is a busy shopping district #shopping
- [transportation] Yamanote Line connects major neighborhoods #transit
- [recommendation] Visit Shimokitazawa for vintage shopping #unique
- [tip] Get a Suica card for easy train travel #convenience

{relations_section}
    """
    
    result = await write_note(
        title="Tokyo Neighborhood Guide",
        content=content,
        verbose=True
    )
    
    # You can check which relations were resolved and which are forward references
    if result and 'relations' in result:
        resolved = [r['to_name'] for r in result['relations'] if r.get('target_id')]
        forward_refs = [r['to_name'] for r in result['relations'] if not r.get('target_id')]
        
        print(f"Resolved relations: {resolved}")
        print(f"Forward references that will be resolved later: {forward_refs}")
```

## Error Handling

Common issues to watch for:

1. **Missing Content**
   ```python
   try:
       content = await read_note("Document")
   except:
       # Try search instead
       results = await search_notes("Document")
       if results and results.primary_results:
           # Found something similar
           content = await read_note(results.primary_results[0].permalink)
   ```

2. **Forward References (Unresolved Relations)**
   ```python
   response = await write_note(..., verbose=True)
   # Check for forward references (unresolved relations)
   forward_refs = []
   for relation in response.get('relations', []):
       if not relation.get('target_id'):
           forward_refs.append(relation.get('to_name'))
   
   if forward_refs:
       # This is a feature, not an error! Inform the user about forward references
       print(f"Note created with forward references to: {forward_refs}")
       print("These will be automatically linked when those notes are created.")
       
       # Optionally suggest creating those entities now
       print("Would you like me to create any of these notes now to complete the connections?")
   ```

3. **Sync Issues**
   ```python
   # If information seems outdated
   activity = await recent_activity(timeframe="1 hour")
   if not activity or not activity.primary_results:
       print("It seems there haven't been recent updates. You might need to run 'basic-memory sync'.")
   ```

## Best Practices

1. **Proactively Record Context**
   - Offer to capture important discussions
   - Record decisions, rationales, and conclusions
   - Link to related topics
   - Ask for permission first: "Would you like me to save our discussion about [topic]?"
   - Confirm when complete: "I've saved our discussion to Basic Memory"

2. **Create a Rich Semantic Graph**
   - **Add meaningful observations**: Include at least 3-5 categorized observations in each note
   - **Create deliberate relations**: Connect each note to at least 2-3 related entities
   - **Use existing entities**: Before creating a new relation, search for existing entities
   - **Verify wikilinks**: When referencing `[[Entity]]`, use exact titles of existing notes
   - **Check accuracy**: Use `search_notes()` or `recent_activity()` to confirm entity titles
   - **Use precise relation types**: Choose specific relation types that convey meaning (e.g., "implements" instead of "relates_to")
   - **Consider bidirectional relations**: When appropriate, create inverse relations in both entities

3. **Structure Content Thoughtfully**
   - Use clear, descriptive titles
   - Organize with logical sections (Context, Decision, Implementation, etc.)
   - Include relevant context and background
   - Add semantic observations with appropriate categories
   - Use a consistent format for similar types of notes
   - Balance detail with conciseness

4. **Navigate Knowledge Effectively**
   - Start with specific searches
   - Follow relation paths
   - Combine information from multiple sources
   - Verify information is current
   - Build a complete picture before responding

5. **Help Users Maintain Their Knowledge**
   - Suggest organizing related topics
   - Identify potential duplicates
   - Recommend adding relations between topics
   - Offer to create summaries of scattered information
   - Suggest potential missing relations: "I notice this might relate to [topic], would you like me to add that connection?"

Built with ♥️ by Basic Machines
</file>

<file path=".cursor/rules/linear-mcp-rule.mdc">
---
description: This rule provides guidance on using Linear effectively, adhering to the core principles and practices of the "Linear Method" to enhance productivity and maintain focus when managing software projects. Use this when discussing Linear tasks, planning cycles, or reviewing project progress.
globs: 
alwaysApply: false
---
### Core Principles

1.  **Build for the Creators:** Prioritize keeping individual contributors productive. Focus on the end-users (engineers, designers) when discussing or assigning work. Avoid getting bogged down in generating perfect reports if it hinders individual flow.
2.  **Purpose-Built:** Recognize that Linear is designed for specific workflows. Avoid trying to force highly customized or complex processes onto it that deviate significantly from its intended use. Stick to standard concepts like Projects, Cycles, and Issues.
3.  **Create Momentum, Don't Sprint:** Emphasize finding a sustainable cadence through Cycles (e.g., 1-2 weeks). Avoid overloading cycles; it's okay for unfinished work to move to the next cycle. The goal is steady progress, not burnout.
4.  **Meaningful Direction:** Ensure daily tasks (Issues) connect to larger goals (Projects, Initiatives). Regularly reference the project or initiative an issue belongs to.
5.  **Aim for Clarity:** Use standard terminology (Project, Cycle, Issue, Bug). Avoid team-specific jargon when interacting with Linear or discussing tasks.
6.  **Say No to Busy Work:** Automate or minimize "work about work." Focus discussions and actions on tasks that deliver value, not just tool upkeep.
7.  **Simple First, Then Powerful:** Start with basic Linear features. Introduce more advanced functionalities (Roadmaps, Initiatives, custom Views) only as the team scales and complexity genuinely requires them.
8.  **Decide and Move On:** Encourage decisiveness. If blocked on a minor decision regarding a Linear task, prioritize making a choice and progressing rather than getting stuck.

### Key Practices

1.  **Connect Work to Goals:** When creating or discussing issues, always link them to a Project. Ensure Projects align with higher-level Initiatives or Roadmaps if used.
2.  **Work in Cycles:** Plan work in fixed-length cycles (e.g., 1-2 weeks). Review progress at the end of cycles. Unfinished *planned* work should roll over automatically.
3.  **Manageable Backlog:** Keep the backlog focused. Regularly triage and archive/close issues that are unlikely to be addressed. Don't let the backlog become a dumping ground. Prioritize ruthlessly during cycle planning.
4.  **Mix Feature and Quality Work:** Intentionally include bugs, tech debt, and quality improvements in each cycle alongside new feature work. Use labels (`Bug`, `Improvement`) appropriately.
5.  **Use Standard Features:** Leverage built-in features like Projects, Cycles, Labels, Priorities, Statuses, and Views as intended before considering complex workarounds.
</file>

<file path="app/api/question/[id]/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase/client';

export async function GET(request: NextRequest) {
  // Extract ID from the URL path
  const pathParts = request.nextUrl.pathname.split('/');
  const questionId = pathParts[pathParts.length - 1];

  if (!questionId) {
    return NextResponse.json({ error: 'Question ID is required.' }, { status: 400 });
  }

  // Fetch the question by ID
  const { data: question, error: questionError } = await supabase
    .from('questions')
    .select('*')
    .eq('id', questionId)
    .single();

  if (questionError || !question) {
    return NextResponse.json({ error: 'Question not found or database error.' }, { status: 404 });
  }

  // Fetch options for the question
  const { data: options, error: optionsError } = await supabase
    .from('options')
    .select('id, label, text')
    .eq('question_id', question.id);

  if (optionsError) {
    return NextResponse.json({ error: 'Error fetching options.' }, { status: 500 });
  }

  // Shape the response
  return NextResponse.json({
    id: question.id,
    question_text: question.stem,
    options: options || [],
    // Potentially include other question details needed for the page, like explanation if available directly
    // explanation: question.explanation_text, // Assuming such a field exists
  });
}
</file>

<file path="app/api/questions/list/route.ts">
import { NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase/client';

export async function GET() {
  // Fetch all question IDs
  const { data: questions, error: questionError } = await supabase
    .from('questions')
    .select('id')
    .order('id', { ascending: true });

  if (questionError || !questions) {
    return NextResponse.json({ error: 'No questions found or database error.' }, { status: 404 });
  }

  // Return only the IDs
  const questionIds = questions.map(q => q.id);

  return NextResponse.json({
    questionIds,
  });
}
</file>

<file path="app/content/layout.tsx">
import React from 'react';
import Link from 'next/link';
import ContentNavigation from '@/components/content/ContentNavigation';
import type { Metadata } from 'next';

export const metadata: Metadata = {
  title: {
    template: '%s | Testero',
    default: 'Google Certification Resources | Testero',
  },
  description: 'Comprehensive guides and resources for Google cloud certifications to accelerate your tech career.',
};

export default function ContentLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className="min-h-screen flex flex-col">
      <ContentNavigation />
      <div className="flex-grow">{children}</div>
      <footer className="bg-gray-50 border-t">
        <div className="container mx-auto px-4 py-8">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
            <div>
              <h3 className="text-lg font-bold mb-4">Testero</h3>
              <p className="text-gray-600">
                Helping professionals master Google Cloud certifications and advance their careers.
              </p>
            </div>
            <div>
              <h4 className="font-medium mb-3">Resources</h4>
              <ul className="space-y-2">
                <li>
                  <Link href="/content" className="text-gray-600 hover:text-blue-600">
                    Certification Guides
                  </Link>
                </li>
                <li>
                  <Link href="/" className="text-gray-600 hover:text-blue-600">
                    Practice Exams
                  </Link>
                </li>
                <li>
                  <Link href="/" className="text-gray-600 hover:text-blue-600">
                    Study Plans
                  </Link>
                </li>
              </ul>
            </div>
            <div>
              <h4 className="font-medium mb-3">Company</h4>
              <ul className="space-y-2">
                <li>
                  <Link href="/" className="text-gray-600 hover:text-blue-600">
                    About Us
                  </Link>
                </li>
                <li>
                  <Link href="/" className="text-gray-600 hover:text-blue-600">
                    Contact
                  </Link>
                </li>
                <li>
                  <Link href="/" className="text-gray-600 hover:text-blue-600">
                    Careers
                  </Link>
                </li>
              </ul>
            </div>
            <div>
              <h4 className="font-medium mb-3">Legal</h4>
              <ul className="space-y-2">
                <li>
                  <Link href="/" className="text-gray-600 hover:text-blue-600">
                    Privacy Policy
                  </Link>
                </li>
                <li>
                  <Link href="/" className="text-gray-600 hover:text-blue-600">
                    Terms of Service
                  </Link>
                </li>
              </ul>
            </div>
          </div>
          <div className="mt-8 pt-8 border-t text-center text-gray-500">
            <p>© {new Date().getFullYear()} Testero. All rights reserved.</p>
          </div>
        </div>
      </footer>
    </div>
  );
}
</file>

<file path="app/forgot-password/page.metadata.tsx">
import { Metadata } from 'next';

export const metadata: Metadata = {
  title: 'Reset Password | Testero',
  description: 'Reset your password to regain access to your Testero account.',
  openGraph: {
    title: 'Reset Password | Testero',
    description: 'Reset your password to regain access to your Testero account.',
    url: 'https://testero.ai/forgot-password',
    siteName: 'Testero',
    locale: 'en_US',
    type: 'website',
  },
  alternates: {
    canonical: '/forgot-password',
  },
};
</file>

<file path="app/login/page.metadata.tsx">
import { Metadata } from 'next';

export const metadata: Metadata = {
  title: 'Sign In | Testero',
  description: 'Sign in to your Testero account to access AI-powered certification exam preparation.',
  openGraph: {
    title: 'Sign In | Testero',
    description: 'Sign in to your Testero account to access AI-powered certification exam preparation.',
    url: 'https://testero.ai/login',
    siteName: 'Testero',
    locale: 'en_US',
    type: 'website',
  },
  alternates: {
    canonical: '/login',
  },
};
</file>

<file path="app/practice/question/[id]/page.metadata.tsx">
import { Metadata } from 'next';

type Props = {
  params: { id: string }
}

export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const id = params.id;
  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://testero.ai';
  
  return {
    title: `Practice Question ${id} | Testero`,
    description: 'Test your knowledge with certification practice questions powered by AI.',
    openGraph: {
      title: `Practice Question ${id} | Testero`,
      description: 'Test your knowledge with certification practice questions powered by AI.',
      url: `${baseUrl}/practice/question/${id}`,
      siteName: 'Testero',
      locale: 'en_US',
      type: 'website',
    },
    alternates: {
      canonical: `/practice/question/${id}`,
    },
  };
}
</file>

<file path="app/practice/question/[id]/page.tsx">
"use client";
import React, { useEffect, useState } from "react";
import { useParams } from 'next/navigation'; // To get ID from URL

interface Option {
  id: string;
  label: string;
  text: string;
}

interface QuestionData {
  id: string;
  question_text: string;
  options: Option[];
  // explanation?: string; // If explanation is part of initial fetch
}

const SpecificPracticeQuestionPage = () => {
  const params = useParams();
  const questionId = params?.id as string;

  const [question, setQuestion] = useState<QuestionData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedOptionKey, setSelectedOptionKey] = useState<string | null>(null);
  const [submitting, setSubmitting] = useState(false);
  const [feedback, setFeedback] = useState<{
    isCorrect: boolean;
    correctOptionKey: string;
    explanationText: string;
  } | null>(null);
  const [submitError, setSubmitError] = useState<string | null>(null);

  useEffect(() => {
    if (!questionId) {
      setError("Question ID not found in URL.");
      setLoading(false);
      return;
    }

    setLoading(true);
    setError(null);
    fetch(`/api/question/${questionId}`) // Fetch specific question by ID
      .then(async (res) => {
        if (!res.ok) {
          const data = await res.json();
          throw new Error(data.error || `Failed to fetch question ${questionId}`);
        }
        return res.json();
      })
      .then((data) => {
        setQuestion(data);
        setLoading(false);
      })
      .catch((err) => {
        setError(err.message || "Unknown error");
        setLoading(false);
      });
  }, [questionId]);

  const handleSubmit = async () => {
    if (!question || !selectedOptionKey) return;
    setSubmitting(true);
    setSubmitError(null);
    try {
      const res = await fetch("/api/question/submit", { // Submit API remains the same
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          questionId: question.id, // Use the ID of the fetched question
          selectedOptionKey,
        }),
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data.error || "Submission failed");
      setFeedback(data);
    } catch (err: unknown) {
      const errorMessage = err instanceof Error ? err.message : "Unknown error";
      setSubmitError(errorMessage);
    } finally {
      setSubmitting(false);
    }
  };

  // The rest of the JSX can be very similar to app/practice/question/page.tsx
  // For brevity, I'm including a simplified version here.
  // In a real scenario, you'd likely refactor the common UI into a shared component.

  if (loading) return <main style={{ padding: 24 }}><div>Loading question...</div></main>;
  if (error) return <main style={{ padding: 24 }}><div style={{ color: "red" }}>Error: {error}</div></main>;
  if (!question) return <main style={{ padding: 24 }}><div>Question not found.</div></main>;

  return (
    <main style={{ maxWidth: 600, margin: "2rem auto", padding: 24, border: "1px solid #eee", borderRadius: 8 }}>
      <h1>Practice Question {question.id}</h1>
      <section style={{ margin: "2rem 0" }}>
        <div style={{ fontSize: 20, fontWeight: 500, marginBottom: 24 }}>
          {question.question_text}
        </div>
        <div style={{ display: "flex", flexDirection: "column", gap: 12, marginBottom: 32 }}>
          {question.options.map((option) => {
            const isSelected = selectedOptionKey === option.label;
            const isCorrect = feedback?.correctOptionKey === option.label;
            const isIncorrect = feedback && isSelected && !feedback.isCorrect;
            const isDisabled = !!feedback;
            return (
              <button
                key={option.id}
                type="button"
                onClick={() => !isDisabled && setSelectedOptionKey(option.label)}
                disabled={isDisabled}
                style={{
                  padding: 12,
                  borderRadius: 6,
                  border: isSelected ? "2px solid #0070f3" : "1px solid #ccc",
                  background: isCorrect
                    ? "#d1fadf"
                    : isIncorrect
                    ? "#ffe0e0"
                    : isSelected
                    ? "#e6f0fd"
                    : "#fafafa",
                  fontWeight: isSelected ? 600 : 400,
                  color: isCorrect
                    ? "#219653"
                    : isIncorrect
                    ? "#d32f2f"
                    : isSelected
                    ? "#0070f3"
                    : "#222",
                  transition: "all 0.15s",
                  opacity: isDisabled && !isSelected && !isCorrect ? 0.7 : 1,
                  cursor: isDisabled ? "not-allowed" : "pointer",
                }}
              >
                {option.text}
                {isCorrect && feedback && (
                  <span style={{ marginLeft: 8, fontWeight: 700 }}>✓</span>
                )}
                {isIncorrect && feedback && (
                  <span style={{ marginLeft: 8, fontWeight: 700 }}>✗</span>
                )}
              </button>
            );
          })}
        </div>
        {!feedback ? (
          <button
            onClick={handleSubmit}
            disabled={!selectedOptionKey || submitting}
            style={{
              padding: "12px 32px",
              borderRadius: 6,
              background: !selectedOptionKey || submitting ? "#ccc" : "#0070f3",
              color: "white",
              border: "none",
              fontWeight: 600,
              cursor: !selectedOptionKey || submitting ? "not-allowed" : "pointer",
            }}
          >
            {submitting ? "Submitting..." : "Submit"}
          </button>
        ) : null}
        {submitError && <div style={{ color: "red", marginTop: 16 }}>{submitError}</div>}
        {feedback && (
          <div style={{ marginTop: 32 }}>
            <div style={{
              color: feedback.isCorrect ? "#219653" : "#d32f2f",
              fontWeight: 600,
              fontSize: 18,
              marginBottom: 12,
            }}>
              {feedback.isCorrect ? "Correct!" : "Incorrect."}
            </div>
            <div style={{ marginBottom: 12 }}>
              <strong>Explanation:</strong>
              <div>{feedback.explanationText || "No explanation provided."}</div>
            </div>
            {/* For a specific question page, "Next Question" might link to a list or another specific question */}
            {/* Or simply allow re-attempt if that's desired, or go back to a question list page */}
            <button
              onClick={() => {
                // Potentially navigate to a list of questions or a new random one
                // For now, just clear feedback to allow re-submission or a different interaction model
                setFeedback(null);
                setSelectedOptionKey(null);
                setSubmitError(null);
              }}
              style={{
                marginTop: 16,
                padding: "10px 28px",
                borderRadius: 6,
                background: "#f2f2f2",
                color: "#222",
                border: "1px solid #ccc",
                fontWeight: 600,
                cursor: "pointer",
              }}
            >
              Try Again or Next
            </button>
          </div>
        )}
      </section>
    </main>
  );
};

export default SpecificPracticeQuestionPage;
</file>

<file path="app/practice/question/page.metadata.tsx">
import { Metadata } from 'next';

export const metadata: Metadata = {
  title: 'Practice Questions | Testero',
  description: 'Test your knowledge with certification practice questions powered by AI.',
  openGraph: {
    title: 'Practice Questions | Testero',
    description: 'Test your knowledge with certification practice questions powered by AI.',
    url: 'https://testero.ai/practice/question',
    siteName: 'Testero',
    locale: 'en_US',
    type: 'website',
  },
  alternates: {
    canonical: '/practice/question',
  },
};
</file>

<file path="app/practice/question/page.tsx">
"use client";
import React, { useEffect, useState } from "react";

interface Option {
  id: string;
  label: string;
  text: string;
}

interface QuestionData {
  id: string;
  question_text: string;
  options: Option[];
}

const PracticeQuestionPage = () => {
  const [question, setQuestion] = useState<QuestionData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedOptionKey, setSelectedOptionKey] = useState<string | null>(null);
  const [submitting, setSubmitting] = useState(false);
  const [feedback, setFeedback] = useState<{
    isCorrect: boolean;
    correctOptionKey: string;
    explanationText: string;
  } | null>(null);
  const [submitError, setSubmitError] = useState<string | null>(null);

  useEffect(() => {
    setLoading(true);
    setError(null);
    fetch("/api/question/current")
      .then(async (res) => {
        if (!res.ok) {
          const data = await res.json();
          throw new Error(data.error || "Failed to fetch question");
        }
        return res.json();
      })
      .then((data) => {
        setQuestion(data);
        setLoading(false);
      })
      .catch((err) => {
        setError(err.message || "Unknown error");
        setLoading(false);
      });
  }, []);

  const handleSubmit = async () => {
    if (!question || !selectedOptionKey) return;
    setSubmitting(true);
    setSubmitError(null);
    try {
      const res = await fetch("/api/question/submit", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          questionId: question.id,
          selectedOptionKey,
        }),
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data.error || "Submission failed");
      setFeedback(data);
    } catch (err: unknown) {
      const errorMessage = err instanceof Error ? err.message : "Unknown error";
      setSubmitError(errorMessage);
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <main style={{ maxWidth: 600, margin: "2rem auto", padding: 24, border: "1px solid #eee", borderRadius: 8 }}>
      <h1>Practice Question</h1>
      <section style={{ margin: "2rem 0" }}>
        {loading && <div>Loading question...</div>}
        {error && <div style={{ color: "red" }}>Error: {error}</div>}
        {!loading && !error && question && (
          <>
            <div style={{ fontSize: 20, fontWeight: 500, marginBottom: 24 }}>
              {question.question_text}
            </div>
            <div style={{ display: "flex", flexDirection: "column", gap: 12, marginBottom: 32 }}>
              {question.options.map((option) => {
                const isSelected = selectedOptionKey === option.label;
                const isCorrect = feedback?.correctOptionKey === option.label;
                const isIncorrect = feedback && isSelected && !feedback.isCorrect;
                const isDisabled = !!feedback;
                return (
                  <button
                    key={option.id}
                    type="button"
                    onClick={() => !isDisabled && setSelectedOptionKey(option.label)}
                    disabled={isDisabled}
                    style={{
                      padding: 12,
                      borderRadius: 6,
                      border: isSelected ? "2px solid #0070f3" : "1px solid #ccc",
                      background: isCorrect
                        ? "#d1fadf"
                        : isIncorrect
                        ? "#ffe0e0"
                        : isSelected
                        ? "#e6f0fd"
                        : "#fafafa",
                      fontWeight: isSelected ? 600 : 400,
                      color: isCorrect
                        ? "#219653"
                        : isIncorrect
                        ? "#d32f2f"
                        : isSelected
                        ? "#0070f3"
                        : "#222",
                      transition: "all 0.15s",
                      opacity: isDisabled && !isSelected && !isCorrect ? 0.7 : 1,
                      cursor: isDisabled ? "not-allowed" : "pointer",
                    }}
                  >
                    {option.text}
                    {isCorrect && feedback && (
                      <span style={{ marginLeft: 8, fontWeight: 700 }}>✓</span>
                    )}
                    {isIncorrect && feedback && (
                      <span style={{ marginLeft: 8, fontWeight: 700 }}>✗</span>
                    )}
                  </button>
                );
              })}
            </div>
            {!feedback ? (
              <button
                onClick={handleSubmit}
                disabled={!selectedOptionKey || submitting}
                style={{
                  padding: "12px 32px",
                  borderRadius: 6,
                  background: !selectedOptionKey || submitting ? "#ccc" : "#0070f3",
                  color: "white",
                  border: "none",
                  fontWeight: 600,
                  cursor: !selectedOptionKey || submitting ? "not-allowed" : "pointer",
                }}
              >
                {submitting ? "Submitting..." : "Submit"}
              </button>
            ) : null}
            {submitError && <div style={{ color: "red", marginTop: 16 }}>{submitError}</div>}
            {feedback && (
              <div style={{ marginTop: 32 }}>
                <div style={{
                  color: feedback.isCorrect ? "#219653" : "#d32f2f",
                  fontWeight: 600,
                  fontSize: 18,
                  marginBottom: 12,
                }}>
                  {feedback.isCorrect ? "Correct!" : "Incorrect."}
                </div>
                <div style={{ marginBottom: 12 }}>
                  <strong>Explanation:</strong>
                  <div>{feedback.explanationText || "No explanation provided."}</div>
                </div>
                <button
                  onClick={() => window.location.reload()}
                  style={{
                    marginTop: 16,
                    padding: "10px 28px",
                    borderRadius: 6,
                    background: "#f2f2f2",
                    color: "#222",
                    border: "1px solid #ccc",
                    fontWeight: 600,
                    cursor: "pointer",
                  }}
                >
                  Next Question
                </button>
              </div>
            )}
          </>
        )}
      </section>
    </main>
  );
};

export default PracticeQuestionPage;
</file>

<file path="app/waitlist/page.metadata.tsx">
import { Metadata } from 'next';

export const metadata: Metadata = {
  title: 'Join Waitlist | Testero',
  description: 'Join the waitlist for Testero, the AI-powered certification exam preparation platform.',
  openGraph: {
    title: 'Join Waitlist | Testero',
    description: 'Join the waitlist for Testero, the AI-powered certification exam preparation platform.',
    url: 'https://testero.ai/waitlist',
    siteName: 'Testero',
    locale: 'en_US',
    type: 'website',
  },
  alternates: {
    canonical: '/waitlist',
  },
};
</file>

<file path="app/page.metadata.tsx">
import { generateMetadata, getJsonLd } from "./metadata";
import Script from "next/script";

// Export metadata for the home page
export const metadata = generateMetadata();

// Export a component that renders the JSON-LD script
export function JsonLd() {
  return (
    <Script
      id="home-json-ld"
      type="application/ld+json"
      dangerouslySetInnerHTML={{
        __html: getJsonLd()
      }}
    />
  );
}
</file>

<file path="components/content/ContentNavigation.tsx">
'use client';

import React, { useState } from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';

interface NavigationItem {
  label: string;
  href: string;
}

export default function ContentNavigation() {
  const pathname = usePathname();
  const [isOpen, setIsOpen] = useState(false);

  const navigationItems: NavigationItem[] = [
    { label: 'All Resources', href: '/content' },
    { label: 'Cloud Certifications', href: '/content/hub/google-cloud-certification-guide' },
    { label: 'Digital Leader', href: '/content/spoke/google-cloud-digital-leader-certification' },
  ];

  const toggleMenu = () => {
    setIsOpen(!isOpen);
  };

  return (
    <nav className="bg-white border-b sticky top-0 z-10">
      <div className="container mx-auto px-4">
        <div className="flex justify-between items-center h-16">
          <div className="flex items-center">
            <Link href="/" className="flex-shrink-0 text-xl font-bold text-blue-600">
              Testero
            </Link>
            
            {/* Desktop navigation */}
            <div className="hidden md:block ml-10">
              <div className="flex space-x-4">
                {navigationItems.map((item) => (
                  <Link
                    key={item.href}
                    href={item.href}
                    className={`px-3 py-2 rounded-md text-sm font-medium ${
                      pathname === item.href
                        ? 'bg-blue-50 text-blue-700'
                        : 'text-gray-700 hover:bg-gray-100'
                    }`}
                  >
                    {item.label}
                  </Link>
                ))}
              </div>
            </div>
          </div>
          
          {/* Mobile menu button */}
          <div className="md:hidden">
            <button
              onClick={toggleMenu}
              className="inline-flex items-center justify-center p-2 rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-100 focus:outline-none"
              aria-expanded={isOpen}
            >
              <span className="sr-only">Open main menu</span>
              {isOpen ? (
                <svg
                  className="block h-6 w-6"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  aria-hidden="true"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M6 18L18 6M6 6l12 12"
                  />
                </svg>
              ) : (
                <svg
                  className="block h-6 w-6"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  aria-hidden="true"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M4 6h16M4 12h16M4 18h16"
                  />
                </svg>
              )}
            </button>
          </div>
        </div>
      </div>

      {/* Mobile menu */}
      {isOpen && (
        <div className="md:hidden">
          <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3">
            {navigationItems.map((item) => (
              <Link
                key={item.href}
                href={item.href}
                className={`block px-3 py-2 rounded-md text-base font-medium ${
                  pathname === item.href
                    ? 'bg-blue-50 text-blue-700'
                    : 'text-gray-700 hover:bg-gray-100'
                }`}
                onClick={() => setIsOpen(false)}
              >
                {item.label}
              </Link>
            ))}
          </div>
        </div>
      )}
    </nav>
  );
}
</file>

<file path="components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }
</file>

<file path="components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
</file>

<file path="components/ui/form.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState } = useFormContext()
  const formState = useFormState({ name: fieldContext.name })
  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  )
}

function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField()

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
}

function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
}

function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField()

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : props.children

  if (!body) {
    return null
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive text-sm", className)}
      {...props}
    >
      {body}
    </p>
  )
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="components/ui/hover-button.tsx">
"use client";

import React from "react";
import { Button } from "@/components/ui/button";
import { motion } from "framer-motion";

interface HoverButtonProps extends React.ComponentProps<"button"> {
  children: React.ReactNode;
  className?: string;
  variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link";
  size?: "default" | "sm" | "lg" | "icon";
  asChild?: boolean;
}

export const HoverButton: React.FC<HoverButtonProps> = ({ 
  children, 
  className, 
  ...props 
}) => {
  return (
    <motion.div
      whileHover={{ scale: 1.05 }}
      transition={{ type: "spring", stiffness: 400, damping: 10 }}
    >
      <Button className={className} {...props}>
        {children}
      </Button>
    </motion.div>
  );
};
</file>

<file path="components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }
</file>

<file path="components/ui/label.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }
</file>

<file path="components/ui/staggered-text.tsx">
"use client";

import React from "react";
import { motion } from "framer-motion";
import { cn } from "@/lib/utils";

interface StaggeredTextProps {
  children: React.ReactNode;
  className?: string;
  delay?: number;
  duration?: number;
  staggerChildren?: number;
}

export const StaggeredText: React.FC<StaggeredTextProps> = ({
  children,
  className,
  delay = 0,
  duration = 0.5,
  staggerChildren = 0.1,
}) => {
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        delayChildren: delay,
        staggerChildren: staggerChildren,
      },
    },
  };

  const itemVariants = {
    hidden: {
      y: 20,
      opacity: 0,
    },
    visible: {
      y: 0,
      opacity: 1,
      transition: {
        duration: duration,
      },
    },
  };

  return (
    <motion.div
      className={cn(className)}
      initial="hidden"
      animate="visible"
      variants={containerVariants}
    >
      {React.Children.map(children, (child) => (
        <motion.div variants={itemVariants}>
          {child}
        </motion.div>
      ))}
    </motion.div>
  );
};
</file>

<file path="components/ui/text-animate.tsx">
"use client";

import React, { useEffect, useState } from "react";
import { motion } from "framer-motion";

export interface TextGenerateEffectProps {
  words: string;
  className?: string;
}

export const TextGenerateEffect: React.FC<TextGenerateEffectProps> = ({ words, className = "" }) => {
  const [displayedText, setDisplayedText] = useState("");
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isComplete, setIsComplete] = useState(false);

  useEffect(() => {
    if (currentIndex < words.length) {
      const timeout = setTimeout(() => {
        setDisplayedText((prev) => prev + words[currentIndex]);
        setCurrentIndex((prev) => prev + 1);
      }, 40); // Adjust speed here

      return () => clearTimeout(timeout);
    } else {
      setIsComplete(true);
    }
  }, [currentIndex, words]);

  return (
    <div className={className}>
      <div className="mt-4">
        <div className="text-left">
          {displayedText}
          {!isComplete && (
            <motion.span
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.5, repeat: Infinity, repeatType: "reverse" }}
              className="inline-block ml-1 bg-orange-500 w-1 h-8"
            >
              &nbsp;
            </motion.span>
          )}
        </div>
      </div>
    </div>
  );
};
</file>

<file path="docs/gcp-cloud-storage-cdn.md">
# GCP Cloud Storage with CDN for Image Optimization

This document explains how to set up and use Google Cloud Storage with Cloud CDN for optimized image delivery in the Testero frontend.

## Overview

We've implemented a solution to store and serve optimized images using Google Cloud Storage (GCS) with Cloud CDN. This approach provides several benefits:

- **Global Edge Caching**: Faster image loading for users worldwide
- **WebP Format Support**: Smaller file sizes (30% smaller than PNG/JPG)
- **Responsive Images**: Multiple sizes for different devices
- **Proper Cache Control**: Optimal caching for returning visitors
- **Reduced Origin Load**: Less traffic to our main servers

## Setup Instructions

### Prerequisites

1. Google Cloud Platform account with billing enabled
2. `gcloud` CLI installed and configured
3. Appropriate GCP permissions (Storage Admin, Compute Admin)

### Step 1: Configure Environment Variables

Add the following environment variables to your `.env.local` file for local development:

```
# GCP Cloud Storage Configuration
USE_GCP_STORAGE=true
GCP_STORAGE_BUCKET_NAME=testero-media
GCP_CDN_URL=https://media.testero.ai
GCP_PROJECT_ID=your-project-id
GCP_KEY_FILE_PATH=/path/to/service-account-key.json
```

For production, these variables should be set in your CI/CD pipeline or cloud environment.

### Step 2: Create a Service Account (for local development)

1. Go to the [GCP Console](https://console.cloud.google.com/)
2. Navigate to IAM & Admin > Service Accounts
3. Create a new service account with the following roles:
   - Storage Admin
   - Storage Object Admin
   - Compute Admin (for CDN configuration)
4. Create and download a JSON key file
5. Set the path to this file in the `GCP_KEY_FILE_PATH` environment variable

### Step 3: Run the Setup Script

We've provided a script to automate the setup process:

```bash
npm run setup:gcp-storage
```

This script will:
1. Create a GCS bucket if it doesn't exist
2. Configure public access
3. Set up CORS for web access
4. Configure lifecycle policies
5. Enable Cloud CDN

### Step 4: Configure DNS (for production)

To use a custom domain (e.g., `media.testero.ai`):

1. Create a URL map pointing to your backend bucket
2. Set up an SSL certificate for your domain
3. Create a target HTTPS proxy with the certificate
4. Create a forwarding rule to direct traffic to the proxy
5. Update your DNS to point to the forwarding rule IP

## Usage

### Generating and Uploading Images

The image generation script (`scripts/generate-social-images.js`) has been updated to:

1. Generate optimized images in both JPEG/PNG and WebP formats
2. Upload them to GCP Cloud Storage with proper cache headers
3. Create a JSON file with CDN URLs for reference

To generate and upload images:

```bash
npm run generate:social-images
```

### Using CDN URLs in SEO Metadata

The SEO implementation (`lib/seo/seo.ts`) has been updated to use CDN URLs when available. It will:

1. Check for the existence of `image-urls.json`
2. Use CDN URLs for Open Graph, Twitter, and structured data images
3. Fall back to local paths if CDN URLs are not available

### Manually Uploading Images

You can use the utility functions in `lib/gcp/storage.ts` to upload images programmatically:

```typescript
import { uploadFile, uploadBuffer } from '../lib/gcp/storage';

// Upload a file
const fileUrl = await uploadFile(
  '/path/to/local/image.jpg',
  'destination/image.jpg',
  {
    contentType: 'image/jpeg',
    cacheControl: 'public, max-age=31536000',
  }
);

// Upload a buffer
const buffer = await sharp(imageData).jpeg().toBuffer();
const bufferUrl = await uploadBuffer(
  buffer,
  'destination/image.jpg',
  {
    contentType: 'image/jpeg',
  }
);
```

## Docker Configuration

The Dockerfile has been updated to support GCP Cloud Storage:

1. Added build arguments for GCP configuration
2. Added environment variables for the build stage
3. Added support for service account key file

When building the Docker image, you can pass GCP configuration:

```bash
docker build \
  --build-arg GCP_STORAGE_BUCKET_NAME=testero-media \
  --build-arg GCP_CDN_URL=https://media.testero.ai \
  --build-arg USE_GCP_STORAGE=true \
  --build-arg GCP_PROJECT_ID=your-project-id \
  --build-arg GCP_SERVICE_ACCOUNT_KEY="$(cat /path/to/service-account-key.json)" \
  -t testero-frontend .
```

## Troubleshooting

### Common Issues

1. **Permission Denied**: Ensure your service account has the necessary permissions
2. **Bucket Not Found**: Check that the bucket name is correct and exists
3. **CDN Not Working**: Verify that Cloud CDN is properly enabled
4. **CORS Issues**: Check the CORS configuration in the bucket settings

### Debugging

1. Check the logs in the GCP Console
2. Run the image generation script with debugging:
   ```bash
   NODE_DEBUG=http,https npm run generate:social-images
   ```
3. Verify the bucket permissions in the GCP Console

## Best Practices

1. **Use WebP Format**: Always generate WebP versions of images for better performance
2. **Set Proper Cache Headers**: Use long cache times for static assets
3. **Use Descriptive Filenames**: Include relevant keywords for SEO
4. **Generate Multiple Sizes**: Create responsive images for different devices
5. **Implement Lazy Loading**: Use the `loading="lazy"` attribute for images below the fold

## Resources

- [Google Cloud Storage Documentation](https://cloud.google.com/storage/docs)
- [Cloud CDN Documentation](https://cloud.google.com/cdn/docs)
- [WebP Format](https://developers.google.com/speed/webp)
- [Image Optimization Best Practices](https://web.dev/fast/#optimize-your-images)
</file>

<file path="docs/github-secrets-setup.md">
# GitHub Secrets Setup for GCP Deployment

This document provides detailed information about the GitHub secrets required for deploying the Testero frontend to Google Cloud Platform (GCP) using GitHub Actions.

## Required Secrets

The following secrets must be configured in your GitHub repository for the deployment workflow to function correctly:

| Secret Name | Description | Example Value |
|-------------|-------------|---------------|
| `GCP_SA_KEY` | The service account key JSON file content | `{"type": "service_account", "project_id": "testero-project", ...}` |
| `GCP_PROJECT_ID` | Your Google Cloud project ID | `testero-project` |
| `GCP_REGION` | The region where your GCP resources are located | `us-central1` |
| `ARTIFACT_REPOSITORY` | The name of your Artifact Registry repository | `testero` |
| `SERVICE_NAME` | The name of your Cloud Run service | `testero-frontend` |

## Setting Up Secrets

To add these secrets to your GitHub repository:

1. Go to your GitHub repository
2. Navigate to Settings > Secrets and variables > Actions
3. Click "New repository secret"
4. Add each secret with its corresponding value

## Secret Details

### GCP_SA_KEY

This is the most sensitive secret and contains the full JSON content of the service account key file. This key grants GitHub Actions the permissions needed to deploy to GCP.

To generate this key:

1. Run the service account creation script:
   ```bash
   chmod +x scripts/create-github-actions-service-account.sh
   ./scripts/create-github-actions-service-account.sh
   ```

2. The script will generate a file named `github-actions-key.json`
3. Copy the entire contents of this file (including all curly braces, quotes, etc.)
4. Paste this content as the value for the `GCP_SA_KEY` secret

**Security Note**: This key grants access to your GCP resources. Never commit this key to your repository, share it publicly, or include it in logs.

### GCP_PROJECT_ID

This is your Google Cloud project identifier. You can find this in the GCP Console dashboard or by running:

```bash
gcloud config get-value project
```

### GCP_REGION

This is the GCP region where your resources are deployed. The default value used in the scripts is `us-central1`. This should match the region where your Artifact Registry repository and Cloud Run service are located.

### ARTIFACT_REPOSITORY

This is the name of your Artifact Registry repository where Docker images are stored. The default value used in the scripts is `testero`.

### SERVICE_NAME

This is the name of your Cloud Run service. The default value used in the scripts is `testero-frontend`.

## Rotating Secrets

For security best practices, you should periodically rotate the service account key:

1. Create a new key for the service account:
   ```bash
   gcloud iam service-accounts keys create new-key.json --iam-account=github-actions-deployer@YOUR_PROJECT_ID.iam.gserviceaccount.com
   ```

2. Update the `GCP_SA_KEY` secret in GitHub with the contents of the new key
3. Delete the old key:
   ```bash
   gcloud iam service-accounts keys list --iam-account=github-actions-deployer@YOUR_PROJECT_ID.iam.gserviceaccount.com
   gcloud iam service-accounts keys delete KEY_ID --iam-account=github-actions-deployer@YOUR_PROJECT_ID.iam.gserviceaccount.com
   ```

## Troubleshooting

If you encounter issues with the GitHub Actions deployment:

1. **Authentication failures**:
   - Verify that the `GCP_SA_KEY` secret contains the complete and valid JSON content
   - Check that the service account has the necessary permissions (Cloud Run Admin, Artifact Registry Admin, Service Account User)
   - Ensure the key hasn't been revoked or expired

2. **Resource not found errors**:
   - Verify that `GCP_PROJECT_ID`, `GCP_REGION`, `ARTIFACT_REPOSITORY`, and `SERVICE_NAME` are correct
   - Check that these resources actually exist in your GCP project
   - Ensure the service account has access to these resources

3. **Workflow failures**:
   - Check the GitHub Actions logs for detailed error messages
   - Verify that all required secrets are set correctly
   - Test the deployment manually to isolate any issues

## Related Documentation

- [GitHub Actions Deployment](./github-actions-deployment.md)
- [Artifact Registry Setup](./artifact-registry-setup.md)
- [Deployment Guide](../DEPLOYMENT.md)
</file>

<file path="docs/troubleshooting-artifact-registry.md">
# Troubleshooting Artifact Registry Issues

This document provides guidance on troubleshooting and resolving issues with Google Cloud Platform's Artifact Registry, specifically for the Testero frontend deployment workflow.

## Common Error: 404 Not Found When Pushing to Artifact Registry

If you encounter an error like this when running your deployment workflow:

```
ERROR: failed to push ***-docker.pkg.dev/***/***/frontend:fafb0c929b30530701c6648200bd7fc3593ddbba: failed to authorize: failed to fetch oauth token: unexpected status from GET request to https://***-docker.pkg.dev/v2/token?scope=repository%3A***%2F***%2Ffrontend%3Apull%2Cpush&service=***-docker.pkg.dev: 404 Not Found
```

This indicates one of the following issues:

1. The Artifact Registry repository doesn't exist
2. The repository exists in a different region than specified
3. The service account doesn't have the necessary permissions
4. The Artifact Registry API is not enabled
5. There's a mismatch between GitHub secrets and actual GCP configuration

## Using the Troubleshooting Script

We've created a comprehensive troubleshooting script that will help identify and fix these issues. The script checks for:

- Artifact Registry API status
- Repository existence and configuration
- Service account permissions
- Docker authentication with Artifact Registry
- GitHub Actions secrets configuration

### Running the Script

```bash
# Make the script executable (if not already)
chmod +x scripts/troubleshoot-artifact-registry.sh

# Run the script
./scripts/troubleshoot-artifact-registry.sh
```

The script will guide you through the troubleshooting process with interactive prompts and will automatically fix issues when possible.

## Manual Troubleshooting Steps

If you prefer to troubleshoot manually, follow these steps:

### 1. Check if the Artifact Registry API is enabled

```bash
gcloud services list --enabled | grep artifactregistry.googleapis.com
```

If not enabled, enable it:

```bash
gcloud services enable artifactregistry.googleapis.com
```

### 2. Verify the repository exists

```bash
# Replace REGION and REPOSITORY_NAME with your values
gcloud artifacts repositories describe REPOSITORY_NAME --location=REGION
```

If it doesn't exist, create it:

```bash
gcloud artifacts repositories create REPOSITORY_NAME \
  --repository-format=docker \
  --location=REGION \
  --description="Docker repository for Testero frontend images"
```

Note: Lifecycle policies (for automatic cleanup of old images) need to be configured manually in the GCP Console. The previous scripts attempted to set these up automatically, but this feature is not available in the standard gcloud CLI.

### 3. Check service account permissions

```bash
# Get the IAM policy
gcloud projects get-iam-policy PROJECT_ID

# Look for the service account and its roles
# It should have at least:
# - roles/artifactregistry.admin
# - roles/run.admin
# - roles/iam.serviceAccountUser
```

If permissions are missing, add them:

```bash
gcloud projects add-iam-policy-binding PROJECT_ID \
  --member="serviceAccount:SERVICE_ACCOUNT_EMAIL" \
  --role="roles/artifactregistry.admin"
```

### 4. Test Docker authentication

```bash
# Configure Docker for Artifact Registry
gcloud auth configure-docker REGION-docker.pkg.dev

# Try a manual push
docker build -t REGION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/test:latest .
docker push REGION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/test:latest
```

### 5. Verify GitHub secrets

Ensure these GitHub secrets are correctly set:
- `GCP_PROJECT_ID`: Your Google Cloud project ID
- `GCP_REGION`: The region where your Artifact Registry is located
- `ARTIFACT_REPOSITORY`: The name of your Artifact Registry repository
- `SERVICE_NAME`: The name of your Cloud Run service
- `GCP_SA_KEY`: The service account key JSON file content

## Fixing Dockerfile Warnings

You may also see warnings about the Dockerfile format:

```
LegacyKeyValueFormat: "ENV key=value" should be used instead of legacy "ENV key value" format
```

To fix these, update your Dockerfile to use the recommended format:

Change from:
```dockerfile
ENV KEY VALUE
```

To:
```dockerfile
ENV KEY=VALUE
```

For example:
```dockerfile
# Before
ENV NODE_ENV production
ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

# After
ENV NODE_ENV=production
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"
```

## Recreating the Service Account Key

If you suspect issues with the service account key, you can create a new one:

```bash
# Create a new key
gcloud iam service-accounts keys create new-key.json \
  --iam-account=github-actions-deployer@PROJECT_ID.iam.gserviceaccount.com

# Update the GitHub secret with the contents of this new key
# (Copy the entire contents of new-key.json to the GCP_SA_KEY secret)
```

## Additional Resources

- [Artifact Registry documentation](https://cloud.google.com/artifact-registry/docs)
- [GitHub Actions for GCP documentation](https://github.com/google-github-actions/auth)
- [Cloud Run deployment documentation](https://cloud.google.com/run/docs/deploying)
- [GCP service account best practices](https://cloud.google.com/iam/docs/best-practices-for-managing-service-account-keys)
</file>

<file path="lib/content/slugSafeLoader.ts">
import {
  Content,
  getHubContent,
  getSpokeContent,
  getSpokesForHub,
  getAllContentSlugs,
  getAllHubContent,
  getAllSpokeContent
} from './loader';

/**
 * This file provides wrapper functions that safely handle Next.js dynamic route params
 * to avoid "params should be awaited before using its properties" errors.
 */

// Define types for Next.js params
interface ParamsWithSlug {
  slug: string | string[];
  [key: string]: unknown;
}

interface ObjectWithParams {
  params?: ParamsWithSlug;
  slug?: string | string[];
  [key: string]: unknown;
}

// Helper function to safely get slug synchronously
function getSafeSlugSync(slugValue: string | string[] | Record<string, unknown> | undefined): string {
  // If it's already a string, return it
  if (typeof slugValue === 'string') {
    return slugValue;
  }
  
  // If it's an array (string[]), take the first item
  if (Array.isArray(slugValue)) {
    return String(slugValue[0] || 'unknown-slug');
  }
  
  // If it's an object or undefined, convert to string
  return String(slugValue || 'unknown-slug');
}

// Safe wrapper for getHubContent
export async function getHubContentSafe(slugOrParams: string | ObjectWithParams): Promise<Content | null> {
  let slug: string;
  
  try {
    // Handle Next.js props with potentially Promise-like params
    if (slugOrParams && typeof slugOrParams === 'object') {
      const params = slugOrParams as ObjectWithParams;
      if (params.params && params.params.slug) {
        // For direct params access, we use a static string if there's an error accessing slug
        try {
          slug = getSafeSlugSync(params.params.slug);
        } catch {
          // If we can't access params.slug (e.g., it's a Promise), use a default slug
          slug = 'google-cloud-certification-guide';
        }
      } else if (params.slug) {
        // Direct slug property
        slug = getSafeSlugSync(params.slug);
      } else {
        // Default fallback
        slug = 'google-cloud-certification-guide';
      }
    } else if (typeof slugOrParams === 'string') {
      // Direct string slug
      slug = slugOrParams;
    } else {
      // Unknown format, use default
      slug = 'google-cloud-certification-guide';
    }
  } catch {
    // If any errors occur, fall back to default slug
    slug = 'google-cloud-certification-guide';
  }
  
  // Get the content 
  return getHubContent(slug);
}

// Safe wrapper for getSpokeContent
export async function getSpokeContentSafe(slugOrParams: string | ObjectWithParams): Promise<Content | null> {
  let slug: string;
  
  try {
    // Handle Next.js props with potentially Promise-like params
    if (slugOrParams && typeof slugOrParams === 'object') {
      const params = slugOrParams as ObjectWithParams;
      if (params.params && params.params.slug) {
        // For direct params access, we use a static string if there's an error accessing slug
        try {
          slug = getSafeSlugSync(params.params.slug);
        } catch {
          // If we can't access params.slug (e.g., it's a Promise), use a default slug
          slug = 'google-cloud-digital-leader-certification';
        }
      } else if (params.slug) {
        // Direct slug property
        slug = getSafeSlugSync(params.slug);
      } else {
        // Default fallback
        slug = 'google-cloud-digital-leader-certification';
      }
    } else if (typeof slugOrParams === 'string') {
      // Direct string slug
      slug = slugOrParams;
    } else {
      // Unknown format, use default
      slug = 'google-cloud-digital-leader-certification';
    }
  } catch {
    // If any errors occur, fall back to default slug
    slug = 'google-cloud-digital-leader-certification';
  }
  
  // Get the content
  return getSpokeContent(slug);
}

// Safe wrapper for getSpokesForHub
export async function getSpokesForHubSafe(slugOrParams: string | ObjectWithParams): Promise<Content[]> {
  let slug: string;
  
  try {
    // Handle Next.js props with potentially Promise-like params
    if (slugOrParams && typeof slugOrParams === 'object') {
      const params = slugOrParams as ObjectWithParams;
      if (params.params && params.params.slug) {
        // For direct params access, we use a static string if there's an error accessing slug
        try {
          slug = getSafeSlugSync(params.params.slug);
        } catch {
          // If we can't access params.slug (e.g., it's a Promise), use a default slug
          slug = 'google-cloud-certification-guide';
        }
      } else if (params.slug) {
        // Direct slug property
        slug = getSafeSlugSync(params.slug);
      } else {
        // Default fallback
        slug = 'google-cloud-certification-guide';
      }
    } else if (typeof slugOrParams === 'string') {
      // Direct string slug
      slug = slugOrParams;
    } else {
      // Unknown format, use default
      slug = 'google-cloud-certification-guide';
    }
  } catch {
    // If any errors occur, fall back to default slug
    slug = 'google-cloud-certification-guide';
  }
  
  // Get the related spokes
  return getSpokesForHub(slug);
}

// Re-export other functions directly
export {
  getAllContentSlugs,
  getAllHubContent,
  getAllSpokeContent,
  type Content
};
</file>

<file path="lib/design-system/animations.ts">
// Design System: Animations
// This file defines the animation patterns for the Testero waitlist page

// Animation durations (in milliseconds)
export const duration = {
  fast: 150,        // Quick micro-interactions
  default: 300,     // Standard animations
  slow: 500,        // Emphasized animations
  slower: 700,      // Extended animations
};

// Animation easing curves (standard CSS easing functions)
export const easing = {
  // Standard easings
  linear: 'linear',
  ease: 'ease',
  easeIn: 'ease-in',
  easeOut: 'ease-out',
  easeInOut: 'ease-in-out',
  
  // Custom cubic-bezier easings for more polished animations
  standard: 'cubic-bezier(0.4, 0.0, 0.2, 1)', // Material standard
  accelerate: 'cubic-bezier(0.4, 0.0, 1, 1)',  // Material accelerate
  decelerate: 'cubic-bezier(0.0, 0.0, 0.2, 1)', // Material decelerate
  
  // Springy animations (suitable for movements, transformations)
  spring: 'cubic-bezier(0.5, 0, 0.1, 1.4)',
  bounce: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
};

// Animation delays (in milliseconds)
export const delay = {
  none: 0,
  tiny: 50,
  short: 100,
  medium: 200,
  long: 300,
};

// Staggered animation settings
export const stagger = {
  children: 0.1,    // Delay between child elements (seconds)
  sibling: 0.05,    // Delay between sibling elements (seconds)
  list: 0.08,       // Delay for list items (seconds)
};

// Predefined animation presets for common use cases
export const animationPresets = {
  // Fade animations
  fadeIn: {
    keyframes: {
      from: { opacity: 0 },
      to: { opacity: 1 },
    },
    duration: duration.default,
    easing: easing.standard,
  },
  fadeOut: {
    keyframes: {
      from: { opacity: 1 },
      to: { opacity: 0 },
    },
    duration: duration.default,
    easing: easing.standard,
  },
  
  // Slide animations
  slideInFromTop: {
    keyframes: {
      from: { transform: 'translateY(-20px)', opacity: 0 },
      to: { transform: 'translateY(0)', opacity: 1 },
    },
    duration: duration.default,
    easing: easing.spring,
  },
  slideInFromBottom: {
    keyframes: {
      from: { transform: 'translateY(20px)', opacity: 0 },
      to: { transform: 'translateY(0)', opacity: 1 },
    },
    duration: duration.default,
    easing: easing.spring,
  },
  slideInFromLeft: {
    keyframes: {
      from: { transform: 'translateX(-20px)', opacity: 0 },
      to: { transform: 'translateX(0)', opacity: 1 },
    },
    duration: duration.default,
    easing: easing.spring,
  },
  slideInFromRight: {
    keyframes: {
      from: { transform: 'translateX(20px)', opacity: 0 },
      to: { transform: 'translateX(0)', opacity: 1 },
    },
    duration: duration.default,
    easing: easing.spring,
  },
  
  // Scale animations
  scaleIn: {
    keyframes: {
      from: { transform: 'scale(0.9)', opacity: 0 },
      to: { transform: 'scale(1)', opacity: 1 },
    },
    duration: duration.default,
    easing: easing.spring,
  },
  scaleOut: {
    keyframes: {
      from: { transform: 'scale(1)', opacity: 1 },
      to: { transform: 'scale(0.9)', opacity: 0 },
    },
    duration: duration.default,
    easing: easing.spring,
  },
  
  // For hover effects
  hover: {
    scale: {
      transform: 'scale(1.05)',
      transition: `transform ${duration.fast}ms ${easing.spring}`,
    },
    lift: {
      transform: 'translateY(-4px)',
      transition: `transform ${duration.fast}ms ${easing.spring}`,
    },
    glow: {
      boxShadow: '0 0 8px rgba(0, 0, 0, 0.2)',
      transition: `box-shadow ${duration.fast}ms ${easing.easeOut}`,
    },
  },
};

// Guidelines for animation usage based on component types
export const animationUsage = {
  button: {
    hover: animationPresets.hover.scale,
    active: {
      transform: 'scale(0.97)',
      transition: `transform ${duration.fast}ms ${easing.easeInOut}`,
    },
    focus: animationPresets.hover.glow,
  },
  card: {
    hover: animationPresets.hover.lift,
    entry: animationPresets.scaleIn,
  },
  modal: {
    entry: animationPresets.scaleIn,
    exit: animationPresets.scaleOut,
  },
  notification: {
    entry: animationPresets.slideInFromTop,
    exit: animationPresets.fadeOut,
  },
  list: {
    entry: {
      ...animationPresets.fadeIn,
      stagger: stagger.list,
    },
  },
  form: {
    submission: {
      loading: {
        animation: 'spin 1s linear infinite',
      },
      success: {
        ...animationPresets.scaleIn,
        backgroundColor: 'rgba(0, 255, 0, 0.1)',
      },
      error: {
        transform: 'translateX(0)',
        keyframes: [
          { transform: 'translateX(-5px)', offset: 0.2 },
          { transform: 'translateX(5px)', offset: 0.4 },
          { transform: 'translateX(-5px)', offset: 0.6 },
          { transform: 'translateX(5px)', offset: 0.8 },
          { transform: 'translateX(0)', offset: 1 },
        ],
        duration: duration.slow,
        easing: easing.easeOut,
      },
    },
  },
};

// Reduced motion settings for accessibility
export const reducedMotion = {
  fadeOnly: {
    // Only use opacity changes, no movement
    entry: animationPresets.fadeIn,
    exit: animationPresets.fadeOut,
    
    // Replace movement animations with fade
    slideIn: animationPresets.fadeIn,
    slideOut: animationPresets.fadeOut,
    
    // Remove scale changes, keep opacity
    scaleIn: {
      keyframes: {
        from: { opacity: 0 },
        to: { opacity: 1 },
      },
      duration: duration.default,
      easing: easing.easeInOut,
    },
    hover: {
      transition: 'none',
      transform: 'none',
      boxShadow: 'none',
    },
  },
};
</file>

<file path="lib/design-system/breakpoints.ts">
// Design System: Breakpoints
// This file defines the responsive breakpoints for the Testero waitlist page

// Breakpoint sizes in pixels
export const breakpoints = {
  xs: 320,   // Small mobile
  sm: 640,   // Mobile
  md: 768,   // Tablet
  lg: 1024,  // Small desktop/laptop
  xl: 1280,  // Desktop
  '2xl': 1536, // Large desktop
};

// Media query strings for use in CSS-in-JS
export const mediaQueries = {
  xs: `(min-width: ${breakpoints.xs}px)`,
  sm: `(min-width: ${breakpoints.sm}px)`,
  md: `(min-width: ${breakpoints.md}px)`,
  lg: `(min-width: ${breakpoints.lg}px)`,
  xl: `(min-width: ${breakpoints.xl}px)`,
  '2xl': `(min-width: ${breakpoints['2xl']}px)`,
  
  // Max-width queries for targeting specific ranges
  xsOnly: `(max-width: ${breakpoints.sm - 1}px)`,
  smOnly: `(min-width: ${breakpoints.sm}px) and (max-width: ${breakpoints.md - 1}px)`,
  mdOnly: `(min-width: ${breakpoints.md}px) and (max-width: ${breakpoints.lg - 1}px)`,
  lgOnly: `(min-width: ${breakpoints.lg}px) and (max-width: ${breakpoints.xl - 1}px)`,
  xlOnly: `(min-width: ${breakpoints.xl}px) and (max-width: ${breakpoints['2xl'] - 1}px)`,
  '2xlOnly': `(min-width: ${breakpoints['2xl']}px)`,
  
  // Other useful queries
  mobile: `(max-width: ${breakpoints.md - 1}px)`,
  tablet: `(min-width: ${breakpoints.md}px) and (max-width: ${breakpoints.lg - 1}px)`,
  desktop: `(min-width: ${breakpoints.lg}px)`,
  touch: `(max-width: ${breakpoints.lg - 1}px)`,
  
  // Dark mode and preferences
  dark: '(prefers-color-scheme: dark)',
  light: '(prefers-color-scheme: light)',
  reducedMotion: '(prefers-reduced-motion: reduce)',
};

// Responsive patterns and guidelines
export const responsive = {
  // Layout adaptation
  layout: {
    mobile: {
      // Mobile-specific layout adjustments
      singleColumn: true,
      stackedNavigation: true,
      fullWidthImages: true,
      compactSpacing: true,
    },
    tablet: {
      // Tablet-specific layout adjustments
      singleColumn: false,
      twoColumnLayout: true,
      compactNavigation: true,
      expandedCards: true,
    },
    desktop: {
      // Desktop-specific layout adjustments
      multiColumn: true,
      horizontalNavigation: true,
      expandedContent: true,
      wideSpacing: true,
    },
  },

  // Component adaptation
  components: {
    // How components should adapt across breakpoints
    cards: {
      mobile: 'fullWidth',
      tablet: 'gridLayout',
      desktop: 'gridLayout',
    },
    navigation: {
      mobile: 'hamburgerMenu',
      tablet: 'compactNav',
      desktop: 'fullNav',
    },
    forms: {
      mobile: 'stackedLabels',
      tablet: 'inlineLabels',
      desktop: 'inlineLabels',
    },
  },

  // Container widths
  container: {
    sm: '640px',
    md: '768px',
    lg: '1024px',
    xl: '1280px',
    '2xl': '1536px',
  },
};
</file>

<file path="lib/design-system/colors.ts">
// Design System: Colors
// This file defines the color palette for the Testero waitlist page

export const colors = {
  // Main brand colors
  primary: {
    50: '#f8fafc',  // Very light slate
    100: '#f1f5f9', // Light slate
    200: '#e2e8f0', // Slate 200
    300: '#cbd5e1', // Slate 300
    400: '#94a3b8', // Slate 400
    500: '#64748b', // Slate 500
    600: '#475569', // Slate 600
    700: '#334155', // Slate 700
    800: '#1e293b', // Slate 800
    900: '#0f172a', // Slate 900
  },
  
  // Accent colors (orange shades)
  accent: {
    50: '#fff7ed',  // Orange 50
    100: '#ffedd5', // Orange 100
    200: '#fed7aa', // Orange 200
    300: '#fdba74', // Orange 300
    400: '#fb923c', // Orange 400
    500: '#f97316', // Orange 500 (primary accent)
    600: '#ea580c', // Orange 600
    700: '#c2410c', // Orange 700
    800: '#9a3412', // Orange 800
    900: '#7c2d12', // Orange 900
  },

  // Success, error, warning colors
  feedback: {
    success: {
      light: '#d1fae5', // Green 100
      base: '#10b981',  // Green 500
      dark: '#065f46',  // Green 800
    },
    error: {
      light: '#fee2e2', // Red 100
      base: '#ef4444',  // Red 500
      dark: '#991b1b',  // Red 800
    },
    warning: {
      light: '#fef3c7', // Yellow 100
      base: '#f59e0b',  // Yellow 500
      dark: '#92400e',  // Yellow 800
    },
    info: {
      light: '#dbeafe', // Blue 100
      base: '#3b82f6',  // Blue 500
      dark: '#1e40af',  // Blue 800
    }
  },

  // Common UI colors
  ui: {
    white: '#ffffff',
    black: '#000000',
    background: {
      light: '#f8fafc', // Slate 50
      dark: '#0f172a',  // Slate 900
    },
    card: {
      light: '#ffffff',
      dark: '#1e293b',  // Slate 800
    },
    border: {
      light: '#e2e8f0', // Slate 200
      dark: '#334155',  // Slate 700
    }
  }
};

// Color usage guidelines
export const colorUsage = {
  pageBackground: colors.ui.background.light,
  text: {
    primary: colors.primary[800],
    secondary: colors.primary[600],
    muted: colors.primary[400],
    accent: colors.accent[500],
    inverse: colors.ui.white,
  },
  button: {
    primary: {
      background: colors.accent[500],
      hover: colors.accent[600],
      text: colors.ui.white,
    },
    secondary: {
      background: colors.primary[100],
      hover: colors.primary[200],
      text: colors.primary[800],
    },
    outline: {
      border: colors.primary[300],
      hover: colors.primary[200],
      text: colors.primary[800],
    }
  },
  card: {
    background: colors.ui.card.light,
    border: colors.ui.border.light,
    shadow: 'rgba(0, 0, 0, 0.1)'
  },
  input: {
    background: colors.ui.white,
    border: colors.primary[300],
    borderFocus: colors.accent[500],
    placeholder: colors.primary[400],
  }
};
</file>

<file path="lib/design-system/components.ts">
// Design System: Component Styles
// This file defines the component styles and variants for the Testero waitlist page

import { colors, colorUsage } from './colors';
import { typography } from './typography';
import { spacing } from './spacing';
import { animationUsage } from './animations';

// Button variants and styles
export const button = {
  // Base styles applied to all buttons
  base: {
    fontFamily: typography.button.default.fontFamily,
    fontSize: typography.button.default.fontSize,
    fontWeight: typography.button.default.fontWeight,
    lineHeight: typography.button.default.lineHeight,
    borderRadius: spacing[2],
    padding: `${spacing[3]} ${spacing[6]}`,
    cursor: 'pointer',
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    transition: 'all 0.3s ease',
    border: 'none',
    outline: 'none',
    whiteSpace: 'nowrap',
  },
  
  // Size variants
  size: {
    sm: {
      fontSize: typography.button.small.fontSize,
      padding: `${spacing[2]} ${spacing[4]}`,
      borderRadius: spacing[1],
    },
    md: {
      // Default size, inherits from base
    },
    lg: {
      fontSize: typography.button.large.fontSize,
      padding: `${spacing[4]} ${spacing[8]}`,
      borderRadius: spacing[3],
    },
  },
  
  // Style variants
  variant: {
    // Primary action buttons (most emphasized)
    primary: {
      backgroundColor: colorUsage.button.primary.background,
      color: colorUsage.button.primary.text,
      '&:hover': {
        backgroundColor: colorUsage.button.primary.hover,
        ...animationUsage.button.hover,
      },
      '&:active': {
        ...animationUsage.button.active,
      },
      '&:focus': {
        ...animationUsage.button.focus,
      },
      '&:disabled': {
        backgroundColor: colors.primary[300],
        color: colors.primary[100],
        cursor: 'not-allowed',
      },
    },
    
    // Secondary action buttons (less emphasized)
    secondary: {
      backgroundColor: colorUsage.button.secondary.background,
      color: colorUsage.button.secondary.text,
      '&:hover': {
        backgroundColor: colorUsage.button.secondary.hover,
        ...animationUsage.button.hover,
      },
      '&:active': {
        ...animationUsage.button.active,
      },
      '&:focus': {
        ...animationUsage.button.focus,
      },
      '&:disabled': {
        backgroundColor: colors.primary[100],
        color: colors.primary[300],
        cursor: 'not-allowed',
      },
    },
    
    // Outline buttons (for secondary actions)
    outline: {
      backgroundColor: 'transparent',
      color: colorUsage.button.outline.text,
      border: `1px solid ${colorUsage.button.outline.border}`,
      '&:hover': {
        backgroundColor: colorUsage.button.outline.hover,
        ...animationUsage.button.hover,
      },
      '&:active': {
        ...animationUsage.button.active,
      },
      '&:focus': {
        ...animationUsage.button.focus,
      },
      '&:disabled': {
        borderColor: colors.primary[200],
        color: colors.primary[300],
        cursor: 'not-allowed',
      },
    },
    
    // Text buttons (minimal visual impact)
    text: {
      backgroundColor: 'transparent',
      color: colorUsage.text.accent,
      padding: `${spacing[1]} ${spacing[2]}`,
      '&:hover': {
        textDecoration: 'underline',
      },
      '&:active': {
        opacity: 0.8,
      },
      '&:disabled': {
        color: colors.primary[300],
        cursor: 'not-allowed',
      },
    },
  },
};

// Card component styles
export const card = {
  // Base styles for all cards
  base: {
    backgroundColor: colorUsage.card.background,
    borderRadius: spacing[3],
    boxShadow: `0 1px 3px ${colorUsage.card.shadow}`,
    border: `1px solid ${colorUsage.card.border}`,
    padding: spacing[6],
    transition: 'all 0.3s ease',
  },
  
  // Card variants
  variant: {
    // Default card style
    default: {
      // Inherits from base
    },
    // Cards with extra elevation
    elevated: {
      boxShadow: `0 4px 6px -1px ${colorUsage.card.shadow}, 0 2px 4px -1px ${colorUsage.card.shadow}`,
    },
    // Cards with more subtle styling
    flat: {
      boxShadow: 'none',
      border: `1px solid ${colors.primary[200]}`,
    },
    // Cards that change on hover
    interactive: {
      cursor: 'pointer',
      '&:hover': {
        boxShadow: `0 10px 15px -3px ${colorUsage.card.shadow}, 0 4px 6px -2px ${colorUsage.card.shadow}`,
        transform: 'translateY(-4px)',
      },
    },
  },
};

// Form element styles
export const form = {
  // Base styles for form elements
  input: {
    base: {
      fontFamily: typography.input.default.fontFamily,
      fontSize: typography.input.default.fontSize,
      lineHeight: typography.input.default.lineHeight,
      color: colorUsage.text.primary,
      backgroundColor: colorUsage.input.background,
      border: `1px solid ${colorUsage.input.border}`,
      borderRadius: spacing[2],
      padding: `${spacing[3]} ${spacing[4]}`,
      width: '100%',
      transition: 'all 0.3s ease',
      '&:focus': {
        outline: 'none',
        borderColor: colorUsage.input.borderFocus,
        boxShadow: `0 0 0 3px ${colors.accent[100]}`,
      },
      '&:disabled': {
        backgroundColor: colors.primary[100],
        cursor: 'not-allowed',
      },
      '&::placeholder': {
        color: colorUsage.input.placeholder,
      },
    },
    // Input field variants
    variant: {
      // Standard text input
      text: {},
      // Email input
      email: {},
      // Password input with potentially different styling
      password: {},
      // Textarea for multi-line text
      textarea: {
        minHeight: '100px',
        resize: 'vertical',
      },
    },
    // Input sizes
    size: {
      sm: {
        fontSize: typography.input.small.fontSize,
        padding: `${spacing[2]} ${spacing[3]}`,
      },
      md: {
        // Default size, inherits from base
      },
      lg: {
        fontSize: typography.input.large.fontSize,
        padding: `${spacing[4]} ${spacing[5]}`,
      },
    },
    // Input states
    state: {
      error: {
        borderColor: colors.feedback.error.base,
        '&:focus': {
          boxShadow: `0 0 0 3px ${colors.feedback.error.light}`,
        },
      },
      success: {
        borderColor: colors.feedback.success.base,
        '&:focus': {
          boxShadow: `0 0 0 3px ${colors.feedback.success.light}`,
        },
      },
    },
  },
  
  // Label styles
  label: {
    base: {
      display: 'block',
      marginBottom: spacing[2],
      fontSize: typography.body.small.fontSize,
      fontWeight: typography.body.small.fontWeight,
      color: colorUsage.text.secondary,
    },
    // Required label
    required: {
      '&::after': {
        content: '" *"',
        color: colors.feedback.error.base,
      },
    },
  },
  
  // Helper text and error message styles
  helperText: {
    base: {
      fontSize: typography.body.caption.fontSize,
      marginTop: spacing[1],
    },
    // Helper text variants
    variant: {
      default: {
        color: colorUsage.text.muted,
      },
      error: {
        color: colors.feedback.error.base,
      },
    },
  },
  
  // Form group (wrapping input, label, helper text)
  group: {
    marginBottom: spacing[6],
  },
};

// Iconography
export const icon = {
  // Base styles
  base: {
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
  },
  // Icon sizes
  size: {
    sm: {
      width: spacing[4],
      height: spacing[4],
    },
    md: {
      width: spacing[6],
      height: spacing[6],
    },
    lg: {
      width: spacing[8],
      height: spacing[8],
    },
  },
};

// Badge/tag styles
export const badge = {
  // Base badge style
  base: {
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: typography.body.caption.fontSize,
    fontWeight: typography.body.caption.fontWeight,
    lineHeight: 1,
    padding: `${spacing[1]} ${spacing[2]}`,
    borderRadius: spacing[2],
  },
  // Badge variants
  variant: {
    // Default badge (grey)
    default: {
      backgroundColor: colors.primary[100],
      color: colors.primary[700],
    },
    // Primary badge (brand color)
    primary: {
      backgroundColor: colors.accent[100],
      color: colors.accent[700],
    },
    // Success badge
    success: {
      backgroundColor: colors.feedback.success.light,
      color: colors.feedback.success.dark,
    },
    // Warning badge
    warning: {
      backgroundColor: colors.feedback.warning.light,
      color: colors.feedback.warning.dark,
    },
    // Error badge
    error: {
      backgroundColor: colors.feedback.error.light,
      color: colors.feedback.error.dark,
    },
  },
};
</file>

<file path="lib/design-system/index.ts">
// Export all design system components for easy imports
export * from './colors';
export * from './typography';
export * from './spacing';
export * from './breakpoints';
export * from './animations';
export * from './components';
</file>

<file path="lib/design-system/README.md">
# Testero Waitlist Page Design System

This document provides an overview of the design system created for the Testero waitlist landing page.

## Table of Contents

1. [Overview](#overview)
2. [Color System](#color-system)
3. [Typography](#typography)
4. [Spacing](#spacing)
5. [Breakpoints & Responsive Design](#breakpoints--responsive-design)
6. [Animations](#animations)
7. [Components](#components)
8. [Usage Guidelines](#usage-guidelines)
9. [Development Access](#development-access)

## Overview

The Testero waitlist design system is built to create a professional, tech-forward landing page that establishes trust and drives waitlist signups. The system emphasizes:

- Clean, modern aesthetics with a focus on readability
- Consistent spacing and alignment for visual harmony
- Strategic use of color to guide users through the conversion funnel
- Responsive behavior across all device sizes
- Thoughtful animations that enhance rather than distract
- Accessibility considerations throughout

## Color System

### Primary Colors

The color palette is built around slate blues for the primary brand colors and orange accents for calls to action and emphasis.

- **Primary (Slate)**: A range of slate colors from light (#f8fafc) to dark (#0f172a) providing a professional, clean foundation
- **Accent (Orange)**: Orange hues from light (#fff7ed) to dark (#7c2d12) for CTAs, highlights, and interactive elements

### Color Usage

The design system defines specific usage patterns for colors:

- Text colors with appropriate contrast levels
- Button colors with proper states (hover, active, disabled)
- Form element colors with validation states
- Card and container colors with border and shadow definitions

## Typography

### Font Families

- **Sans-serif**: System fonts (UI-optimized stack) for all text
- **Monospace**: System monospace fonts for code or technical elements

### Type Scale

A comprehensive type scale from xs (12px) to 9xl (128px) with appropriate responsive adjustments.

### Text Styles

Defined text styles for:

- Headings (h1-h4)
- Body text (large, default, small, caption)
- UI elements (buttons, form fields, labels)

Each text style includes appropriate font size, weight, line height, and letter spacing with mobile adaptations.

## Spacing

A consistent spacing system using a 4px base unit (0.25rem) with a comprehensive scale from 1px to 384px (24rem).

### Spacing Usage

Defined spacing patterns for:

- Page sections
- Component padding and margins
- Stacked and inline element spacing
- Form element spacing

## Breakpoints & Responsive Design

### Breakpoint System

- **xs**: 320px (Small mobile)
- **sm**: 640px (Mobile)
- **md**: 768px (Tablet)
- **lg**: 1024px (Small desktop/laptop)
- **xl**: 1280px (Desktop)
- **2xl**: 1536px (Large desktop)

### Responsive Patterns

Guidelines for how layouts and components should adapt across breakpoints:

- Mobile-first single column layouts
- Tablet two-column layouts
- Desktop multi-column layouts
- Responsive component adaptations (cards, navigation, forms)

## Animations

### Animation Timing

- **Duration**: Fast (150ms), Default (300ms), Slow (500ms), Slower (700ms)
- **Easing**: Various easing functions including spring and bounce effects
- **Delays**: For staggered animations

### Animation Patterns

- Hover/focus effects
- Entry/exit animations
- Loading states
- Success/error feedback
- Staggered animations
- Reduced motion alternatives

## Components

### Button System

- **Variants**: Primary, Secondary, Outline, Text
- **Sizes**: Small, Medium, Large
- **States**: Default, Hover, Active, Focus, Disabled

### Card System

- **Variants**: Default, Elevated, Flat, Interactive
- **Usage**: Content containers, feature highlights, social proof elements

### Form Elements

- **Input fields**: Text, Email, Password, Textarea
- **Labels**: Default, Required
- **Helper text**: Default, Error
- **States**: Default, Focus, Disabled, Error, Success

### Other Components

- Icons
- Badges/Tags

## Usage Guidelines

### General Principles

1. **Consistency**: Use the defined tokens rather than arbitrary values
2. **Hierarchy**: Maintain clear visual hierarchy with appropriate spacing and type scale
3. **Accessibility**: Ensure proper contrast ratios and accommodate reduced motion preferences
4. **Responsiveness**: Test across all breakpoints
5. **Performance**: Optimize animations and transitions for smooth performance

### Implementation

- Import design system tokens from the appropriate modules
- Use the `cn()` utility for combining class names with Tailwind
- Follow the defined component variants and patterns
- Refer to this documentation when creating new UI elements

## Development Access

The design system demo page is available at `/design-system` in the development environment only. This page is restricted in production to keep internal development resources private.

### Accessing the Design System Demo

- Local development: The demo page is available at `http://localhost:3000/design-system` when running the development server.
- Production: The page is not accessible in production environments.

This restriction is implemented in `app/design-system/page.tsx` using environment detection. If you need to access the design system in other environments, consider:

1. Using Basic Memory documentation at `testero-design/testero-design-system-documentation`
2. Deploying a separate, password-protected instance of the design system
3. Adding authenticated access to the design system page

---

This design system should serve as the foundation for all further development on the Testero waitlist page, ensuring consistency and quality throughout the user experience.
</file>

<file path="lib/design-system/spacing.ts">
// Design System: Spacing
// This file defines the spacing system for the Testero waitlist page

// Spacing scale (in pixels, rem values calculated based on 16px browser default)
export const spacing = {
  px: '1px',
  0: '0',
  0.5: '0.125rem',  // 2px
  1: '0.25rem',     // 4px
  1.5: '0.375rem',  // 6px
  2: '0.5rem',      // 8px
  2.5: '0.625rem',  // 10px
  3: '0.75rem',     // 12px
  3.5: '0.875rem',  // 14px
  4: '1rem',        // 16px
  5: '1.25rem',     // 20px
  6: '1.5rem',      // 24px
  7: '1.75rem',     // 28px
  8: '2rem',        // 32px
  9: '2.25rem',     // 36px
  10: '2.5rem',     // 40px
  11: '2.75rem',    // 44px
  12: '3rem',       // 48px
  14: '3.5rem',     // 56px
  16: '4rem',       // 64px
  20: '5rem',       // 80px
  24: '6rem',       // 96px
  28: '7rem',       // 112px
  32: '8rem',       // 128px
  36: '9rem',       // 144px
  40: '10rem',      // 160px
  44: '11rem',      // 176px
  48: '12rem',      // 192px
  52: '13rem',      // 208px
  56: '14rem',      // 224px
  60: '15rem',      // 240px
  64: '16rem',      // 256px
  72: '18rem',      // 288px
  80: '20rem',      // 320px
  96: '24rem',      // 384px
};

// Spacing usage guidelines
export const spacingUsage = {
  // Page and section spacing
  page: {
    maxWidth: '5xl', // Tailwind max-w-5xl = 64rem = 1024px
    horizontalPadding: {
      mobile: spacing[4],      // 1rem = 16px
      tablet: spacing[8],      // 2rem = 32px
      desktop: spacing[24],    // 6rem = 96px
    },
    verticalPadding: {
      mobile: spacing[8],      // 2rem = 32px
      tablet: spacing[12],     // 3rem = 48px
      desktop: spacing[24],    // 6rem = 96px
    },
  },
  
  // Section spacing
  sectionGap: {
    mobile: spacing[12],       // 3rem = 48px
    tablet: spacing[16],       // 4rem = 64px
    desktop: spacing[24],      // 6rem = 96px
  },
  
  // Component spacing
  component: {
    gap: {
      small: spacing[2],       // 0.5rem = 8px
      medium: spacing[4],      // 1rem = 16px
      large: spacing[6],       // 1.5rem = 24px
      xlarge: spacing[8],      // 2rem = 32px
    },
    padding: {
      small: spacing[2],       // 0.5rem = 8px
      medium: spacing[4],      // 1rem = 16px
      large: spacing[6],       // 1.5rem = 24px
      xlarge: spacing[8],      // 2rem = 32px
    },
    margin: {
      small: spacing[2],       // 0.5rem = 8px
      medium: spacing[4],      // 1rem = 16px
      large: spacing[6],       // 1.5rem = 24px
      xlarge: spacing[8],      // 2rem = 32px
    },
  },
  
  // Stack spacing (vertical layouts)
  stack: {
    tight: spacing[2],         // 0.5rem = 8px
    default: spacing[4],       // 1rem = 16px
    loose: spacing[8],         // 2rem = 32px
    xloose: spacing[12],       // 3rem = 48px
  },
  
  // Inline spacing (horizontal layouts)
  inline: {
    tight: spacing[2],         // 0.5rem = 8px
    default: spacing[4],       // 1rem = 16px
    loose: spacing[6],         // 1.5rem = 24px
  },
  
  // Form elements spacing
  form: {
    gap: spacing[4],           // 1rem = 16px
    elementGap: spacing[6],    // 1.5rem = 24px
    padding: spacing[3],       // 0.75rem = 12px
  },
};
</file>

<file path="lib/design-system/typography.ts">
// Design System: Typography
// This file defines the typography system for the Testero waitlist page

// Font families
export const fontFamily = {
  sans: 'ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif',
  mono: 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace',
};

// Font sizes (in pixels, rem values calculated based on 16px browser default)
export const fontSize = {
  xs: '0.75rem',     // 12px
  sm: '0.875rem',    // 14px
  base: '1rem',      // 16px
  lg: '1.125rem',    // 18px
  xl: '1.25rem',     // 20px
  '2xl': '1.5rem',   // 24px
  '3xl': '1.875rem', // 30px
  '4xl': '2.25rem',  // 36px
  '5xl': '3rem',     // 48px
  '6xl': '3.75rem',  // 60px
  '7xl': '4.5rem',   // 72px
  '8xl': '6rem',     // 96px
  '9xl': '8rem',     // 128px
};

// Font weights
export const fontWeight = {
  thin: '100',
  extralight: '200',
  light: '300',
  normal: '400',
  medium: '500',
  semibold: '600',
  bold: '700',
  extrabold: '800',
  black: '900',
};

// Line heights
export const lineHeight = {
  none: '1',
  tight: '1.25',
  snug: '1.375',
  normal: '1.5',
  relaxed: '1.625',
  loose: '2',
};

// Letter spacing
export const letterSpacing = {
  tighter: '-0.05em',
  tight: '-0.025em',
  normal: '0em',
  wide: '0.025em',
  wider: '0.05em',
  widest: '0.1em',
};

// Typography usage guidelines
export const typography = {
  heading: {
    h1: {
      fontFamily: fontFamily.sans,
      fontSize: fontSize['7xl'],
      fontWeight: fontWeight.extrabold,
      lineHeight: lineHeight.tight,
      letterSpacing: letterSpacing.tight,
      mobile: {
        fontSize: fontSize['4xl'],
      }
    },
    h2: {
      fontFamily: fontFamily.sans,
      fontSize: fontSize['5xl'],
      fontWeight: fontWeight.bold,
      lineHeight: lineHeight.tight,
      letterSpacing: letterSpacing.normal,
      mobile: {
        fontSize: fontSize['3xl'],
      }
    },
    h3: {
      fontFamily: fontFamily.sans,
      fontSize: fontSize['3xl'],
      fontWeight: fontWeight.semibold,
      lineHeight: lineHeight.snug,
      letterSpacing: letterSpacing.normal,
      mobile: {
        fontSize: fontSize['2xl'],
      }
    },
    h4: {
      fontFamily: fontFamily.sans,
      fontSize: fontSize['2xl'],
      fontWeight: fontWeight.semibold,
      lineHeight: lineHeight.snug,
      letterSpacing: letterSpacing.normal,
      mobile: {
        fontSize: fontSize.xl,
      }
    },
  },
  body: {
    large: {
      fontFamily: fontFamily.sans,
      fontSize: fontSize['2xl'],
      fontWeight: fontWeight.normal,
      lineHeight: lineHeight.relaxed,
      letterSpacing: letterSpacing.normal,
      mobile: {
        fontSize: fontSize.xl,
      }
    },
    default: {
      fontFamily: fontFamily.sans,
      fontSize: fontSize.lg,
      fontWeight: fontWeight.normal,
      lineHeight: lineHeight.relaxed,
      letterSpacing: letterSpacing.normal,
      mobile: {
        fontSize: fontSize.base,
      }
    },
    small: {
      fontFamily: fontFamily.sans,
      fontSize: fontSize.base,
      fontWeight: fontWeight.normal,
      lineHeight: lineHeight.relaxed,
      letterSpacing: letterSpacing.normal,
      mobile: {
        fontSize: fontSize.sm,
      }
    },
    caption: {
      fontFamily: fontFamily.sans,
      fontSize: fontSize.sm,
      fontWeight: fontWeight.normal,
      lineHeight: lineHeight.relaxed,
      letterSpacing: letterSpacing.normal,
      mobile: {
        fontSize: fontSize.xs,
      }
    },
  },
  button: {
    default: {
      fontFamily: fontFamily.sans,
      fontSize: fontSize.base,
      fontWeight: fontWeight.semibold,
      lineHeight: lineHeight.snug,
      letterSpacing: letterSpacing.normal,
    },
    small: {
      fontFamily: fontFamily.sans,
      fontSize: fontSize.sm,
      fontWeight: fontWeight.semibold,
      lineHeight: lineHeight.snug,
      letterSpacing: letterSpacing.normal,
    },
    large: {
      fontFamily: fontFamily.sans,
      fontSize: fontSize.lg,
      fontWeight: fontWeight.semibold,
      lineHeight: lineHeight.snug,
      letterSpacing: letterSpacing.normal,
    },
  },
  input: {
    default: {
      fontFamily: fontFamily.sans,
      fontSize: fontSize.base,
      fontWeight: fontWeight.normal,
      lineHeight: lineHeight.normal,
      letterSpacing: letterSpacing.normal,
    },
    small: {
      fontFamily: fontFamily.sans,
      fontSize: fontSize.sm,
      fontWeight: fontWeight.normal,
      lineHeight: lineHeight.normal,
      letterSpacing: letterSpacing.normal,
    },
    large: {
      fontFamily: fontFamily.sans,
      fontSize: fontSize.lg,
      fontWeight: fontWeight.normal,
      lineHeight: lineHeight.normal,
      letterSpacing: letterSpacing.normal,
    },
  },
};
</file>

<file path="lib/gcp/README.md">
# GCP Cloud Storage Utilities

This directory contains utility functions for working with Google Cloud Storage in the Testero frontend.

## Overview

The `storage.ts` module provides a set of functions for interacting with GCP Cloud Storage, including:

- Uploading files and buffers
- Getting signed URLs and CDN URLs
- Managing files (checking existence, deleting)
- Configuring CORS for the bucket

## Usage

### Initialization

The storage client is initialized automatically when you use any of the utility functions. It supports two authentication methods:

1. Service account key file (for local development)
2. Application Default Credentials (for production/GCP environments)

```typescript
import { initStorage } from '../lib/gcp/storage';

// Initialize the storage client
const storage = initStorage();
```

### Uploading Files

```typescript
import { uploadFile, uploadBuffer } from '../lib/gcp/storage';

// Upload a file
const fileUrl = await uploadFile(
  '/path/to/local/image.jpg',
  'destination/image.jpg',
  {
    contentType: 'image/jpeg',
    cacheControl: 'public, max-age=31536000',
  }
);

// Upload a buffer
const buffer = await sharp(imageData).jpeg().toBuffer();
const bufferUrl = await uploadBuffer(
  buffer,
  'destination/image.jpg',
  {
    contentType: 'image/jpeg',
  }
);
```

### Getting URLs

```typescript
import { getCdnUrl, getSignedUrl } from '../lib/gcp/storage';

// Get a CDN URL
const cdnUrl = getCdnUrl('images/logo.png');

// Get a signed URL (for private files)
const signedUrl = await getSignedUrl('private/document.pdf', {
  action: 'read',
  expires: 3600, // 1 hour
});
```

### Managing Files

```typescript
import { fileExists, deleteFile } from '../lib/gcp/storage';

// Check if a file exists
const exists = await fileExists('images/logo.png');

// Delete a file
await deleteFile('images/old-logo.png');
```

### Configuring CORS

```typescript
import { configureBucketCors } from '../lib/gcp/storage';

// Configure CORS for the bucket
await configureBucketCors(
  ['https://testero.ai', 'http://localhost:3000'],
  ['GET', 'HEAD', 'PUT', 'POST'],
  3600
);
```

## Environment Variables

The following environment variables are used by the GCP Cloud Storage utilities:

- `GCP_STORAGE_BUCKET_NAME`: The name of the GCP Storage bucket (default: 'testero-media')
- `GCP_CDN_URL`: The URL of the CDN endpoint (default: 'https://media.testero.ai')
- `GCP_KEY_FILE_PATH`: Path to the service account key file (optional)
- `USE_GCP_STORAGE`: Whether to use GCP Cloud Storage (default: false)

## Setup

Before using these utilities, make sure to:

1. Run the setup script to create and configure the GCP Cloud Storage bucket:
   ```bash
   npm run setup:gcp-storage
   ```

2. Set the appropriate environment variables in `.env.local`

## Related Documentation

For more detailed information, see:

- [GCP Cloud Storage with CDN Documentation](../../docs/gcp-cloud-storage-cdn.md)
- [Google Cloud Storage Documentation](https://cloud.google.com/storage/docs)
- [Cloud CDN Documentation](https://cloud.google.com/cdn/docs)
</file>

<file path="lib/seo/index.ts">
/**
 * SEO utilities for Testero
 * 
 * This module provides utilities for generating metadata, viewport configuration,
 * and JSON-LD structured data for better search engine visibility and social media sharing.
 * 
 * @module lib/seo
 */

export * from './seo';
</file>

<file path="lib/seo/README.md">
# Testero SEO Implementation

This directory contains the SEO implementation for the Testero website. It provides utilities for generating metadata, viewport configuration, and JSON-LD structured data for better search engine visibility and social media sharing.

## Features

- **Comprehensive Metadata**: Title, description, Open Graph, Twitter Cards, canonical URLs, etc.
- **Viewport Configuration**: Responsive design settings for different devices
- **JSON-LD Structured Data**: Organization, WebSite, WebPage, and SoftwareApplication schemas
- **Social Media Optimization**: Customized images for social sharing
- **Dynamic Sitemap Generation**: Automatically generates sitemap.xml based on pages
- **Customizable per Page**: Each page can have its own metadata and structured data

## Usage

### Basic Usage

In your layout or page file:

```tsx
import { generateMetadata, generateViewport } from "@/lib/seo";

// Generate default metadata
export const metadata = generateMetadata();

// Generate viewport configuration
export const viewport = generateViewport();
```

### Custom Metadata

To customize metadata for a specific page:

```tsx
import { generateMetadata } from "@/lib/seo";

// Generate custom metadata
export const metadata = generateMetadata({
  title: "Custom Page Title | Testero",
  description: "Custom page description for better SEO.",
  keywords: ["custom", "keywords", "here"],
  canonical: "/custom-page",
  noIndex: false, // Set to true to prevent indexing
});
```

### Viewport Configuration

For responsive design settings:

```tsx
import { generateViewport } from "@/lib/seo";

// Generate default viewport configuration
export const viewport = generateViewport();

// Or customize it directly
export const viewport = {
  width: "device-width",
  initialScale: 1,
  maximumScale: 2,
  userScalable: true,
};
```

### JSON-LD Structured Data

For adding structured data to a page:

```tsx
import { generateJsonLd } from "@/lib/seo";
import Script from "next/script";

// In your component
<Script
  id="json-ld"
  type="application/ld+json"
  dangerouslySetInnerHTML={{
    __html: generateJsonLd({
      // Custom structured data here
    })
  }}
/>
```

### Custom JSON-LD for Specific Pages

For pages with specific structured data needs:

```tsx
import { generateJsonLd } from "@/lib/seo";

// Generate custom JSON-LD
const jsonLd = generateJsonLd({
  "@graph": [
    {
      "@type": "FAQPage",
      "mainEntity": [
        {
          "@type": "Question",
          "name": "What is Testero?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "Testero is an AI-powered learning platform..."
          }
        }
      ]
    }
  ]
});
```

## Social Media Images

The project includes scripts to generate optimized images for social sharing:

- `og-image.jpg`: Open Graph image (1200x630)
- `twitter-image.jpg`: Twitter Card image (1200x630)
- `logo.png`: Logo image (512x512)

To regenerate these images:

```bash
npm run generate:social-images
```

## Sitemap Generation

The sitemap is automatically generated based on the pages in the `app` directory:

```bash
npm run generate:sitemap
```

This creates/updates `public/sitemap.xml` with all the pages in the application.

## Build Process

The SEO assets (sitemap and social images) are automatically generated during the build process through the `prebuild` script:

```bash
npm run build
```

## SEO Best Practices

1. **Page-Specific Metadata**: Each page should have unique, descriptive metadata
2. **Structured Data**: Use appropriate schema.org types for each page
3. **Canonical URLs**: Always specify canonical URLs to prevent duplicate content issues
4. **Social Media Optimization**: Ensure social sharing metadata and images are optimized
5. **Semantic HTML**: Use proper heading hierarchy and semantic HTML elements

## Files

- `lib/seo/seo.ts`: Core SEO utilities for metadata, viewport, and JSON-LD generation
- `lib/seo/index.ts`: Exports from the SEO module
- `lib/seo/README.md`: Documentation for the SEO implementation
- `app/metadata.ts`: Home page specific metadata configuration
- `app/page.metadata.tsx`: Home page metadata and JSON-LD exports
- `public/robots.txt`: Instructions for search engine crawlers
- `public/sitemap.xml`: XML sitemap for search engines
- `public/og-image.jpg`: Open Graph image for social sharing
- `public/twitter-image.jpg`: Twitter Card image for social sharing
- `public/logo.png`: Logo image for structured data
- `scripts/generate-sitemap.js`: Script to generate the sitemap
- `scripts/generate-social-images.js`: Script to generate social sharing images
</file>

<file path="lib/supabase/database.types.ts">
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  public: {
    Tables: {
      certification_sections: {
        Row: {
          certification_id: string | null
          created_at: string | null
          description: string | null
          id: string
          name: string
        }
        Insert: {
          certification_id?: string | null
          created_at?: string | null
          description?: string | null
          id?: string
          name: string
        }
        Update: {
          certification_id?: string | null
          created_at?: string | null
          description?: string | null
          id?: string
          name?: string
        }
        Relationships: [
          {
            foreignKeyName: "sections_certification_id_fkey"
            columns: ["certification_id"]
            isOneToOne: false
            referencedRelation: "certifications"
            referencedColumns: ["id"]
          },
        ]
      }
      certifications: {
        Row: {
          created_at: string | null
          id: string
          name: string
          provider: string | null
        }
        Insert: {
          created_at?: string | null
          id?: string
          name: string
          provider?: string | null
        }
        Update: {
          created_at?: string | null
          id?: string
          name?: string
          provider?: string | null
        }
        Relationships: []
      }
      options: {
        Row: {
          created_at: string | null
          explanation: string | null
          id: string
          is_correct: boolean | null
          option_text: string
          question_id: string | null
          updated_at: string | null
        }
        Insert: {
          created_at?: string | null
          explanation?: string | null
          id: string
          is_correct?: boolean | null
          option_text: string
          question_id?: string | null
          updated_at?: string | null
        }
        Update: {
          created_at?: string | null
          explanation?: string | null
          id?: string
          is_correct?: boolean | null
          option_text?: string
          question_id?: string | null
          updated_at?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "options_question_id_fkey"
            columns: ["question_id"]
            isOneToOne: false
            referencedRelation: "questions"
            referencedColumns: ["id"]
          },
        ]
      }
      question_responses: {
        Row: {
          created_at: string | null
          id: string
          is_correct: boolean | null
          practice_test_id: string | null
          question_id: string
          section_id: string | null
          user_answer: string | null
        }
        Insert: {
          created_at?: string | null
          id?: string
          is_correct?: boolean | null
          practice_test_id?: string | null
          question_id: string
          section_id?: string | null
          user_answer?: string | null
        }
        Update: {
          created_at?: string | null
          id?: string
          is_correct?: boolean | null
          practice_test_id?: string | null
          question_id?: string
          section_id?: string | null
          user_answer?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "question_responses_section_id_fkey"
            columns: ["section_id"]
            isOneToOne: false
            referencedRelation: "certification_sections"
            referencedColumns: ["id"]
          },
        ]
      }
      questions: {
        Row: {
          certification_id: string | null
          created_at: string | null
          generated_at: string | null
          id: string
          is_active: boolean | null
          question_text: string
          question_type: string
          section_id: string | null
          updated_at: string | null
        }
        Insert: {
          certification_id?: string | null
          created_at?: string | null
          generated_at?: string | null
          id: string
          is_active?: boolean | null
          question_text: string
          question_type: string
          section_id?: string | null
          updated_at?: string | null
        }
        Update: {
          certification_id?: string | null
          created_at?: string | null
          generated_at?: string | null
          id?: string
          is_active?: boolean | null
          question_text?: string
          question_type?: string
          section_id?: string | null
          updated_at?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "questions_certification_id_fkey"
            columns: ["certification_id"]
            isOneToOne: false
            referencedRelation: "certifications"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "questions_section_id_fkey"
            columns: ["section_id"]
            isOneToOne: false
            referencedRelation: "certification_sections"
            referencedColumns: ["id"]
          },
        ]
      }
      questions_archive: {
        Row: {
          answers: Json
          correct_answer_index: number
          created_at: string | null
          id: string
          question: string
          section: string
          updated_at: string | null
        }
        Insert: {
          answers: Json
          correct_answer_index: number
          created_at?: string | null
          id?: string
          question: string
          section: string
          updated_at?: string | null
        }
        Update: {
          answers?: Json
          correct_answer_index?: number
          created_at?: string | null
          id?: string
          question?: string
          section?: string
          updated_at?: string | null
        }
        Relationships: []
      }
      test_progress: {
        Row: {
          certification_id: string
          current_question_index: number
          id: string
          last_updated: string | null
          practice_test_id: string
          questions: Json
          user_answers: Json
          user_id: string
        }
        Insert: {
          certification_id: string
          current_question_index: number
          id?: string
          last_updated?: string | null
          practice_test_id: string
          questions: Json
          user_answers: Json
          user_id: string
        }
        Update: {
          certification_id?: string
          current_question_index?: number
          id?: string
          last_updated?: string | null
          practice_test_id?: string
          questions?: Json
          user_answers?: Json
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "test_progress_certification_id_fkey"
            columns: ["certification_id"]
            isOneToOne: false
            referencedRelation: "certifications"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "test_progress_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "user_statistics"
            referencedColumns: ["user_id"]
          },
        ]
      }
      tests: {
        Row: {
          certification_id: string | null
          completed_at: string | null
          created_at: string | null
          duration: number | null
          id: string
          is_active: boolean | null
          percentage: number | null
          score: number | null
          started_at: string | null
          time_taken: number | null
          total_questions: number | null
          updated_at: string | null
          user_id: string | null
        }
        Insert: {
          certification_id?: string | null
          completed_at?: string | null
          created_at?: string | null
          duration?: number | null
          id: string
          is_active?: boolean | null
          percentage?: number | null
          score?: number | null
          started_at?: string | null
          time_taken?: number | null
          total_questions?: number | null
          updated_at?: string | null
          user_id?: string | null
        }
        Update: {
          certification_id?: string | null
          completed_at?: string | null
          created_at?: string | null
          duration?: number | null
          id?: string
          is_active?: boolean | null
          percentage?: number | null
          score?: number | null
          started_at?: string | null
          time_taken?: number | null
          total_questions?: number | null
          updated_at?: string | null
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "tests_certification_id_fkey"
            columns: ["certification_id"]
            isOneToOne: false
            referencedRelation: "certifications"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "tests_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "user_statistics"
            referencedColumns: ["user_id"]
          },
        ]
      }
      user_answers: {
        Row: {
          answered_at: string | null
          created_at: string | null
          id: string
          is_correct: boolean | null
          question_id: string | null
          selected_option_id: string | null
          test_id: string | null
          user_id: string | null
        }
        Insert: {
          answered_at?: string | null
          created_at?: string | null
          id: string
          is_correct?: boolean | null
          question_id?: string | null
          selected_option_id?: string | null
          test_id?: string | null
          user_id?: string | null
        }
        Update: {
          answered_at?: string | null
          created_at?: string | null
          id?: string
          is_correct?: boolean | null
          question_id?: string | null
          selected_option_id?: string | null
          test_id?: string | null
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "user_answers_question_id_fkey"
            columns: ["question_id"]
            isOneToOne: false
            referencedRelation: "questions"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "user_answers_selected_option_id_fkey"
            columns: ["selected_option_id"]
            isOneToOne: false
            referencedRelation: "options"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "user_answers_test_id_fkey"
            columns: ["test_id"]
            isOneToOne: false
            referencedRelation: "tests"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "user_answers_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "user_statistics"
            referencedColumns: ["user_id"]
          },
        ]
      }
      user_certifications: {
        Row: {
          certification_id: string | null
          created_at: string
          current_status: string | null
          id: string
          user_id: string | null
        }
        Insert: {
          certification_id?: string | null
          created_at?: string
          current_status?: string | null
          id?: string
          user_id?: string | null
        }
        Update: {
          certification_id?: string | null
          created_at?: string
          current_status?: string | null
          id?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "user_certifications_certification_id_fkey"
            columns: ["certification_id"]
            isOneToOne: false
            referencedRelation: "certifications"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "user_certifications_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "user_statistics"
            referencedColumns: ["user_id"]
          },
        ]
      }
      user_question_practice: {
        Row: {
          certification_id: string | null
          created_at: string | null
          id: string
          is_correct: boolean | null
          practiced_at: string | null
          question_id: string | null
          selected_option_id: string | null
          user_id: string | null
        }
        Insert: {
          certification_id?: string | null
          created_at?: string | null
          id?: string
          is_correct?: boolean | null
          practiced_at?: string | null
          question_id?: string | null
          selected_option_id?: string | null
          user_id?: string | null
        }
        Update: {
          certification_id?: string | null
          created_at?: string | null
          id?: string
          is_correct?: boolean | null
          practiced_at?: string | null
          question_id?: string | null
          selected_option_id?: string | null
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "user_question_practice_certification_id_fkey"
            columns: ["certification_id"]
            isOneToOne: false
            referencedRelation: "certifications"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "user_question_practice_question_id_fkey"
            columns: ["question_id"]
            isOneToOne: false
            referencedRelation: "questions"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "user_question_practice_selected_option_id_fkey"
            columns: ["selected_option_id"]
            isOneToOne: false
            referencedRelation: "options"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "user_question_practice_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "user_statistics"
            referencedColumns: ["user_id"]
          },
        ]
      }
      user_question_progress: {
        Row: {
          question_id: string
          seen_at: string | null
          user_id: string
        }
        Insert: {
          question_id: string
          seen_at?: string | null
          user_id: string
        }
        Update: {
          question_id?: string
          seen_at?: string | null
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "user_question_progress_question_id_fkey"
            columns: ["question_id"]
            isOneToOne: false
            referencedRelation: "questions_archive"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "user_question_progress_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "user_statistics"
            referencedColumns: ["user_id"]
          },
        ]
      }
      waitlist: {
        Row: {
          created_at: string | null
          email: string
          exam_type: string | null
          id: string
        }
        Insert: {
          created_at?: string | null
          email: string
          exam_type?: string | null
          id?: string
        }
        Update: {
          created_at?: string | null
          email?: string
          exam_type?: string | null
          id?: string
        }
        Relationships: []
      }
    }
    Views: {
      user_statistics: {
        Row: {
          average_score: number | null
          certification_id: string | null
          score_over_time: Json | null
          total_questions_taken: number | null
          total_tests_taken: number | null
          user_id: string | null
        }
        Relationships: [
          {
            foreignKeyName: "user_certifications_certification_id_fkey"
            columns: ["certification_id"]
            isOneToOne: false
            referencedRelation: "certifications"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Functions: {
      gtrgm_compress: {
        Args: { "": unknown }
        Returns: unknown
      }
      gtrgm_decompress: {
        Args: { "": unknown }
        Returns: unknown
      }
      gtrgm_in: {
        Args: { "": unknown }
        Returns: unknown
      }
      gtrgm_options: {
        Args: { "": unknown }
        Returns: undefined
      }
      gtrgm_out: {
        Args: { "": unknown }
        Returns: unknown
      }
      set_limit: {
        Args: { "": number }
        Returns: number
      }
      show_limit: {
        Args: Record<PropertyKey, never>
        Returns: number
      }
      show_trgm: {
        Args: { "": string }
        Returns: string[]
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type DefaultSchema = Database[Extract<keyof Database, "public">]

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof (Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
        Database[DefaultSchemaTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? (Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
      Database[DefaultSchemaTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
        DefaultSchema["Views"])
    ? (DefaultSchema["Tables"] &
        DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema["Enums"]
    | { schema: keyof Database },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
    ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema["CompositeTypes"]
    | { schema: keyof Database },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
  ? Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
    ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never

export const Constants = {
  public: {
    Enums: {},
  },
} as const
</file>

<file path="public/1b9d6bcdbbfd4b2d9b5dab8dfbbd4bed.txt">
1b9d6bcdbbfd4b2d9b5dab8dfbbd4bed
</file>

<file path="public/image-urls.json">
{
  "ogImage": {
    "jpg": "https://media.testero.ai/images/og-image.jpg",
    "webp": "https://media.testero.ai/images/og-image.webp"
  },
  "twitterImage": {
    "jpg": "https://media.testero.ai/images/twitter-image.jpg",
    "webp": "https://media.testero.ai/images/twitter-image.webp"
  },
  "logo": {
    "png": "https://media.testero.ai/images/logo.png",
    "webp": "https://media.testero.ai/images/logo.webp"
  }
}
</file>

<file path="public/robots.txt">
# robots.txt for Testero.ai
User-agent: *
Allow: /

# Sitemap location
Sitemap: https://testero.ai/sitemap.xml
</file>

<file path="scripts/setup-gcp-storage.js">
#!/usr/bin/env node

/**
 * This script sets up a GCP Cloud Storage bucket with CDN and CORS configuration
 * for optimized image delivery.
 * 
 * Usage:
 *   node scripts/setup-gcp-storage.js
 * 
 * Environment variables:
 *   GCP_STORAGE_BUCKET_NAME - The name of the bucket to create (default: testero-media)
 *   GCP_PROJECT_ID - The GCP project ID
 *   GCP_KEY_FILE_PATH - Path to the service account key file (optional)
 */

// Load environment variables from .env.local
require('dotenv').config({ path: '.env.local' });

const { Storage } = require('@google-cloud/storage');
const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

// Configuration
const BUCKET_NAME = process.env.GCP_STORAGE_BUCKET_NAME || 'testero-media';
const PROJECT_ID = process.env.GCP_PROJECT_ID;
const KEY_FILE_PATH = process.env.GCP_KEY_FILE_PATH;

// Debug environment variables
console.log('Environment Variables:');
console.log('- GCP_STORAGE_BUCKET_NAME:', BUCKET_NAME);
console.log('- GCP_PROJECT_ID:', PROJECT_ID);
console.log('- GCP_KEY_FILE_PATH:', KEY_FILE_PATH ? 'Set' : 'Not set');

// Validate required environment variables
if (!PROJECT_ID) {
  console.error('Error: GCP_PROJECT_ID environment variable is required');
  process.exit(1);
}

// Initialize GCP Storage client
const storageOptions = KEY_FILE_PATH ? { keyFilename: KEY_FILE_PATH } : {};
const storage = new Storage(storageOptions);

/**
 * Create a GCP Cloud Storage bucket if it doesn't exist
 */
async function createBucket() {
  try {
    console.log(`Checking if bucket "${BUCKET_NAME}" exists...`);
    
    // Check if bucket exists
    const [exists] = await storage.bucket(BUCKET_NAME).exists();
    
    if (exists) {
      console.log(`Bucket "${BUCKET_NAME}" already exists.`);
      return;
    }
    
    // Create the bucket
    console.log(`Creating bucket "${BUCKET_NAME}"...`);
    
    const [bucket] = await storage.createBucket(BUCKET_NAME, {
      location: 'us-central1',
      storageClass: 'STANDARD',
      // Enable uniform bucket-level access
      iamConfiguration: {
        uniformBucketLevelAccess: {
          enabled: true,
        },
      },
    });
    
    console.log(`Bucket "${BUCKET_NAME}" created successfully.`);
    
    // Make the bucket public
    await makePublic();
  } catch (error) {
    console.error('Error creating bucket:', error);
    process.exit(1);
  }
}

/**
 * Make the bucket publicly accessible
 */
async function makePublic() {
  try {
    console.log(`Making bucket "${BUCKET_NAME}" publicly accessible...`);
    
    // Get the bucket
    const bucket = storage.bucket(BUCKET_NAME);
    
    // Make the bucket public by updating the IAM policy
    const [policy] = await bucket.iam.getPolicy({ requestedPolicyVersion: 3 });
    
    // Set policy version
    policy.version = 3;
    
    // Add the allUsers member to the policy with objectViewer role
    const bindings = policy.bindings || [];
    const objectViewerBinding = bindings.find(binding => binding.role === 'roles/storage.objectViewer');
    
    if (objectViewerBinding) {
      if (!objectViewerBinding.members.includes('allUsers')) {
        objectViewerBinding.members.push('allUsers');
      }
    } else {
      bindings.push({
        role: 'roles/storage.objectViewer',
        members: ['allUsers']
      });
    }
    
    policy.bindings = bindings;
    
    // Set the updated policy
    await bucket.iam.setPolicy(policy);
    
    // Alternative method: Set public access at the object level when uploading
    console.log(`Bucket "${BUCKET_NAME}" is now publicly accessible.`);
  } catch (error) {
    console.error('Error making bucket public:', error);
    console.log('Note: You may need to manually set the bucket to be publicly accessible in the GCP Console.');
    console.log('Go to https://console.cloud.google.com/storage/browser and select your bucket.');
    console.log('Then click on "Permissions" and add "allUsers" with the "Storage Object Viewer" role.');
  }
}

/**
 * Configure CORS for the bucket
 */
async function configureCors() {
  try {
    console.log(`Configuring CORS for bucket "${BUCKET_NAME}"...`);
    
    // Set CORS configuration
    await storage.bucket(BUCKET_NAME).setCorsConfiguration([
      {
        origin: ['*'],
        method: ['GET', 'HEAD', 'PUT', 'POST', 'DELETE'],
        responseHeader: ['Content-Type', 'x-goog-meta-*', 'Content-Disposition'],
        maxAgeSeconds: 3600,
      },
    ]);
    
    console.log(`CORS configured for bucket "${BUCKET_NAME}".`);
  } catch (error) {
    console.error('Error configuring CORS:', error);
    process.exit(1);
  }
}

/**
 * Configure lifecycle policy for the bucket
 */
async function configureLifecycle() {
  try {
    console.log(`Configuring lifecycle policy for bucket "${BUCKET_NAME}"...`);
    
    // Get the bucket
    const bucket = storage.bucket(BUCKET_NAME);
    
    // Set lifecycle configuration using the correct method
    const rules = [
      {
        action: {
          type: 'Delete',
        },
        condition: {
          age: 365, // Delete objects older than 1 year
          isLive: true,
          matchesStorageClass: ['STANDARD'],
        },
      },
      {
        action: {
          type: 'SetStorageClass',
          storageClass: 'NEARLINE',
        },
        condition: {
          age: 30, // Move to Nearline after 30 days
          matchesStorageClass: ['STANDARD'],
        },
      },
    ];
    
    // Use the setMetadata method to set lifecycle rules
    await bucket.setMetadata({
      lifecycle: {
        rule: rules,
      },
    });
    
    console.log(`Lifecycle policy configured for bucket "${BUCKET_NAME}".`);
  } catch (error) {
    console.error('Error configuring lifecycle policy:', error);
    console.log('Note: You may need to manually configure lifecycle policies in the GCP Console.');
    console.log('Go to https://console.cloud.google.com/storage/browser and select your bucket.');
    console.log('Then click on "Lifecycle" and add the rules manually.');
  }
}

/**
 * Enable Cloud CDN for the bucket
 */
async function enableCdn() {
  try {
    console.log(`Enabling Cloud CDN for bucket "${BUCKET_NAME}"...`);
    
    // Check if gcloud command is available
    try {
      await execAsync('gcloud --version', { timeout: 5000 });
    } catch (error) {
      console.error('Error: gcloud command not found or not responding.');
      console.log('You need to install and configure the Google Cloud SDK (gcloud) to enable CDN.');
      console.log('See: https://cloud.google.com/sdk/docs/install');
      console.log('Skipping CDN setup...');
      return;
    }
    
    // Create a backend bucket
    const backendBucketName = `${BUCKET_NAME}-backend`;
    
    // Check if backend bucket exists with a timeout
    try {
      const { stdout } = await execAsync(
        `gcloud compute backend-buckets describe ${backendBucketName} --project=${PROJECT_ID} --format=json`,
        { timeout: 30000 } // 30 seconds timeout
      );
      console.log(`Backend bucket "${backendBucketName}" already exists.`);
    } catch (error) {
      // Check if it's a timeout error
      if (error.killed && error.signal === 'SIGTERM') {
        console.error('Error: gcloud command timed out. The command may be taking too long to execute.');
        console.log('You can try running the command manually:');
        console.log(`gcloud compute backend-buckets describe ${backendBucketName} --project=${PROJECT_ID} --format=json`);
        console.log('Skipping CDN setup...');
        return;
      }
      
      // If the error is because the backend bucket doesn't exist, create it
      if (error.stderr && error.stderr.includes('not found')) {
        console.log(`Creating backend bucket "${backendBucketName}"...`);
        try {
          await execAsync(
            `gcloud compute backend-buckets create ${backendBucketName} --gcs-bucket-name=${BUCKET_NAME} --enable-cdn --project=${PROJECT_ID}`,
            { timeout: 60000 } // 60 seconds timeout
          );
          console.log(`Backend bucket "${backendBucketName}" created with CDN enabled.`);
        } catch (createError) {
          // Check if it's a timeout error
          if (createError.killed && createError.signal === 'SIGTERM') {
            console.error('Error: gcloud command timed out while creating backend bucket.');
            console.log('You can try running the command manually:');
            console.log(`gcloud compute backend-buckets create ${backendBucketName} --gcs-bucket-name=${BUCKET_NAME} --enable-cdn --project=${PROJECT_ID}`);
          } else {
            console.error('Error creating backend bucket:', createError.message || createError);
          }
          console.log('Skipping CDN setup...');
          return;
        }
      } else {
        console.error('Error checking if backend bucket exists:', error.message || error);
        console.log('Skipping CDN setup...');
        return;
      }
    }
    
    console.log(`Cloud CDN enabled for bucket "${BUCKET_NAME}".`);
    console.log(`Note: To use a custom domain, you'll need to create a URL map and set up SSL certificates.`);
  } catch (error) {
    console.error('Error enabling Cloud CDN:', error.message || error);
    console.log('Note: You may need to install and configure the Google Cloud SDK (gcloud) to enable CDN.');
    console.log('See: https://cloud.google.com/sdk/docs/install');
    console.log('Skipping CDN setup...');
  }
}

/**
 * Main function to run the script
 */
async function main() {
  console.log('Setting up GCP Cloud Storage bucket with CDN...');
  console.log(`Bucket Name: ${BUCKET_NAME}`);
  console.log(`Project ID: ${PROJECT_ID}`);
  
  // Create the bucket
  await createBucket();
  
  // Configure CORS
  await configureCors();
  
  // Configure lifecycle policy
  await configureLifecycle();
  
  // Enable Cloud CDN
  await enableCdn();
  
  console.log('\nSetup complete!');
  console.log(`Your bucket is available at: https://storage.googleapis.com/${BUCKET_NAME}/`);
  console.log('To use a custom domain with CDN, follow these steps:');
  console.log('1. Create a URL map pointing to your backend bucket');
  console.log('2. Set up an SSL certificate for your domain');
  console.log('3. Create a target HTTPS proxy with the certificate');
  console.log('4. Create a forwarding rule to direct traffic to the proxy');
  console.log('5. Update your DNS to point to the forwarding rule IP');
  console.log('\nFor more information, see: https://cloud.google.com/cdn/docs/setting-up-cdn-with-bucket');
}

// Run the script
main().catch(console.error);
</file>

<file path="scripts/troubleshoot-artifact-registry.sh">
#!/bin/bash
# Script to troubleshoot Artifact Registry issues

# Exit on error
set -e

# Configuration - modify these variables as needed
PROJECT_ID=$(gcloud config get-value project)
REPOSITORY_NAME="testero"
REGION="us-central1"
SERVICE_ACCOUNT_NAME="github-actions-deployer"

echo "=== Artifact Registry Troubleshooting ==="
echo "Project ID: $PROJECT_ID"
echo "Repository Name: $REPOSITORY_NAME"
echo "Region: $REGION"
echo "Service Account: $SERVICE_ACCOUNT_NAME@$PROJECT_ID.iam.gserviceaccount.com"
echo ""

# Step 1: Check if the Artifact Registry API is enabled
echo "Step 1: Checking if Artifact Registry API is enabled..."
if gcloud services list --enabled | grep -q artifactregistry.googleapis.com; then
  echo "✅ Artifact Registry API is enabled"
else
  echo "❌ Artifact Registry API is NOT enabled"
  echo "Enabling Artifact Registry API..."
  gcloud services enable artifactregistry.googleapis.com
  echo "✅ Artifact Registry API has been enabled"
fi
echo ""

# Step 2: Check if the repository exists
echo "Step 2: Checking if repository exists..."
if gcloud artifacts repositories describe $REPOSITORY_NAME --location=$REGION &>/dev/null; then
  echo "✅ Repository '$REPOSITORY_NAME' exists in region '$REGION'"
  
  # Get repository details
  echo "Repository details:"
  gcloud artifacts repositories describe $REPOSITORY_NAME --location=$REGION
else
  echo "❌ Repository '$REPOSITORY_NAME' does NOT exist in region '$REGION'"
  echo "Would you like to create it? (y/n)"
  read -r create_repo
  if [[ "$create_repo" == "y" ]]; then
    echo "Creating Docker repository: $REPOSITORY_NAME in $REGION"
    gcloud artifacts repositories create $REPOSITORY_NAME \
      --repository-format=docker \
      --location=$REGION \
      --description="Docker repository for Testero frontend images"
    
    # Note: Lifecycle policies are not set up automatically
    # They need to be configured manually in the GCP Console
    echo "Note: Please set up lifecycle policies manually in the GCP Console"
    
    echo "✅ Repository created: $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_NAME"
  fi
fi
echo ""

# Step 3: Check service account permissions
echo "Step 3: Checking service account permissions..."
SERVICE_ACCOUNT_EMAIL="$SERVICE_ACCOUNT_NAME@$PROJECT_ID.iam.gserviceaccount.com"

# Check if the service account exists
if gcloud iam service-accounts describe "$SERVICE_ACCOUNT_EMAIL" &>/dev/null; then
  echo "✅ Service account '$SERVICE_ACCOUNT_EMAIL' exists"
  
  # Check if the service account has the necessary roles
  echo "Checking IAM roles..."
  
  # Get the IAM policy
  IAM_POLICY=$(gcloud projects get-iam-policy $PROJECT_ID --format=json)
  
  # Check for Artifact Registry Admin role
  if echo "$IAM_POLICY" | grep -q "serviceAccount:$SERVICE_ACCOUNT_EMAIL" && echo "$IAM_POLICY" | grep -q "roles/artifactregistry.admin"; then
    echo "✅ Service account has 'artifactregistry.admin' role"
  else
    echo "❌ Service account does NOT have 'artifactregistry.admin' role"
    echo "Adding 'artifactregistry.admin' role..."
    gcloud projects add-iam-policy-binding $PROJECT_ID \
      --member="serviceAccount:$SERVICE_ACCOUNT_EMAIL" \
      --role="roles/artifactregistry.admin" \
      --quiet
    echo "✅ Role 'artifactregistry.admin' added to service account"
  fi
  
  # Check for Cloud Run Admin role
  if echo "$IAM_POLICY" | grep -q "serviceAccount:$SERVICE_ACCOUNT_EMAIL" && echo "$IAM_POLICY" | grep -q "roles/run.admin"; then
    echo "✅ Service account has 'run.admin' role"
  else
    echo "❌ Service account does NOT have 'run.admin' role"
    echo "Adding 'run.admin' role..."
    gcloud projects add-iam-policy-binding $PROJECT_ID \
      --member="serviceAccount:$SERVICE_ACCOUNT_EMAIL" \
      --role="roles/run.admin" \
      --quiet
    echo "✅ Role 'run.admin' added to service account"
  fi
  
  # Check for Service Account User role
  if echo "$IAM_POLICY" | grep -q "serviceAccount:$SERVICE_ACCOUNT_EMAIL" && echo "$IAM_POLICY" | grep -q "roles/iam.serviceAccountUser"; then
    echo "✅ Service account has 'iam.serviceAccountUser' role"
  else
    echo "❌ Service account does NOT have 'iam.serviceAccountUser' role"
    echo "Adding 'iam.serviceAccountUser' role..."
    gcloud projects add-iam-policy-binding $PROJECT_ID \
      --member="serviceAccount:$SERVICE_ACCOUNT_EMAIL" \
      --role="roles/iam.serviceAccountUser" \
      --quiet
    echo "✅ Role 'iam.serviceAccountUser' added to service account"
  fi
else
  echo "❌ Service account '$SERVICE_ACCOUNT_EMAIL' does NOT exist"
  echo "Would you like to create it? (y/n)"
  read -r create_sa
  if [[ "$create_sa" == "y" ]]; then
    echo "Creating service account: $SERVICE_ACCOUNT_NAME"
    gcloud iam service-accounts create $SERVICE_ACCOUNT_NAME \
      --display-name="GitHub Actions Deployment Service Account" \
      --description="Service account for GitHub Actions to deploy to Cloud Run"
    
    echo "Waiting for service account to be fully propagated (10 seconds)..."
    sleep 10
    
    echo "Adding required roles..."
    gcloud projects add-iam-policy-binding $PROJECT_ID \
      --member="serviceAccount:$SERVICE_ACCOUNT_EMAIL" \
      --role="roles/artifactregistry.admin" \
      --quiet
    
    gcloud projects add-iam-policy-binding $PROJECT_ID \
      --member="serviceAccount:$SERVICE_ACCOUNT_EMAIL" \
      --role="roles/run.admin" \
      --quiet
    
    gcloud projects add-iam-policy-binding $PROJECT_ID \
      --member="serviceAccount:$SERVICE_ACCOUNT_EMAIL" \
      --role="roles/iam.serviceAccountUser" \
      --quiet
    
    echo "✅ Service account created with required roles"
    
    echo "Would you like to create a new key for this service account? (y/n)"
    read -r create_key
    if [[ "$create_key" == "y" ]]; then
      KEY_FILE_PATH="github-actions-key.json"
      gcloud iam service-accounts keys create $KEY_FILE_PATH \
        --iam-account="$SERVICE_ACCOUNT_EMAIL"
      echo "✅ Key file created: $KEY_FILE_PATH"
      echo "IMPORTANT: Add this key to your GitHub secrets as GCP_SA_KEY"
    fi
  fi
fi
echo ""

# Step 4: Test Docker authentication
echo "Step 4: Testing Docker authentication with Artifact Registry..."
echo "Configuring Docker for Artifact Registry..."
gcloud auth configure-docker $REGION-docker.pkg.dev

echo "Would you like to test a Docker build and push? (y/n)"
read -r test_docker
if [[ "$test_docker" == "y" ]]; then
  # Create a simple test image
  echo "Creating a simple test image..."
  mkdir -p test-docker
  cat > test-docker/Dockerfile << EOF
FROM alpine:latest
CMD ["echo", "Hello, Artifact Registry!"]
EOF
  
  # Build and push the test image
  echo "Building test image..."
  docker build --load -t $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_NAME/test:latest test-docker/
  
  echo "Pushing test image to Artifact Registry..."
  docker push $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_NAME/test:latest
  
  # Clean up
  echo "Cleaning up..."
  rm -rf test-docker
  
  echo "✅ Test image successfully pushed to Artifact Registry"
fi
echo ""

# Step 5: Check GitHub Actions secrets
echo "Step 5: GitHub Actions secrets check"
echo "Please verify that the following GitHub secrets are set correctly:"
echo "- GCP_PROJECT_ID: $PROJECT_ID"
echo "- GCP_REGION: $REGION"
echo "- ARTIFACT_REPOSITORY: $REPOSITORY_NAME"
echo "- SERVICE_NAME: testero-frontend (or your service name)"
echo "- GCP_SA_KEY: [The JSON key file content]"
echo ""

echo "=== Troubleshooting Complete ==="
echo "If all checks passed and you've verified the GitHub secrets, the deployment should work."
echo "If you created a new repository or service account, make sure to update the GitHub secrets accordingly."
</file>

<file path=".dockerignore">
# Dependencies
node_modules
npm-debug.log
yarn-debug.log
yarn-error.log

# Next.js build output
.next
out

# Version control
.git
.gitignore

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE files
.idea
.vscode
*.swp
*.swo

# OS files
.DS_Store
Thumbs.db

# Debug logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Testing
coverage
.nyc_output

# Build files
dist
build

# Misc
README.md
LICENSE
*.md
</file>

<file path=".eslintrc.json">
{
  "extends": "next/core-web-vitals"
}
</file>

<file path="cloudbuild.yaml">
steps:
  # Build the container image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/testero/frontend:$COMMIT_SHA', '.']

  # Push the container image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/testero/frontend:$COMMIT_SHA']

  # Deploy container image to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'testero-frontend'
      - '--image=us-central1-docker.pkg.dev/$PROJECT_ID/testero/frontend:$COMMIT_SHA'
      - '--region=us-central1'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--memory=1Gi'
      - '--cpu=1'
      - '--min-instances=0'
      - '--max-instances=10'
      - '--port=3000'
      - '--set-env-vars=NODE_ENV=production'

# Store images in Google Artifact Registry
images:
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/testero/frontend:$COMMIT_SHA'

# Set timeout to 30 minutes
timeout: 1800s
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path=".clinerules/linear-rules.md">
This rule provides comprehensive guidance on using Linear effectively, adhering to the core principles and practices of the "Linear Method" to enhance productivity, maintain focus, and create momentum when managing software projects. Use this when discussing Linear tasks, planning cycles, structuring initiatives, or reviewing project progress.


### Core Principles

1. **Build for the Creators:** 
   - Prioritize keeping individual contributors (engineers, designers) productive
   - Focus on reducing friction for those doing the actual work
   - Design workflows that enhance creativity and flow, not interrupt it
   - Remember that reports and process tracking should serve the makers, not the other way around

2. **Purpose-Built Product Management:**
   - Recognize Linear's opinionated approach to project management
   - Embrace its specialized workflows rather than forcing traditional methodologies onto it
   - Understand Linear's vocabulary: Issues over Stories, Projects for features, Initiatives for epics/roadmap items
   - Accept that some traditional concepts are deliberately renamed or reimagined

3. **Create Momentum, Don't Sprint:**
   - Establish a sustainable cadence through fixed-length Cycles (typically 2-week)
   - Focus on steady, continuous progress rather than bursts of activity
   - Allow unfinished items to naturally roll over to the next cycle
   - Don't overload cycles with unrealistic expectations
   - Take swift action instead of getting caught in analysis paralysis
   - Generate momentum by focusing on progress each day (do it today, not tomorrow)

4. **Meaningful Direction:**
   - Connect daily work to larger strategic goals
   - Ensure Issues link to Projects, and Projects align with Initiatives
   - Keep the big picture visible while working on individual tasks
   - Have clear, compelling targets that give meaning to the daily work
   - Reference the project or initiative an issue belongs to in discussions

5. **Aim for Clarity:**
   - Use simple, direct language in all communications
   - Avoid inventing specialized terminology - use standard terms where possible
   - Write clear, concise issue titles that state exactly what needs to be done
   - Make descriptions optional but useful when included
   - Prefer concrete, specific tasks over ambiguous requests

6. **Say No to Busy Work:**
   - Eliminate or automate "work about work" wherever possible
   - Focus on tasks that deliver actual value
   - Don't create processes that require people to manage tools rather than produce work 
   - Question any ritual that feels like a burden without clear value
   - Automate repetitive tasks with Linear's native features

7. **Simple First, Then Powerful:**
   - Start with basic Linear features before adding complexity
   - Introduce advanced features (custom Views, Roadmaps, Initiatives) only as team scale requires them
   - Allow your Linear usage to evolve organically with your team's needs
   - Keep configurations minimal until proven necessary
   - Onboard new team members with the simplest possible workflow

8. **Decide and Move On:**
   - Prioritize forward progress over perfect decisions
   - Make choices and course-correct later if needed
   - Don't get stuck in decision paralysis for minor issues
   - Trust your intuition when data is incomplete
   - Accept that sometimes quick action with partial information beats thorough analysis that delays progress

### Key Practices

1. **Strategic Planning**
   - Set ambitious, meaningful product initiatives as high-level direction
   - Define clear goals that provide the 'why' behind your projects
   - Reserve capacity for unplanned work in your roadmap (typically 20%)
   - Prioritize enablers and blockers that unlock future work
   - Scope projects down to manageable sizes for execution

2. **Issue Management**
   - **Write Issues Not User Stories:**
     - Create direct, clear issues that describe concrete tasks in plain language
     - Skip the "As a user, I want to..." format in favor of descriptive task titles
     - Focus on the work to be done rather than the user motivation
     - Include context directly in the issue description when necessary
     - Trust that team members understand the product and user needs at a holistic level

   - **Issue Creation Best Practices:**
     - Write your own issues - the person doing the work should define it
     - Describe concrete tasks with clear, defined outcomes
     - Write clear, direct titles that explain what needs to be done
     - Make descriptions optional, including only relevant context
     - Quote user feedback directly rather than summarizing
     - Link to deeper discussions or specifications when available

3. **Workflow Optimization**
   - **Work in Cycles:**
     - Plan work in fixed-length cycles (typically 2 weeks)
     - Keep cycles reasonably loaded, not overcommitted
     - Let unfinished work roll over automatically
     - Review progress at cycle completion
     - Avoid changing plans mid-cycle unless critical

   - **Backlog Maintenance:**
     - Keep the backlog lean and focused
     - Regularly triage and archive/close unlikely issues
     - Don't preserve every feature request indefinitely
     - Trust that important issues will resurface if needed
     - Prioritize ruthlessly during cycle planning

   - **Quality Balance:**
     - Mix feature development with quality improvement
     - Include bugs and technical debt in each cycle
     - Invest in tooling as a force multiplier
     - Recognize that all software has bugs, more than you can ever fix
     - Be strategic about which quality issues to address

4. **Project Structure**
   - **Ownership and Accountability:**
     - Assign a clear owner for every project and issue
     - Make single individuals responsible for delivery
     - Ensure the project owner writes the brief and guides execution
     - Maintain accountability even with collaborative work
     - Provide owners the authority to make decisions

   - **Specs and Documentation:**
     - Write brief project specifications that communicate the why, what, and how
     - Aim for brevity - shorter specs are more likely to be read
     - Focus on communicating essential information
     - Use specs to clarify scope and priorities
     - Keep documentation lean but sufficient

5. **Building and Shipping**
   - **Generate Momentum:**
     - Take swift action rather than excessive discussion
     - Decide to do something or not do it, then execute immediately
     - Ship regularly to maintain rhythm and motivation
     - Trust intuition when direction isn't completely clear
     - Correct course as you go rather than waiting for perfect information

   - **User-Centered Development:**
     - Collect and organize user feedback systematically
     - Use feedback as a research library for new features
     - Attach user requests to relevant issues
     - Look for trends in feedback
     - Build with actual user needs in mind

   - **Breaking Down Work:**
     - Scope issues to be as small as possible
     - Create tasks that can be completed in hours or days, not weeks
     - Look for visible progress markers
     - Measure progress with actual work (code, design files, etc.)
     - Avoid massive pull requests or large design changes

   - **Collaborative Approach:**
     - Run cross-functional teams with designers and engineers
     - Allow natural push and pull between disciplines
     - Recognize that the best creators often have hybrid skills
     - Foster collaboration rather than handoffs
     - Build in public with regular updates and sharing

### Linear's Key Concepts

1. **Workspace Structure**
   - **Workspace:** The container for all issues, teams, and concepts for an organization
   - **Teams:** Groups of people who work together, or parts of a product, containing issues
   - **Issues:** Tasks representing work to be done, belonging to a team
   - **Projects:** Groups of issues toward a specific deliverable, like launching a feature
   - **Initiatives:** Organization of projects showcasing company-wide goals
   - **Cycles:** Time-boxed periods (similar to sprints) for completing defined work

2. **Issue Properties**
   - **Priority:** Urgency level (No priority, Urgent, High, Normal, Low)
   - **Status:** Current state within workflow (Backlog, Todo, In Progress, Done, etc.)
   - **Labels:** Tags for categorizing issues (Bug, Improvement, Feature, etc.)
   - **Estimate:** Complexity or effort assessment
   - **Due Date:** Deadline for completion
   - **Assignee:** Person responsible for the issue

3. **Views and Navigation**
   - **My Issues:** Curated set showing assigned, created, and subscribed issues
   - **Inbox:** Notifications and updates requiring attention
   - **Project Views:** Dynamic filters showing projects by status
   - **Cycle Views:** Current and upcoming time-bounded work periods
   - **Custom Views:** Personalized filters for specific workflows

### Common Anti-Patterns to Avoid

1. **Over-Ritualization:**
   - Creating complex processes that add more work than value
   - Forcing traditional methodologies onto Linear when they don't fit
   - Adhering to ceremonies without questioning their purpose
   - Treating Linear as a tool for managers rather than for makers

2. **Losing the User Perspective:**
   - Focusing so much on tasks that you lose sight of user needs
   - Failing to connect tasks to broader product goals
   - Not considering how features interact in the overall product experience
   - Building features without understanding their purpose in the user journey

3. **Overloading and Overcommitting:**
   - Packing cycles with more work than can realistically be completed
   - Creating a massive backlog that becomes impossible to manage
   - Setting unrealistic deadlines that lead to burnout
   - Not allowing space for unexpected work or discoveries

4. **Documentation Extremes:**
   - Either documenting excessively or not documenting at all
   - Writing overly detailed specifications that no one reads
   - Creating tasks without sufficient context for execution
   - Failing to capture the reasoning behind decisions

5. **Process Over Progress:**
   - Allowing process to become more important than forward movement
   - Getting stuck in planning loops instead of building
   - Spending more time managing Linear than creating valuable work
   - Focusing on perfect tracking rather than meaningful results

### Advanced Tips

1. **Keyboard Shortcuts:**
   - Learn essential shortcuts for common actions (C for create issue, Cmd/Ctrl+K for command menu)
   - Use navigation shortcuts (G+I for Inbox, G+V for cycle, G+B for backlog)
   - Master bulk actions with selection shortcuts (x to select, Shift+Up/Down for multiple)
   - Use Esc to go back or clear selections
   - Access the full shortcut reference with ? key

2. **Automation and Integration:**
   - Connect Linear with your development tools (GitHub, GitLab)
   - Set up automatic status changes based on code events
   - Integrate with communication tools like Slack
   - Use webhooks or the API for custom automations
   - Configure cycle automations to streamline work management

3. **Customization and Scaling:**
   - Adjust team workflows as your organization grows
   - Create custom views for different roles and responsibilities
   - Develop team-specific label systems for better categorization
   - Consider using sub-teams for large organizations
   - Balance standardization with team-specific needs

4. **Long-term Planning:**
   - Use Initiatives for strategic, multi-quarter planning
   - Group related projects under common objectives
   - Set milestones within projects for incremental progress
   - Create a roadmap for communicating direction to stakeholders
   - Balance long-term vision with short-term execution
</file>

<file path="app/api/question/current/route.ts">
import { NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase/client';

export async function GET() {
  // Fetch the first available question (no is_active filter)
  const { data: question, error: questionError } = await supabase
    .from('questions')
    .select('*')
    .order('id', { ascending: false })
    .limit(1)
    .single();

  if (questionError || !question) {
    return NextResponse.json({ error: 'No question found or database error.' }, { status: 404 });
  }

  // Fetch options for the question
  const { data: options, error: optionsError } = await supabase
    .from('options')
    .select('id, label, text')
    .eq('question_id', question.id);

  if (optionsError) {
    return NextResponse.json({ error: 'Error fetching options.' }, { status: 500 });
  }

  // Shape the response
  return NextResponse.json({
    id: question.id,
    question_text: question.stem,
    options: options || [],
  });
}
</file>

<file path="app/api/question/submit/route.ts">
import { NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase/client';

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { questionId, selectedOptionKey } = body;

    if (!questionId || !selectedOptionKey) {
      return NextResponse.json({ error: 'Missing questionId or selectedOptionKey.' }, { status: 400 });
    }

    // Fetch options for the question
    const { data: options, error: optionsError } = await supabase
      .from('options')
      .select('id, label, is_correct')
      .eq('question_id', questionId);

    if (optionsError || !options || options.length === 0) {
      return NextResponse.json({ error: 'No options found for this question.' }, { status: 404 });
    }

    // Find the correct option
    const correctOption = options.find(opt => opt.is_correct);
    if (!correctOption) {
      return NextResponse.json({ error: 'No correct option found for this question.' }, { status: 500 });
    }

    // Compare selectedOptionKey with correct option's label
    const isCorrect = selectedOptionKey === correctOption.label;

    // Fetch explanation (if available)
    const { data: explanationRow } = await supabase
      .from('explanations')
      .select('text')
      .eq('question_id', questionId)
      .single();
    const explanationText = explanationRow?.text || '';

    return NextResponse.json({
      isCorrect,
      correctOptionKey: correctOption.label,
      explanationText,
    });
  } catch {
    return NextResponse.json({ error: 'Invalid request or server error.' }, { status: 500 });
  }
}
</file>

<file path="app/content/hub/the-2025-google-cloud-digital-leader-certification-roadmap.md">
---
title: "The 2025 Google Cloud Digital Leader Certification Roadmap"
description: "A guide to the Google Cloud Digital Leader certification, covering its value, exam details, study plan, and career impact for business and technical professionals."
date: "2025-05-04"
author: "Testero Team"
tags: ["Google Cloud", "Certification", "Cloud Digital Leader", "Business Strategy", "Cloud Computing"]
coverImage: "/images/cloud-digital-leader.jpg"
---

# The 2025 Google Cloud Digital Leader Certification Roadmap

Ever felt like you're drowning in a sea of cloud certifications, wondering which one might actually propel your career forward?

In today's cloud-saturated business landscape, the Google Cloud Digital Leader certification shines like a lighthouse for professionals navigating the choppy waters between technical know-how and business strategy. This certification isn't just another technical badge—it's your golden ticket to demonstrate cloud literacy and strategic understanding without getting lost in the weeds of technical implementation.

## Why the Digital Leader Cert Is Worth Your Time

### Career-Boosting Market Demand

What if a single certification could boost your salary by tens of thousands of dollars while opening doors to leadership roles?

The value of cloud skills is skyrocketing in 2025, with Google Cloud certifications now sitting pretty among the highest-paying IT credentials around. The numbers tell a compelling story—Google Cloud-certified professionals are cashing bigger paychecks than their non-certified peers, with Digital Leader certification holders enjoying particularly sweet compensation packages.

Just how sweet? The average Google Cloud Digital Leader certified professional pulls in around $120,000 yearly, though your mileage may vary based on experience, location, and additional certifications. In hot markets, these pros can command up to $150,000 annually when they skillfully bridge the business-technical divide.

The beauty of this certification? It plays well with others.

Since it's not tied to any specific job role, it brings versatility across different positions, typically landing holders in the $90,000 to $120,000 salary band depending on experience and other certifications in their portfolio.

Beyond just fatter paychecks, more than 1 in 4 Google Cloud certified folks report leveling up with greater responsibility or leadership roles after certification. This isn't just a paper credential—it's a career catapult.

### The Perfect Entry Point

Ever wondered which cloud certification makes sense when you're not neck-deep in code but still need cloud credibility?

Unlike Google's technical certifications that dive into implementation minutiae and hands-on wizardry, the Digital Leader certification serves up the perfect foundation for:

- **Business professionals** who need to speak tech without becoming engineers
- **Project managers** steering cloud initiatives through organizational waters
- **Decision-makers** weighing cloud adoption without getting lost in technical jargon
- **Technical professionals** hungry to add business savvy to their toolkit
- **Recent graduates** looking to plant their flag in the cloud landscape

This certification doesn't expect you to configure load balancers or debug deployment scripts. Instead, it validates your ability to translate Google Cloud's core services into business solutions, spot perfect-fit use cases, and articulate the strategic gold that cloud adoption delivers—all without requiring you to be a technical guru.

### Bridge Between Business and Technology

How many times have you witnessed the painful disconnect between tech teams speaking in acronyms and business leaders focused on bottom lines?

This certification builds the bridge across that notorious gap. While Google's Professional Cloud Architect or Data Engineer certs plunge into technical rabbit holes, the Digital Leader focuses on the translation skills that turn tech-speak into business outcomes:

- Turning cryptic technical capabilities into crystal-clear business value
- Cracking the code of cloud economics and cost optimization
- Picking the right cloud tools for specific business challenges
- Selling cloud benefits to stakeholders in language they actually understand

This isn't just another certification—it's the Rosetta Stone for professionals working at the crossroads of technology decisions and business strategy.

In today's tech-saturated business world, being bilingual in tech and business isn't just nice to have—it's career currency that appreciates daily.

## Exam Overview & Key Logistics

### Exam Format and Structure

Wondering what you'll face when exam day arrives?

The Google Cloud Digital Leader certification exam pulls no punches in testing your cloud fundamentals and Google Cloud knowledge. You'll tackle 60 multiple-choice questions in a 2-hour mental marathon. The magic number to pass? A 70% score or better.

The price tag sits at $125—an investment in your career future. Pearson VUE handles the administration, giving you the flexibility to choose between the comfort of your home office (remote proctoring) or the structure of an in-person testing center. Your test, your turf.

The exam doesn't just skim the surface. It digs into these key territories:

- Digital transformation with Google Cloud
- General cloud knowledge (the universal language of cloud)
- Google Cloud's product and service arsenal
- Cloud application deployment models
- Infrastructure and application modernization strategies
- Security, cost management, and operational excellence

This isn't just about memorizing service names—it's about understanding how these pieces fit into real business puzzles.

### Registration and Testing Options

Ready to book your exam date but unsure which testing format fits your style?

Registration happens through Google Cloud's certification portal, where you'll make the crucial choice: take the exam remotely in your pajamas or dress up for an in-person testing center experience. Remote testing gives you location freedom but demands specific tech requirements and a distraction-free space. Testing centers offer a controlled environment but require you to, well, wear pants.

Either way, the content remains identical. Your choice comes down to personal preference and which environment helps your brain perform at its peak.

### Retake Policy

Bombed the exam? Don't panic—Google's got a graduated retry system.

First failure? Take a breather for 14 days, review what tripped you up, and try again. Second miss? The waiting period jumps to 60 days—a clear signal to dive deeper into preparation. If lightning strikes thrice, you're looking at a full 365-day cooldown period.

This isn't Google being mean. It's their way of saying: \"Please, actually prepare before trying again.\"

### Renewal Process

Even certifications have expiration dates.

Your shiny new Cloud Digital Leader certification stays valid for three years from your pass date. Google will nudge you with reminders as expiration approaches—no surprise deadlines here.

The renewal process can begin up to 180 days before your expiration date. You get options: take a shorter renewal exam or go for the full standard exam again.

Here's the sweet part: your initial certification comes with a 50% discount code for renewal. Half-price recertification? Yes, please.

This three-year cycle keeps your knowledge fresh and relevant in the ever-evolving cloud landscape.

## Study Blueprint: From Zero to Ready

### Recommended Learning Path

Ever stared at a certification goal and thought, \"Where on earth do I even begin?\"

Google has mapped out several golden paths to Digital Leader success, no compass required:

The Cloud Digital Leader learning path on Google Cloud Skills Boost serves up a feast of on-demand courses, hands-on labs, and skill badges. This isn't just reading—it's doing. You'll get your hands dirty with the actual technologies that matter for the certification.

Not enough? Coursera offers the Google Cloud Digital Leader Training Professional Certificate—a structured program designed for busy professionals. Two weeks at 4-5 hours per week is all it takes to cover cloud fundamentals, data management, AI concepts, and infrastructure modernization. Perfect for methodical learners who prefer clear milestones.

These official tracks form your main highway, but don't ignore the scenic routes—third-party practice exams and study guides add valuable perspective and test-taking strategies that official materials sometimes miss.

The best prep combines Google's authoritative content with real-world test simulations that train both your knowledge and your exam-taking muscles.

### 30-Day Sprint Schedule

What if you could transform from cloud novice to certified Digital Leader in just 30 days?

Here's your day-by-day game plan to make it happen:

**Week 1: Foundation Building**

- Dive into Cloud Digital Leader Fundamental courses on Google Cloud Skills Boost or Coursera—these aren't just videos, they're your knowledge foundation
- Get cozy with cloud computing basics until terms like \"IaaS\" and \"multi-cloud\" feel like old friends
- Dissect the official exam guide like a detective, mapping out exactly what Google expects you to know

**Week 2: Core Services Deep Dive**

- Peel back the layers of Google Cloud's core services—compute, storage, and networking become your new vocabulary
- Explore how data, ML, and AI services fit into the Google Cloud puzzle
- Test the waters with practice quizzes to gauge where you stand

**Week 3: Business Application and Use Cases**

- Shift from \"what\" to \"why\" with digital transformation case studies that show cloud in action
- Master the business side: security postures, cost optimization, and operational excellence
- Face your first full-length practice exam—a reality check that highlights your strong and weak spots

**Week 4: Exam Preparation**

- Target your weak areas with surgical precision—no more general studying
- Drill key concepts with flashcards and cheat sheets until they're second nature
- Take practice exams until you consistently hit that magical 80%+ mark
- Pull the trigger and schedule your exam—commitment creates results

This isn't just about cramming facts—it's about building usable knowledge week by week until you're exam-ready.

### Curated Resources

Drowning in Google search results for study materials? Let's cut through the noise.

These high-impact resources deliver the most bang for your study buck:

**Official Google Gold:**

- Cloud Digital Leader Learning Path on Google Cloud Skills Boost—straight from the certification creators
- Official exam guide and sample questions—the closest peek at what you'll face on exam day
- Google Cloud product documentation—the authoritative source when you need clarity

**Battle-Tested Third-Party Tools:**

- Practice exam platforms like Whizlabs, ExamTopics, and SkillCertPro—your training ground for the real thing
- YouTube tutorials that break down complex concepts into digestible chunks
- Community forums and study groups where collective wisdom exceeds individual effort

Nearly every certification success story includes this plot twist: practice tests made the difference between passing and failing. They train both your knowledge and your exam-taking muscles simultaneously.

### Practice Exam Strategy

Random test-taking won't cut it. You need a battle plan:

1. Take a baseline test first—this diagnostic reveals where you truly stand, not where you think you stand
2. Attack your weakest areas mercilessly—this isn't the time for comfort-zone studying
3. Track your progress with regular practice tests—what gets measured gets improved
4. Mine the gold in answer explanations—wrong answers teach more than right ones
5. Don't schedule your real exam until you consistently score 80%+ on practice tests

Memorization is fool's gold. Understanding is the real treasure.

The exam doesn't want you to recite service definitions—it tests whether you can apply cloud solutions to business scenarios. Practice tests build this application muscle better than any other study method.

## Exam-Day Game Plan & Retrospective

### Pre-Exam Checklist

Ever had that nightmare where you show up for a test completely unprepared? Let's prevent the real-life version.

**For Remote Testing:**

- Test your system compatibility 48 hours before D-day—last-minute tech issues are panic-inducing
- Double-check your internet stability—a dropout during the exam is the modern version of \"my dog ate my homework\"
- Create a sterile testing environment—clear your desk of everything except your ID
- Have your identification ready for the virtual proctor's inspection
- Log in 15 minutes early—the check-in process takes longer than you think

**For Test Center Warriors:**

- Scout your test center location beforehand—showing up at the wrong address is a disaster
- Pack your ID the night before—forgetting it means instant disqualification
- Arrive with a 30-minute buffer—check-in procedures move at bureaucratic speed
- Know the center's rules about breaks and personal items—surprises here aren't the good kind

Exam-day stress is inevitable, but logistical stress is completely preventable.

### Time Management Strategies

Two hours for 60 questions sounds generous until you're staring at a particularly tricky scenario with the clock ticking.

Your battle plan:

1. **First Pass:** Blitz through all questions you can answer without hesitation—these are your easy wins
2. **Second Pass:** Circle back to the head-scratchers, playing detective by eliminating obviously wrong options first
3. **Final Review:** Use your remaining time like a treasure hunter, revisiting flagged questions with fresh eyes
4. **Leave No Question Behind:** With no penalty for wrong answers, a guess trumps an empty response every time

This isn't just about finishing—it's about maximizing points by allocating your mental energy strategically.

### Mindset and Common Pitfalls

What mental glasses should you wear during this exam?

Think business translator, not technical implementer. The Digital Leader exam tests whether you can bridge technology capabilities to business needs. You're not writing code; you're solving business problems with cloud tools.

The questions often read like mini case studies. Your job? Match business scenarios to the most appropriate Google Cloud solution.

Keywords matter. Terms like \"global scale,\" \"sensitive data,\" or \"cost optimization\" aren't random—they're deliberate signposts pointing toward specific services.

Now for the traps that snare unwary test-takers:

- Diving too deep into technical weeds when the question wants business-level thinking
- Skimming past critical requirements hidden in scenario details
- Mixing up similar-sounding Google Cloud services (BigQuery vs Bigtable, anyone?)
- Speed-reading questions and missing subtle qualifiers that change everything

Read each question twice. The answer often hides in plain sight.

### Post-Exam Steps

You passed! After the celebration dance (we won't judge), what comes next?

1. **Claim Your Digital Badge:** Watch for an email with badge claiming instructions. This isn't just a pretty image—it's a verifiable credential you can showcase on LinkedIn, your website, and email signature. Digital swagger with substance.

2. **Resume Renovation:** Don't just add a line about your certification. Strategically weave in the skills this credential validates—cloud strategy, digital transformation knowledge, and business-technical translation abilities.

3. **Share Strategically:** Your LinkedIn announcement isn't just bragging—it's signaling to recruiters, colleagues, and your network that you've leveled up. A well-crafted certification post can open surprising doors.

4. **Plot Your Next Move:** Is this your cloud certification launching pad or destination? Consider whether the Associate Cloud Engineer or Professional Cloud Architect might be your logical next step. Each certification you add compounds the value of your credential portfolio.


Your certification journey doesn't end with passing—it's just entering a new phase of professional leverage.

## FAQ: Your Top Digital Leader Questions Answered

### Cost vs. Salary Impact: Is it worth the investment?

**Q: Is dropping $125 on this exam really going to pay off?**
A: Do the math: certified professionals routinely command $90,000-$150,000 depending on experience and location. That $125 fee? It's less than 0.1% of your potential annual salary. Professionals with this certification typically earn 20-25% more than their non-certified counterparts in similar roles.

This isn't an expense—it's one of the highest-ROI investments in your professional portfolio.

### Renewal Requirements

**Q: Will I be doing this all over again next year?**
A: Breathe easy. The Cloud Digital Leader certification stays valid for three full years before renewal comes knocking. When that time approaches, you can start the renewal process up to 180 days before expiration—plenty of time to prepare for recertification.

Three years is the sweet spot: long enough to get full value, short enough to ensure your knowledge stays current.

### Difficulty Compared to Other Certifications

**Q: Is this easier or harder than the Associate Cloud Engineer exam?**
A: They test different muscles. The Digital Leader exam focuses on business applications and strategic understanding of cloud technology. The ACE dives into technical implementation and hands-on skills.

Most candidates find Digital Leader less technically demanding but requiring a broader business perspective. If you can configure a load balancer but struggle to explain its business value, you might find Digital Leader surprisingly challenging.

### Preparation Time Requirements

**Q: Real talk—how many hours am I committing to this?**
A: The official Google timeline suggests 2 weeks at 4-5 hours per week (roughly 8-10 hours total). Reality check: most successful candidates report investing 20-40 total hours of focused study time.

Your mileage will vary based on prior cloud knowledge, but even complete beginners can prepare adequately within a month of reasonable study.

### Value for Technical Professionals

**Q: I write code and manage infrastructure. Why would I bother with this business-focused cert?**
A: Because technical brilliance without business context is a career ceiling.

Technical professionals who add this certification gain the vocabulary and frameworks to translate their technical wizardry into business impact. This opens doors to leadership roles, improves collaboration with business stakeholders, and positions you as more than \"just\" a technical expert.

The most valuable technologists aren't those who know the most commands—they're those who can connect technical solutions to business outcomes.

## Conclusion

The Google Cloud Digital Leader certification represents an excellent investment in your cloud career, offering a strong credential that validates your understanding of how cloud technologies drive business value. With its focus on the intersection of technology and business strategy, this certification fills a critical gap in the market and creates opportunities for professionals from diverse backgrounds.

By following the structured study plan outlined in this guide and leveraging the recommended resources, you'll be well-positioned to pass the exam on your first attempt. More importantly, you'll gain practical knowledge that directly applies to real-world business scenarios involving cloud adoption and digital transformation.

Your next step is simple: commit to a start date for your preparation, block out study time on your calendar, and set an exam date to create accountability. With focused effort over the next 30 days, you can join the growing community of Google Cloud certified professionals and unlock new career possibilities.

---

Want to stay updated on the latest Google Cloud certification news, study resources, and job opportunities? Join our free weekly GCP study newsletter for exclusive tips, practice questions, and community insights to fuel your cloud journey.

---

**Additional Resources:**

- [Google Cloud Certification Page](https://cloud.google.com/learn/certification/cloud-digital-leader)
- [Cloud Skills Boost Learning Path](https://www.cloudskillsboost.google/paths/9)
- [Coursera Professional Certificate](https://www.coursera.org/professional-certificates/google-cloud-digital-leader-training)
- [Official Exam Guide](https://cloud.google.com/certification/guides/cloud-digital-leader)
</file>

<file path="app/content/spokes/google-cloud-digital-leader-certification.md">
---
title: "Google Cloud Digital Leader Certification: The Complete 2025 Guide"
description: "Everything you need to know about the Google Cloud Digital Leader certification – prerequisites, exam format, study resources, and career benefits."
date: "2025-05-03"
author: "Testero Team"
tags: ["Google Cloud", "Cloud Digital Leader", "Certification", "Career Development"]
coverImage: "/images/cloud-digital-leader.jpg"
hubSlug: "google-cloud-certification-guide"
spokeOrder: 1
---

# Google Cloud Digital Leader Certification: The Complete 2025 Guide

Are you looking to validate your foundational knowledge of cloud technology and Google Cloud's capabilities? The Cloud Digital Leader certification might be the perfect starting point on your Google Cloud journey.

As the most accessible certification in Google's portfolio, the Cloud Digital Leader is designed for professionals who need to understand cloud concepts without necessarily diving into the technical implementation details.

## What is the Cloud Digital Leader Certification?

The Google Cloud Digital Leader certification validates your ability to:

- Understand the capabilities of Google Cloud core products and services
- Describe common business use cases and how cloud solutions support an enterprise
- Make informed decisions about cloud solutions based on business requirements
- Explain the fundamental concepts of digital transformation with Google Cloud

Unlike Google's other certifications, the Cloud Digital Leader is non-technical, focusing on business applications and concepts rather than hands-on implementation.

## Who Should Pursue This Certification?

The Cloud Digital Leader certification is ideal for:

- **Business Leaders** who need to understand cloud capabilities for strategic decisions
- **Project Managers** coordinating cloud initiatives
- **Sales and Marketing Professionals** working with cloud products
- **Consultants** advising on digital transformation
- **Technical Professionals** looking for a foundation before pursuing more specialized certifications

This certification is particularly valuable if you're in a role that bridges the gap between technical teams and business stakeholders.

## Exam Details

Here's what you can expect from the Cloud Digital Leader exam:

- **Format**: Multiple-choice and multiple-select questions
- **Length**: 90 minutes
- **Questions**: Approximately 50 questions
- **Passing Score**: 70%
- **Price**: $99 USD (as of May 2025)
- **Languages**: English, Japanese, Spanish, Portuguese
- **Delivery Method**: Online proctored or test center
- **Prerequisite**: None
- **Validity**: 2 years

## Exam Domains

The Cloud Digital Leader exam covers four main domains:

### 1. Digital Transformation with Google Cloud (17-19%)

- Define digital transformation with Google Cloud
- Describe innovative digital transformation outcomes
- Explain key cultural and organizational factors for digital transformation success

### 2. Innovating with Google Cloud Data, ML, and AI Solutions (25-27%)

- Describe data types and data processing options
- Explain different approaches to ML and AI model building
- Identify Google Cloud solutions for storage, big data, ML, and AI

### 3. Infrastructure and Application Modernization (25-27%)

- Describe infrastructure modernization options
- Explain application modernization approaches
- Identify Google Cloud compute options and their use cases
- Understand network and security solutions

### 4. Understanding Google Cloud Security and Operations (25-27%)

- Describe Google's security model and shared responsibility
- Explain the key identity and access management options
- Understand compliance and regulatory considerations
- Describe cost management and optimization approaches
- Explain monitoring and management options

## Preparation Strategy

Unlike technical certifications, the Cloud Digital Leader focuses on concepts and use cases rather than implementation details. Here's how to prepare effectively:

### 1. Official Training Resources

Google offers several official resources designed specifically for the Cloud Digital Leader certification:

- **Cloud Digital Leader Learning Path**: A comprehensive set of courses available on Google Cloud Skills Boost
- **Preparing for the Google Cloud Digital Leader Certification Exam**: A specialized exam prep course
- **Digital Transformation with Google Cloud**: A course focusing on the business aspects of cloud adoption

### 2. Google Cloud Fundamentals

Familiarize yourself with Google Cloud's core concepts and services:

- **Google Cloud Console**: Explore the interface and basic navigation
- **Service Categories**: Understand the various service categories (compute, storage, databases, etc.)
- **Cloud Architecture**: Learn about regions, zones, and global resources

### 3. Use Case Understanding

Spend time understanding how different industries apply Google Cloud solutions:

- **Case Studies**: Review Google Cloud case studies from various industries
- **Solution Architectures**: Examine reference architectures for common business problems
- **Industry-Specific Solutions**: Learn how retail, healthcare, financial services, and other industries leverage cloud technologies

### 4. Practice Exams

Test your knowledge with practice exams:

- **Official Sample Questions**: Available in the exam guide
- **Third-Party Practice Tests**: Additional preparation resources
- **Self-Assessment**: Create flashcards for key concepts and services

## Study Plan

Here's a recommended 4-week study plan for the Cloud Digital Leader certification:

### Week 1: Fundamentals and Digital Transformation

- Complete the "Digital Transformation with Google Cloud" course
- Review basic cloud concepts and terminology
- Understand Google's perspective on digital transformation

### Week 2: Data, ML, and AI Solutions

- Learn about Google's data storage options (Cloud Storage, Bigtable, Spanner, etc.)
- Understand big data processing tools (BigQuery, Dataflow, Pub/Sub)
- Familiarize yourself with Google's ML and AI offerings (Vertex AI, Document AI, etc.)

### Week 3: Infrastructure and Application Modernization

- Study compute options (Compute Engine, GKE, Cloud Run, App Engine)
- Learn about networking services (VPC, Cloud Load Balancing, Cloud CDN)
- Understand application modernization approaches and patterns

### Week 4: Security, Operations, and Review

- Study Google's security model and IAM concepts
- Learn about monitoring and management tools (Cloud Monitoring, Cloud Logging)
- Take practice exams and review weak areas
- Focus on understanding the business value of various Google Cloud services

## Exam Tips

When taking the Cloud Digital Leader exam:

- **Focus on Business Value**: Questions often ask about which solution best serves a particular business need
- **Understand Service Categories**: Know which services fall under compute, storage, databases, etc.
- **Read Carefully**: Some questions may have multiple correct answers
- **Think Business-First**: Remember this exam tests your understanding of how cloud solves business problems, not how to implement technical solutions
- **Manage Time**: Allow about 1.5 minutes per question

## After Certification

Once you've earned your Cloud Digital Leader certification:

- **Share Your Achievement**: Add the certification to your LinkedIn profile and resume
- **Plan Your Next Steps**: Consider if you want to pursue more technical Google Cloud certifications
- **Stay Current**: Follow Google Cloud updates and new service announcements
- **Apply Your Knowledge**: Look for opportunities to apply your cloud knowledge in business contexts

## Career Impact

The Cloud Digital Leader certification can benefit your career in several ways:

- **Bridge Business and Technical Teams**: Position yourself as someone who can translate between technical capabilities and business needs
- **Lead Digital Transformation**: Gain credibility when driving cloud adoption initiatives
- **Career Advancement**: Open doors to roles that require cloud literacy
- **Pathway to Technical Roles**: Create a foundation for more advanced technical certifications

## Real-World Example: Digital Transformation Project

To illustrate how the knowledge from this certification applies in practice, consider this scenario:

A retail company wants to enhance its customer experience and operational efficiency through cloud adoption. With Cloud Digital Leader knowledge, you could:

1. **Identify Business Opportunities**: Recommend using BigQuery for customer analytics and Vertex AI for personalized recommendations
2. **Evaluate Options**: Compare fully managed services vs. self-managed infrastructure based on the company's IT capabilities
3. **Consider Security**: Explain Google's shared responsibility model and recommend appropriate security controls
4. **Build a Business Case**: Calculate potential ROI from improved customer targeting and operational efficiency
5. **Plan Adoption**: Outline a phased approach to cloud migration that aligns with business priorities

## Conclusion

The Google Cloud Digital Leader certification is an excellent entry point into the Google Cloud ecosystem, especially for those in non-technical or business-oriented roles. By validating your understanding of cloud concepts and Google Cloud's capabilities, you'll be better equipped to contribute to cloud initiatives and digital transformation efforts within your organization.

Ready to take the next step in your Google Cloud journey? Check out our guides to other Google Cloud certifications, including the [Associate Cloud Engineer](https://testero.ai/content/spoke/associate-cloud-engineer-certification) and [Professional Cloud Architect](https://testero.ai/content/spoke/professional-cloud-architect-certification).
</file>

<file path="app/design-system/page.tsx">
import { redirect } from 'next/navigation';

export default function DesignSystem() {
  // Redirect to homepage
  redirect('/');
}
</file>

<file path="app/faq/[slug]/page.tsx">
import React, { Suspense } from 'react';
import { faqData } from '@/lib/content/faqData';
import type { Metadata } from 'next';
import FaqClientContent from './FaqClientContent';

const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://testero.ai';

export async function generateMetadata({ params }: { params: Promise<{ slug: string }> }): Promise<Metadata> {
  const unwrappedParams = await params;
  const faq = faqData.find((f) => f.slug === unwrappedParams.slug);

  if (!faq) {
    return {
      title: 'FAQ Not Found',
      description: 'The FAQ you are looking for could not be found.',
    };
  }

  return {
    title: faq.question,
    description: faq.answer.substring(0, 160) + (faq.answer.length > 160 ? '...' : ''),
    alternates: {
      canonical: `${baseUrl}/faq/${faq.slug}`,
    },
  };
}

export default async function FaqSlugPage({ params }: { params: Promise<{ slug: string }> }) {
  const unwrappedParams = await params;
  const faq = faqData.find((f) => f.slug === unwrappedParams.slug);

  return (
    <Suspense fallback={<div>Loading FAQ...</div>}>
      <FaqClientContent faq={faq} />
    </Suspense>
  );
}
</file>

<file path="app/forgot-password/page.tsx">
"use client";

import React, { useState } from 'react';
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import Link from 'next/link';
import { usePostHog } from "posthog-js/react";
import { HoverButton } from "@/components/ui/hover-button";
import { Input } from "@/components/ui/input";
import { Form, FormControl, FormField, FormItem, FormMessage } from "@/components/ui/form";
import { motion, AnimatePresence } from "framer-motion";

// Define the form schema with zod validation
const forgotPasswordFormSchema = z.object({
  email: z
    .string()
    .min(1, { message: "Email is required" })
    .email({ message: "Must be a valid email address" })
    .transform((val) => val.toLowerCase().trim()),
});

type ForgotPasswordFormValues = z.infer<typeof forgotPasswordFormSchema>;

const ForgotPasswordPage = () => {
  // Form states
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [submittedEmail, setSubmittedEmail] = useState<string>("");
  const [resendEnabled, setResendEnabled] = useState<boolean>(false);
  const posthog = usePostHog(); // Get PostHog instance

  // Initialize the form
  const form = useForm<ForgotPasswordFormValues>({
    resolver: zodResolver(forgotPasswordFormSchema),
    defaultValues: {
      email: "",
    },
  });

  // Track page view in PostHog
  React.useEffect(() => {
    if (posthog) {
      posthog.capture('forgot_password_page_viewed');
    }
    
    // Enable resend button after 60 seconds
    if (isSubmitted) {
      const timer = setTimeout(() => {
        setResendEnabled(true);
      }, 60000);
      
      return () => clearTimeout(timer);
    }
  }, [posthog, isSubmitted]);

  // Handle form submission
  async function onSubmit(data: ForgotPasswordFormValues) {
    setIsSubmitting(true);
    setError(null);
    
    try {
      // Track reset password attempt in PostHog
      if (posthog) {
        posthog.capture('password_reset_requested', {
          email: data.email,
        });
      }

      // TODO: Replace with actual password reset logic
      console.log('Password reset requested for', data.email);
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Store email for confirmation screen
      setSubmittedEmail(data.email);
      
      // Show success state
      setIsSubmitted(true);
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : "Something went wrong. Please try again.";
      setError(errorMessage);
      
      // Track error in PostHog
      if (posthog) {
        posthog.capture('password_reset_error', {
          error_message: errorMessage,
        });
      }
    } finally {
      setIsSubmitting(false);
    }
  }

  // Handle resend request
  function handleResend() {
    if (!resendEnabled) return;
    
    // Track resend request in PostHog
    if (posthog) {
      posthog.capture('password_reset_resend_requested', {
        email: submittedEmail,
      });
    }
    
    setResendEnabled(false);
    
    // Simulate resend
    setTimeout(() => {
      // Enable resend button again after 60 seconds
      setResendEnabled(true);
    }, 60000);
  }

  return (
    <div className="min-h-screen pt-24 pb-12 md:pt-32 flex flex-col items-center justify-start bg-gradient-to-b from-slate-50 to-slate-100">
      <div className="w-full max-w-md px-6">
        {/* Card Container */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="bg-white shadow-lg rounded-xl border border-slate-200 overflow-hidden"
        >
          {/* Header */}
          <div className="px-6 py-8 text-center border-b border-slate-200 bg-gradient-to-r from-slate-50 to-slate-100">
            <h1 className="text-2xl md:text-3xl font-bold text-slate-800 mb-2">Reset Your Password</h1>
            <p className="text-slate-600">Enter your email to receive a password reset link</p>
          </div>

          {/* Form Container */}
          <div className="px-6 py-8">
            <AnimatePresence mode="wait">
              {!isSubmitted ? (
                <motion.div
                  key="form"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                >
                  <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                      {/* Email Field */}
                      <FormField
                        control={form.control}
                        name="email"
                        render={({ field, fieldState }) => (
                          <FormItem>
                            <div className="relative">
                              <FormControl>
                                <Input
                                  type="email"
                                  placeholder="Email address"
                                  className={`px-4 py-3 text-base rounded-md transition-all duration-300 border-2 ${
                                    fieldState.error 
                                      ? "border-red-400 bg-red-50" 
                                      : fieldState.isDirty && !fieldState.error
                                        ? "border-green-400 bg-green-50" 
                                        : "border-slate-300 focus:border-orange-400 focus:ring focus:ring-orange-200 focus:ring-opacity-50"
                                  }`}
                                  disabled={isSubmitting}
                                  autoComplete="email"
                                  autoFocus
                                  aria-required="true"
                                  aria-invalid={fieldState.error ? "true" : "false"}
                                  {...field}
                                  onFocus={() => {
                                    if (posthog) {
                                      posthog.capture('forgot_password_form_interaction_start');
                                    }
                                  }}
                                />
                              </FormControl>
                              
                              {/* Validation icon */}
                              {fieldState.isDirty && (
                                <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                                  {fieldState.error ? (
                                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                                    </svg>
                                  ) : (
                                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                                    </svg>
                                  )}
                                </div>
                              )}
                            </div>
                            <FormMessage className="text-left mt-1 font-medium" />
                          </FormItem>
                        )}
                      />

                      {/* Error Alert */}
                      {error && (
                        <motion.div
                          initial={{ opacity: 0, y: -10 }}
                          animate={{ opacity: 1, y: 0 }}
                          className="bg-red-50 border border-red-200 rounded-md px-4 py-3 text-center"
                          role="alert"
                          aria-live="assertive"
                        >
                          <p className="text-red-600 font-medium flex items-center justify-center text-sm">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2" aria-hidden="true">
                              <path strokeLinecap="round" strokeLinejoin="round" d="M12 9v3.75m9-.75a9 9 0 11-18 0 9 9 0 0118 0zm-9 3.75h.008v.008H12v-.008z" />
                            </svg>
                            {error}
                          </p>
                        </motion.div>
                      )}

                      {/* Instructions */}
                      <div className="bg-blue-50 border border-blue-100 rounded-md px-4 py-3">
                        <p className="text-blue-700 text-sm">
                          We&apos;ll send you an email with a link to reset your password. The link will expire after 24 hours.
                        </p>
                      </div>

                      {/* Submit Button */}
                      <HoverButton
                        className="bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white px-6 py-3 rounded-md text-base font-semibold shadow-md w-full transition-all"
                        type="submit"
                        disabled={isSubmitting}
                        aria-busy={isSubmitting ? "true" : "false"}
                      >
                        {isSubmitting ? (
                          <div className="flex items-center justify-center">
                            <svg 
                              className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" 
                              xmlns="http://www.w3.org/2000/svg" 
                              fill="none" 
                              viewBox="0 0 24 24"
                              aria-hidden="true"
                            >
                              <circle 
                                className="opacity-25" 
                                cx="12" 
                                cy="12" 
                                r="10" 
                                stroke="currentColor" 
                                strokeWidth="4"
                              ></circle>
                              <path 
                                className="opacity-75" 
                                fill="currentColor" 
                                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                              ></path>
                            </svg>
                            Sending...
                          </div>
                        ) : (
                          <div className="flex items-center justify-center">
                            <span>&#39;Send Reset Link&#39;</span>
                          </div>
                        )}
                      </HoverButton>
                    </form>
                  </Form>
                </motion.div>
              ) : (
                <motion.div
                  key="success"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="space-y-6"
                >
                  {/* Success Message */}
                  <div className="text-center">
                    <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100 mb-4">
                      <svg className="h-6 w-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                      </svg>
                    </div>
                    <h3 className="text-lg font-medium text-slate-900 mb-2">Check your email</h3>
                    <p className="text-slate-600 mb-1">
                      We&apos;ve sent a password reset link to:
                    </p>
                    <p className="text-slate-900 font-medium mb-4">
                      {submittedEmail}
                    </p>
                    <p className="text-slate-600 text-sm">
                      If you don&apos;t see it in your inbox, please check your spam folder.
                    </p>
                  </div>

                  {/* Resend Email Option */}
                  <div className="border-t border-slate-200 pt-4 text-center">
                    <p className="text-slate-600 text-sm mb-3">
                      Didn&apos;t receive the email?
                    </p>
                    <button
                      type="button"
                      onClick={handleResend}
                      disabled={!resendEnabled}
                      className={`text-sm font-medium ${
                        resendEnabled
                          ? "text-orange-500 hover:text-orange-600 cursor-pointer"
                          : "text-slate-400 cursor-not-allowed"
                      }`}
                    >
                      {resendEnabled ? "Resend Email" : "Resend available in 60s"}
                    </button>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        </motion.div>

        {/* Back to Login Link */}
        <div className="mt-8 text-center">
          <p className="text-slate-600">
            Remember your password?{' '}
            <Link 
              href="/login" 
              className="text-orange-500 hover:text-orange-600 transition-colors font-medium"
            >
              Back to login
            </Link>
          </p>
        </div>

        {/* Visual Decoration */}
        <div className="absolute inset-0 opacity-10 pointer-events-none" aria-hidden="true">
          <div className="absolute top-0 left-1/4 w-64 h-64 rounded-full bg-blue-500 mix-blend-multiply blur-3xl"></div>
          <div className="absolute bottom-0 right-1/4 w-64 h-64 rounded-full bg-orange-500 mix-blend-multiply blur-3xl"></div>
        </div>
      </div>
    </div>
  );
};

export default ForgotPasswordPage;
</file>

<file path="app/login/page.tsx">
"use client";

import React, { useState } from 'react';
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import Link from 'next/link';
import { usePostHog } from "posthog-js/react";
import { HoverButton } from "@/components/ui/hover-button";
import { Input } from "@/components/ui/input";
import { Form, FormControl, FormField, FormItem, FormMessage } from "@/components/ui/form";
import { motion, AnimatePresence } from "framer-motion";

// Define the form schema with zod validation
const loginFormSchema = z.object({
  email: z
    .string()
    .min(1, { message: "Email is required" })
    .email({ message: "Must be a valid email address" })
    .transform((val) => val.toLowerCase().trim()),
  password: z
    .string()
    .min(8, { message: "Password must be at least 8 characters" }),
});

type LoginFormValues = z.infer<typeof loginFormSchema>;

const LoginPage = () => {
  // Form submission states
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const posthog = usePostHog(); // Get PostHog instance

  // Initialize the form
  const form = useForm<LoginFormValues>({
    resolver: zodResolver(loginFormSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  });

  // Handle form submission
  async function onSubmit(data: LoginFormValues) {
    setIsSubmitting(true);
    setError(null);
    
    try {
      // Track login attempt in PostHog
      if (posthog) {
        posthog.capture('login_attempt', {
          email: data.email,
        });
      }

      // TODO: Replace with actual login logic
      console.log('Login form submitted', data);
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // For demonstration, showing error state
      // Remove this in production and implement actual authentication
      setError('Login functionality is not yet implemented. Please join the waitlist.');
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : "Something went wrong. Please try again.";
      setError(errorMessage);
      
      // Track error in PostHog
      if (posthog) {
        posthog.capture('login_error', {
          error_message: errorMessage,
        });
      }
    } finally {
      setIsSubmitting(false);
    }
  }

  return (
    <div className="min-h-screen pt-24 pb-12 md:pt-32 flex flex-col items-center justify-start bg-gradient-to-b from-slate-50 to-slate-100">
      <div className="w-full max-w-md px-6">
        {/* Card Container */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="bg-white shadow-lg rounded-xl border border-slate-200 overflow-hidden"
        >
          {/* Header */}
          <div className="px-6 py-8 text-center border-b border-slate-200 bg-gradient-to-r from-slate-50 to-slate-100">
            <h1 className="text-2xl md:text-3xl font-bold text-slate-800 mb-2">Welcome Back</h1>
            <p className="text-slate-600">Sign in to your Testero account</p>
          </div>

          {/* Form Container */}
          <div className="px-6 py-8">
            <AnimatePresence mode="wait">
              <motion.div
                key="form"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
              >
                <Form {...form}>
                  <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                    {/* Email Field */}
                    <FormField
                      control={form.control}
                      name="email"
                      render={({ field, fieldState }) => (
                        <FormItem>
                          <div className="relative">
                            <FormControl>
                              <Input
                                type="email"
                                placeholder="Email address"
                                className={`px-4 py-3 text-base rounded-md transition-all duration-300 border-2 ${
                                  fieldState.error 
                                    ? "border-red-400 bg-red-50" 
                                    : fieldState.isDirty && !fieldState.error
                                      ? "border-green-400 bg-green-50" 
                                      : "border-slate-300 focus:border-orange-400 focus:ring focus:ring-orange-200 focus:ring-opacity-50"
                                }`}
                                disabled={isSubmitting}
                                autoComplete="email"
                                autoFocus
                                aria-required="true"
                                aria-invalid={fieldState.error ? "true" : "false"}
                                {...field}
                                onFocus={() => {
                                  if (posthog) {
                                    posthog.capture('login_form_interaction_start');
                                  }
                                }}
                              />
                            </FormControl>
                            
                            {/* Validation icon */}
                            {fieldState.isDirty && (
                              <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                                {fieldState.error ? (
                                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                                  </svg>
                                ) : (
                                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                                  </svg>
                                )}
                              </div>
                            )}
                          </div>
                          <FormMessage className="text-left mt-1 font-medium" />
                        </FormItem>
                      )}
                    />

                    {/* Password Field */}
                    <FormField
                      control={form.control}
                      name="password"
                      render={({ field, fieldState }) => (
                        <FormItem>
                          <div className="relative">
                            <FormControl>
                              <Input
                                type="password"
                                placeholder="Password"
                                className={`px-4 py-3 text-base rounded-md transition-all duration-300 border-2 ${
                                  fieldState.error 
                                    ? "border-red-400 bg-red-50" 
                                    : fieldState.isDirty && !fieldState.error
                                      ? "border-green-400 bg-green-50" 
                                      : "border-slate-300 focus:border-orange-400 focus:ring focus:ring-orange-200 focus:ring-opacity-50"
                                }`}
                                disabled={isSubmitting}
                                autoComplete="current-password"
                                aria-required="true"
                                aria-invalid={fieldState.error ? "true" : "false"}
                                {...field}
                              />
                            </FormControl>
                            
                            {/* Validation icon */}
                            {fieldState.isDirty && (
                              <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                                {fieldState.error ? (
                                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                                  </svg>
                                ) : (
                                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                                  </svg>
                                )}
                              </div>
                            )}
                          </div>
                          <FormMessage className="text-left mt-1 font-medium" />
                        </FormItem>
                      )}
                    />

                    {/* Forgot Password Link */}
                    <div className="flex justify-end">
                      <Link 
                        href="/forgot-password" 
                        className="text-sm text-orange-500 hover:text-orange-600 transition-colors font-medium"
                      >
                        Forgot password?
                      </Link>
                    </div>

                    {/* Error Alert */}
                    {error && (
                      <motion.div
                        initial={{ opacity: 0, y: -10 }}
                        animate={{ opacity: 1, y: 0 }}
                        className="bg-red-50 border border-red-200 rounded-md px-4 py-3 text-center"
                        role="alert"
                        aria-live="assertive"
                      >
                        <p className="text-red-600 font-medium flex items-center justify-center text-sm">
                          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2" aria-hidden="true">
                            <path strokeLinecap="round" strokeLinejoin="round" d="M12 9v3.75m9-.75a9 9 0 11-18 0 9 9 0 0118 0zm-9 3.75h.008v.008H12v-.008z" />
                          </svg>
                          {error}
                        </p>
                      </motion.div>
                    )}

                    {/* Login Button */}
                    <HoverButton
                      className="bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white px-6 py-3 rounded-md text-base font-semibold shadow-md w-full transition-all"
                      type="submit"
                      disabled={isSubmitting}
                      aria-busy={isSubmitting ? "true" : "false"}
                    >
                      {isSubmitting ? (
                        <div className="flex items-center justify-center">
                          <svg 
                            className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" 
                            xmlns="http://www.w3.org/2000/svg" 
                            fill="none" 
                            viewBox="0 0 24 24"
                            aria-hidden="true"
                          >
                            <circle 
                              className="opacity-25" 
                              cx="12" 
                              cy="12" 
                              r="10" 
                              stroke="currentColor" 
                              strokeWidth="4"
                            ></circle>
                            <path 
                              className="opacity-75" 
                              fill="currentColor" 
                              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                            ></path>
                          </svg>
                          Signing in...
                        </div>
                      ) : (
                        <div className="flex items-center justify-center">
                          <span>Sign In</span>
                        </div>
                      )}
                    </HoverButton>
                  </form>
                </Form>
              </motion.div>
            </AnimatePresence>
          </div>
        </motion.div>

        {/* Sign Up Link */}
        <div className="mt-8 text-center">
          <p className="text-slate-600">
            Don&apos;t have an account?{' '}
            <Link 
              href="/waitlist" 
              className="text-orange-500 hover:text-orange-600 transition-colors font-medium"
            >
              Join the waitlist
            </Link>
          </p>
        </div>

        {/* Visual Decoration */}
        <div className="absolute inset-0 opacity-10 pointer-events-none" aria-hidden="true">
          <div className="absolute top-0 left-1/4 w-64 h-64 rounded-full bg-blue-500 mix-blend-multiply blur-3xl"></div>
          <div className="absolute bottom-0 right-1/4 w-64 h-64 rounded-full bg-orange-500 mix-blend-multiply blur-3xl"></div>
        </div>
      </div>
    </div>
  );
};

export default LoginPage;
</file>

<file path="app/waitlist/page.tsx">
"use client";

import React from 'react';
import Link from 'next/link';
import { usePostHog } from "posthog-js/react";
import { WaitlistForm } from "@/components/ui/waitlist-form";
import { motion } from "framer-motion";

const WaitlistPage = () => {
  const posthog = usePostHog(); // Get PostHog instance

  // Track page view in PostHog
  React.useEffect(() => {
    if (posthog) {
      posthog.capture('waitlist_page_viewed');
    }
  }, [posthog]);

  return (
    <div className="min-h-screen pt-24 pb-12 md:pt-32 flex flex-col items-center justify-start bg-gradient-to-b from-slate-50 to-slate-100">
      <div className="w-full max-w-2xl px-6">
        {/* Card Container */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="bg-white shadow-lg rounded-xl border border-slate-200 overflow-hidden"
        >
          {/* Header */}
          <div className="px-6 md:px-10 py-8 md:py-10 text-center border-b border-slate-200 bg-gradient-to-r from-slate-50 to-slate-100">
            <h1 className="text-2xl md:text-3xl font-bold text-slate-800 mb-4">Join the Testero Waitlist</h1>
            <p className="text-slate-600 md:text-lg max-w-xl mx-auto">
              Get early access to our AI-powered learning platform for cloud certification exams. Sign up now to secure your spot and a <span className="font-medium text-orange-600 bg-orange-50 px-2 py-1 rounded">30% lifetime discount</span>.
            </p>
          </div>

          {/* Form Container */}
          <div className="px-6 md:px-10 py-8 md:py-10">
            <div className="max-w-md mx-auto">
              <div className="grid gap-8">
                {/* Benefits List */}
                <div className="bg-blue-50 rounded-lg p-5 border border-blue-100">
                  <h3 className="font-semibold text-blue-800 mb-3 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2">
                      <path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    Waitlist Benefits
                  </h3>
                  <ul className="space-y-2 text-blue-700">
                    <li className="flex items-start">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 mt-0.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      <span>Priority access to our beta launch (July 2025)</span>
                    </li>
                    <li className="flex items-start">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 mt-0.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      <span>30% lifetime discount on Pro subscription</span>
                    </li>
                    <li className="flex items-start">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 mt-0.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      <span>Opportunity to provide feedback and shape the platform</span>
                    </li>
                    <li className="flex items-start">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 mt-0.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      <span>Early access to new features and updates</span>
                    </li>
                  </ul>
                </div>

                {/* Waitlist Form */}
                <div>
                  <h3 className="font-medium text-slate-700 mb-3 text-center">Enter your email to secure your spot:</h3>
                  <WaitlistForm 
                    buttonText="Join the Waitlist" 
                    ctaLocation="waitlist_page" 
                    includeExamDropdown={true}
                  />
                </div>
              </div>
            </div>
          </div>
        </motion.div>

        {/* FAQ Preview */}
        <div className="mt-10 text-center">
          <h2 className="text-xl font-semibold text-slate-800 mb-4">Frequently Asked Questions</h2>
          <div className="bg-white p-5 rounded-lg shadow-md border border-slate-200 mb-6">
            <h3 className="font-medium text-slate-700 mb-2">When will Testero launch?</h3>
            <p className="text-slate-600">Testero will be launched as a private beta in July 2025, with priority access for waitlist members. The public launch is scheduled for Q4 2025.</p>
          </div>
          <div className="bg-white p-5 rounded-lg shadow-md border border-slate-200 mb-6">
            <h3 className="font-medium text-slate-700 mb-2">Which certification exams will be supported?</h3>
            <p className="text-slate-600">At launch, we&apos;ll support Google Cloud (GCP), AWS, and Microsoft Azure certification exams, with more platforms being added based on user demand.</p>
          </div>
          <Link 
            href="/faq" 
            className="text-orange-500 hover:text-orange-600 transition-colors font-medium flex items-center justify-center"
          >
            <span>View all FAQs</span>
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
            </svg>
          </Link>
        </div>

        {/* Already have an account link */}
        <div className="mt-8 text-center">
          <p className="text-slate-600">
            Already have an account?{' '}
            <Link 
              href="/login" 
              className="text-orange-500 hover:text-orange-600 transition-colors font-medium"
            >
              Sign in
            </Link>
          </p>
        </div>
      </div>

      {/* Visual Decoration */}
      <div className="absolute inset-0 opacity-10 pointer-events-none" aria-hidden="true">
        <div className="absolute top-0 left-1/4 w-64 h-64 rounded-full bg-blue-500 mix-blend-multiply blur-3xl"></div>
        <div className="absolute bottom-0 right-1/4 w-64 h-64 rounded-full bg-orange-500 mix-blend-multiply blur-3xl"></div>
      </div>
    </div>
  );
};

export default WaitlistPage;
</file>

<file path="app/metadata.ts">
import { generateMetadata as baseGenerateMetadata, generateJsonLd } from "@/lib/seo";

// Generate metadata for the home page
export const generateMetadata = () => baseGenerateMetadata({
  title: "Testero | Ace Your Google Cloud, AWS, and Azure Certification Exams Confidently",
  description: "Testero is an AI-powered learning platform that generates always-current practice questions, builds personalized adaptive study plans, and accurately predicts exam readiness for Google Cloud, AWS, and Azure cloud certifications.",
  keywords: [
    "cloud certification exam", 
    "cloud certification preparation", 
    "Google Cloud certification", 
    "AWS certification", 
    "Azure certification", 
    "AI learning platform", 
    "cloud exam preparation", 
    "certification practice questions", 
    "adaptive cloud certification study plan",
    "exam readiness prediction",
    "GCP Professional Cloud Architect",
    "AWS Solutions Architect",
    "Azure Administrator",
    "cloud certification practice tests",
    "cloud certification study guide"
  ],
  canonical: "/",
});

// Generate JSON-LD structured data for the home page
export const getJsonLd = () => generateJsonLd({
  "@graph": [
    {
      "@type": "WebPage",
      "@id": "https://testero.ai/#webpage",
      "url": "https://testero.ai",
      "name": "Testero | Ace Your Google Cloud, AWS, and Azure Certification Exams Confidently",
      "description": "Testero is an AI-powered learning platform that generates always-current practice questions, builds personalized adaptive study plans, and accurately predicts exam readiness for Google Cloud, AWS, and Azure cloud certifications.",
      "speakable": {
        "@type": "SpeakableSpecification",
        "cssSelector": ["h1", "h2", ".hero-text"]
      },
      "mainEntity": {
        "@type": "Product",
        "name": "Testero AI Cloud Certification Platform",
        "description": "AI-powered cloud certification exam preparation platform for Google Cloud, AWS, and Azure",
        "brand": {
          "@type": "Brand",
          "name": "Testero"
        },
        "offers": {
          "@type": "Offer",
          "availability": "https://schema.org/PreOrder",
          "price": "0",
          "priceCurrency": "USD"
        }
      }
    },
    {
      "@type": "FAQPage",
      "mainEntity": [
        {
          "@type": "Question",
          "name": "What is Testero?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "Testero is an AI-powered learning platform that helps professionals prepare for Google Cloud, AWS, and Azure certification exams with always-current practice questions, personalized adaptive study plans, and accurate exam readiness predictions."
          }
        },
        {
          "@type": "Question",
          "name": "Which cloud certification exams does Testero support?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "Testero supports all major Google Cloud certifications (including Professional Cloud Architect, Associate Cloud Engineer), AWS certifications (including Solutions Architect, Developer), and Azure certifications (including Administrator, Developer), with plans to expand to additional technical certifications in the future."
          }
        },
        {
          "@type": "Question",
          "name": "How does Testero improve cloud certification exam preparation?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "Testero uses AI to generate always-current practice questions that reflect the latest exam content, creates personalized study plans that focus on your weak areas, and accurately predicts when you'll be ready to pass your certification exam."
          }
        },
        {
          "@type": "Question",
          "name": "When will Testero be available for cloud certification preparation?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "Testero is launching in private beta in July 2025. Join the waitlist today for priority access and a 30% lifetime discount on all cloud certification preparation materials."
          }
        }
      ]
    }
  ]
});
</file>

<file path="components/content/RecommendedContent.tsx">
import React from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { Content } from '@/lib/content/loader';

interface RecommendedContentProps {
  content: Content[];
  currentSlug?: string;
  title?: string;
  limit?: number;
}

export default function RecommendedContent({
  content,
  currentSlug,
  title = 'Recommended Resources',
  limit = 3
}: RecommendedContentProps) {
  // Filter out the current content and limit to specified number
  const filteredContent = content
    .filter(item => item.slug !== currentSlug)
    .slice(0, limit);
  
  if (filteredContent.length === 0) return null;
  
  return (
    <section className="mt-12 bg-gray-50 rounded-xl p-8">
      <h2 className="text-2xl font-bold mb-6">{title}</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredContent.map((item) => (
          <div key={item.slug} className="bg-white rounded-lg shadow-sm overflow-hidden flex flex-col">
            {item.meta.coverImage && (
              <div className="relative h-40 w-full">
                <Image
                  src={item.meta.coverImage}
                  alt={item.meta.title}
                  fill
                  className="object-cover"
                  sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                  loading="lazy"
                  quality={75}
                />
              </div>
            )}
            <div className="p-5 flex-1 flex flex-col">
              <Link 
                href={`/content/${item.meta.type}/${item.slug}`}
                className="block hover:underline"
              >
                <h3 className="font-bold text-lg mb-2">{item.meta.title}</h3>
              </Link>
              <p className="text-gray-600 text-sm flex-1 mb-3">
                {item.meta.description.length > 100
                  ? `${item.meta.description.substring(0, 100)}...`
                  : item.meta.description}
              </p>
              <div className="mt-auto flex justify-between items-center text-xs text-gray-500">
                <span>
                  {new Date(item.meta.date).toLocaleDateString('en-US', {
                    year: 'numeric', 
                    month: 'short', 
                    day: 'numeric'
                  })}
                </span>
                {item.meta.readingTime && (
                  <span>{item.meta.readingTime} min read</span>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </section>
  );
}
</file>

<file path="components/content/TableOfContents.tsx">
'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';

interface Heading {
  id: string;
  text: string;
  level: number;
}

interface TableOfContentsProps {
  contentId: string;
  className?: string;
}

export default function TableOfContents({ contentId, className = '' }: TableOfContentsProps) {
  const [headings, setHeadings] = useState<Heading[]>([]);
  const [activeId, setActiveId] = useState<string>('');

  useEffect(() => {
    const contentElement = document.getElementById(contentId);
    if (!contentElement) return;

    // Extract all headings from h2 to h4
    const elements = Array.from(contentElement.querySelectorAll('h2, h3, h4'));
    
    const headingsData = elements.map((element) => {
      // Make sure all headings have IDs for scrolling
      if (!element.id) {
        const id = element.textContent
          ?.toLowerCase()
          .replace(/[^\w\s]/g, '')
          .replace(/\s+/g, '-') || `heading-${Math.random().toString(36).substr(2, 9)}`;
        element.id = id;
      }
      
      return {
        id: element.id,
        text: element.textContent || '',
        level: parseInt(element.tagName.substring(1)),
      };
    });
    
    setHeadings(headingsData);
    
    // Setup intersection observer for active heading highlighting
    const callback = (entries: IntersectionObserverEntry[]) => {
      // Find the first heading that is in view
      const visible = entries.filter(entry => entry.isIntersecting);
      if (visible.length > 0) {
        setActiveId(visible[0].target.id);
      }
    };
    
    const observer = new IntersectionObserver(callback, {
      rootMargin: '0px 0px -80% 0px',
    });
    
    elements.forEach(element => observer.observe(element));
    
    return () => observer.disconnect();
  }, [contentId]);
  
  if (headings.length === 0) return null;
  
  return (
    <nav className={`${className}`}>
      <h3 className="text-lg font-bold mb-4 text-gray-800 border-b pb-2">Table of Contents</h3>
      <ul className="space-y-1">
        {headings.map((heading) => (
          <li
            key={heading.id}
            className={`${
              heading.level === 2 
                ? 'mb-2' 
                : heading.level === 3 
                  ? 'ml-3 mb-1' 
                  : 'ml-6 text-sm'
            }`}
          >
            <Link
              href={`#${heading.id}`}
              className={`
                block py-1.5 pl-3 rounded-md transition-all duration-200
                ${heading.level === 2 ? 'font-medium' : ''}
                ${activeId === heading.id
                  ? 'bg-blue-50 text-blue-700 border-l-4 border-blue-600 font-medium'
                  : 'border-l-2 border-gray-200 text-gray-700 hover:bg-gray-50 hover:border-gray-400'
                }
              `}
              onClick={(e) => {
                e.preventDefault();
                document.getElementById(heading.id)?.scrollIntoView({
                  behavior: 'smooth',
                });
                setActiveId(heading.id); // Immediately set active for better feedback
              }}
            >
              <span className={`${heading.level > 2 ? 'text-sm' : ''}`}>
                {heading.text}
              </span>
            </Link>
          </li>
        ))}
      </ul>
    </nav>
  );
}
</file>

<file path="components/examples/DesignSystemDemo.tsx">
"use client";

import React from 'react';
import { colors } from '@/lib/design-system/colors';
import { cn } from '@/lib/utils';

/**
 * This component serves as a demonstration of the Testero Design System
 * It showcases the various design tokens and components defined in the system
 */
export const DesignSystemDemo: React.FC = () => {
  return (
    <div className="p-8 max-w-5xl mx-auto">
      <h1 className="text-4xl font-bold mb-8">Testero Design System Demo</h1>
      
      {/* Color System Demo */}
      <section className="mb-12">
        <h2 className="text-2xl font-semibold mb-4">Color System</h2>
        
        <div className="mb-6">
          <h3 className="text-xl font-medium mb-2">Primary Colors</h3>
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
            {Object.entries(colors.primary).map(([key, value]) => (
              <div key={key} className="flex flex-col items-center">
                <div 
                  className="w-16 h-16 rounded-md mb-2 border border-slate-200" 
                  style={{ backgroundColor: value }}
                />
                <span className="text-sm">{key}</span>
                <span className="text-xs text-slate-500">{value}</span>
              </div>
            ))}
          </div>
        </div>
        
        <div className="mb-6">
          <h3 className="text-xl font-medium mb-2">Accent Colors</h3>
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
            {Object.entries(colors.accent).map(([key, value]) => (
              <div key={key} className="flex flex-col items-center">
                <div 
                  className="w-16 h-16 rounded-md mb-2 border border-slate-200" 
                  style={{ backgroundColor: value }}
                />
                <span className="text-sm">{key}</span>
                <span className="text-xs text-slate-500">{value}</span>
              </div>
            ))}
          </div>
        </div>
      </section>
      
      {/* Typography Demo */}
      <section className="mb-12">
        <h2 className="text-2xl font-semibold mb-4">Typography</h2>
        
        <div className="space-y-4">
          <div>
            <h1 className="text-7xl font-extrabold leading-tight">Heading 1</h1>
            <p className="text-slate-500">typography.heading.h1</p>
          </div>
          
          <div>
            <h2 className="text-5xl font-bold leading-tight">Heading 2</h2>
            <p className="text-slate-500">typography.heading.h2</p>
          </div>
          
          <div>
            <h3 className="text-3xl font-semibold leading-snug">Heading 3</h3>
            <p className="text-slate-500">typography.heading.h3</p>
          </div>
          
          <div>
            <h4 className="text-2xl font-semibold leading-snug">Heading 4</h4>
            <p className="text-slate-500">typography.heading.h4</p>
          </div>
          
          <div>
            <p className="text-2xl leading-relaxed">Body Large</p>
            <p className="text-slate-500">typography.body.large</p>
          </div>
          
          <div>
            <p className="text-lg leading-relaxed">Body Default</p>
            <p className="text-slate-500">typography.body.default</p>
          </div>
          
          <div>
            <p className="text-base leading-relaxed">Body Small</p>
            <p className="text-slate-500">typography.body.small</p>
          </div>
          
          <div>
            <p className="text-sm leading-relaxed">Caption</p>
            <p className="text-slate-500">typography.body.caption</p>
          </div>
        </div>
      </section>
      
      {/* Button Demo */}
      <section className="mb-12">
        <h2 className="text-2xl font-semibold mb-4">Buttons</h2>
        
        <div className="space-y-6">
          <div className="space-y-2">
            <h3 className="text-xl font-medium">Primary Buttons</h3>
            <div className="flex flex-wrap gap-4">
              <button className={cn(
                "px-3 py-2 bg-orange-500 text-white rounded",
                "hover:bg-orange-600 focus:ring-2 focus:ring-orange-200"
              )}>Primary Small</button>
              
              <button className={cn(
                "px-4 py-3 bg-orange-500 text-white rounded font-semibold",
                "hover:bg-orange-600 focus:ring-2 focus:ring-orange-200"
              )}>Primary Default</button>
              
              <button className={cn(
                "px-6 py-4 bg-orange-500 text-white rounded-md text-lg font-semibold",
                "hover:bg-orange-600 focus:ring-2 focus:ring-orange-200"
              )}>Primary Large</button>
              
              <button className={cn(
                "px-4 py-3 bg-orange-300 text-white rounded font-semibold cursor-not-allowed"
              )} disabled>Primary Disabled</button>
            </div>
          </div>
          
          <div className="space-y-2">
            <h3 className="text-xl font-medium">Secondary Buttons</h3>
            <div className="flex flex-wrap gap-4">
              <button className={cn(
                "px-3 py-2 bg-slate-100 text-slate-800 rounded",
                "hover:bg-slate-200 focus:ring-2 focus:ring-slate-200"
              )}>Secondary Small</button>
              
              <button className={cn(
                "px-4 py-3 bg-slate-100 text-slate-800 rounded font-semibold",
                "hover:bg-slate-200 focus:ring-2 focus:ring-slate-200"
              )}>Secondary Default</button>
              
              <button className={cn(
                "px-6 py-4 bg-slate-100 text-slate-800 rounded-md text-lg font-semibold",
                "hover:bg-slate-200 focus:ring-2 focus:ring-slate-200"
              )}>Secondary Large</button>
            </div>
          </div>
          
          <div className="space-y-2">
            <h3 className="text-xl font-medium">Outline Buttons</h3>
            <div className="flex flex-wrap gap-4">
              <button className={cn(
                "px-3 py-2 bg-transparent border border-slate-300 text-slate-800 rounded",
                "hover:bg-slate-100 focus:ring-2 focus:ring-slate-200"
              )}>Outline Small</button>
              
              <button className={cn(
                "px-4 py-3 bg-transparent border border-slate-300 text-slate-800 rounded font-semibold",
                "hover:bg-slate-100 focus:ring-2 focus:ring-slate-200"
              )}>Outline Default</button>
              
              <button className={cn(
                "px-6 py-4 bg-transparent border border-slate-300 text-slate-800 rounded-md text-lg font-semibold",
                "hover:bg-slate-100 focus:ring-2 focus:ring-slate-200"
              )}>Outline Large</button>
            </div>
          </div>
          
          <div className="space-y-2">
            <h3 className="text-xl font-medium">Text Buttons</h3>
            <div className="flex flex-wrap gap-4">
              <button className={cn(
                "px-2 py-1 text-orange-500 hover:underline"
              )}>Text Button Small</button>
              
              <button className={cn(
                "px-2 py-1 text-orange-500 hover:underline font-semibold"
              )}>Text Button Default</button>
              
              <button className={cn(
                "px-2 py-1 text-orange-500 hover:underline text-lg font-semibold"
              )}>Text Button Large</button>
            </div>
          </div>
        </div>
      </section>
      
      {/* Card Demo */}
      <section className="mb-12">
        <h2 className="text-2xl font-semibold mb-4">Cards</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <div className={cn(
            "bg-white p-6 rounded-lg border border-slate-200 shadow"
          )}>
            <h3 className="text-lg font-semibold mb-2">Default Card</h3>
            <p>This is a standard card with default styling.</p>
          </div>
          
          <div className={cn(
            "bg-white p-6 rounded-lg border border-slate-200",
            "shadow-lg"
          )}>
            <h3 className="text-lg font-semibold mb-2">Elevated Card</h3>
            <p>This card has increased elevation with deeper shadows.</p>
          </div>
          
          <div className={cn(
            "bg-white p-6 rounded-lg border border-slate-200",
            "transform transition-all duration-300 hover:shadow-lg hover:-translate-y-1 cursor-pointer"
          )}>
            <h3 className="text-lg font-semibold mb-2">Interactive Card</h3>
            <p>This card has hover effects for interactive elements.</p>
          </div>
        </div>
      </section>
      
      {/* Form Elements Demo */}
      <section className="mb-12">
        <h2 className="text-2xl font-semibold mb-4">Form Elements</h2>
        
        <div className="space-y-6 max-w-md">
          <div>
            <label className="block text-sm font-medium text-slate-700 mb-1">
              Text Input
            </label>
            <input 
              type="text" 
              className={cn(
                "w-full px-4 py-2 border border-slate-300 rounded",
                "focus:outline-none focus:ring-2 focus:ring-orange-100 focus:focus:border-orange-500"
              )}
              placeholder="Enter text here" 
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-slate-700 mb-1">
              Email Input
            </label>
            <input 
              type="email" 
              className={cn(
                "w-full px-4 py-2 border border-slate-300 rounded",
                "focus:outline-none focus:ring-2 focus:ring-orange-100 focus:focus:border-orange-500"
              )}
              placeholder="Enter email" 
            />
            <p className="text-sm text-slate-500 mt-1">We&apos;ll never share your email with anyone else.</p>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-slate-700 mb-1">
              Select Input
            </label>
            <select 
              className={cn(
                "w-full px-4 py-2 border border-slate-300 rounded",
                "focus:outline-none focus:ring-2 focus:ring-orange-100 focus:focus:border-orange-500"
              )}
            >
              <option>Option 1</option>
              <option>Option 2</option>
              <option>Option 3</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-slate-700 mb-1">
              Textarea
            </label>
            <textarea 
              className={cn(
                "w-full px-4 py-2 border border-slate-300 rounded",
                "focus:outline-none focus:ring-2 focus:ring-orange-100 focus:focus:border-orange-500"
              )}
              rows={3}
              placeholder="Enter longer text here" 
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-slate-700 mb-1">
              Input with Error
            </label>
            <input 
              type="text" 
              className={cn(
                "w-full px-4 py-2 border border-red-500 rounded",
                "focus:outline-none focus:ring-2 focus:ring-red-100 focus:focus:border-red-500"
              )}
              placeholder="Enter text here" 
            />
            <p className="text-sm text-red-500 mt-1">This field is required</p>
          </div>
        </div>
      </section>
      
      {/* Badge Demo */}
      <section className="mb-12">
        <h2 className="text-2xl font-semibold mb-4">Badges</h2>
        
        <div className="flex flex-wrap gap-4">
          <span className={cn(
            "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium",
            "bg-slate-100 text-slate-800"
          )}>
            Default
          </span>
          
          <span className={cn(
            "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium",
            "bg-orange-100 text-orange-800"
          )}>
            Primary
          </span>
          
          <span className={cn(
            "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium",
            "bg-green-100 text-green-800"
          )}>
            Success
          </span>
          
          <span className={cn(
            "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium",
            "bg-yellow-100 text-yellow-800"
          )}>
            Warning
          </span>
          
          <span className={cn(
            "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium",
            "bg-red-100 text-red-800"
          )}>
            Error
          </span>
        </div>
      </section>
    </div>
  );
};

export default DesignSystemDemo;
</file>

<file path="docs/artifact-registry-setup.md">
# GCP Artifact Registry Setup for Docker Images

This document provides detailed information about the Artifact Registry repository used for storing Docker images in the Testero project.

## Repository Details

- **Name**: testero
- **Region**: us-central1
- **Format**: Docker
- **Full Path**: us-central1-docker.pkg.dev/[PROJECT_ID]/testero
- **Purpose**: Stores Docker images for the Testero frontend application

## Setup Instructions

We've provided a script to create and configure the Artifact Registry repository:

```bash
# Make the script executable
chmod +x scripts/setup-artifact-registry.sh

# Run the script
./scripts/setup-artifact-registry.sh
```

This script will:
1. Check if the Artifact Registry API is enabled and enable it if necessary
2. Check if the repository already exists
3. Create a Docker repository named `testero` in the us-central1 region if it doesn't exist
4. Set up lifecycle policies for automatic cleanup

## Lifecycle Policies

The repository should be configured with the following lifecycle policies (these need to be set up manually in the GCP Console):

1. **keep-recent-versions**:
   - Action: DELETE
   - Condition: `versionCount>10 AND tag!~^latest$ AND tag!~^v[0-9]+\.[0-9]+\.[0-9]+$`
   - Description: Keeps only the 10 most recent versions of each image, excluding images tagged as 'latest' or with semantic version tags (e.g., v1.2.3)

2. **cleanup-untagged**:
   - Action: DELETE
   - Condition: `tag='' AND createTime<-P14D`
   - Description: Removes untagged images that are older than 14 days

These policies help manage storage costs and keep the repository clean by automatically removing old and unused images.

**Note**: The setup script previously attempted to set these policies automatically, but this feature is not available in the standard gcloud CLI. You'll need to configure these policies manually through the GCP Console.

## Usage

### Pushing Images Manually

To push Docker images to the repository manually:

```bash
# Configure Docker to use Google Cloud as a credential helper
gcloud auth configure-docker us-central1-docker.pkg.dev

# Build and tag your image
docker build -t us-central1-docker.pkg.dev/[PROJECT_ID]/testero/frontend:[TAG] .

# Push the image to Artifact Registry
docker push us-central1-docker.pkg.dev/[PROJECT_ID]/testero/frontend:[TAG]
```

Replace `[PROJECT_ID]` with your GCP project ID and `[TAG]` with your desired image tag.

### GitHub Actions Integration

The GitHub Actions workflow automatically builds and pushes Docker images to this repository. The workflow is configured in `.github/workflows/deploy-to-cloud-run.yml`.

The workflow:
1. Authenticates to Google Cloud using a service account
2. Configures Docker for Artifact Registry
3. Builds the Docker image
4. Pushes the image to the Artifact Registry repository
5. Deploys the image to Cloud Run

#### Required GitHub Secrets

For the GitHub Actions workflow to access the Artifact Registry, you need to set up the following secrets in your GitHub repository:

- `GCP_PROJECT_ID`: Your Google Cloud project ID
- `GCP_SA_KEY`: The service account key JSON file content
- `GCP_REGION`: The region where your Artifact Registry is located (e.g., `us-central1`)
- `ARTIFACT_REPOSITORY`: The name of your Artifact Registry repository (e.g., `testero`)
- `SERVICE_NAME`: The name of your Cloud Run service (e.g., `testero-frontend`)

To add these secrets:
1. Go to your GitHub repository
2. Navigate to Settings > Secrets and variables > Actions
3. Click "New repository secret"
4. Add each secret with its corresponding value

### Viewing Images in Artifact Registry

To view the images in the repository:

1. Go to the [GCP Console](https://console.cloud.google.com/)
2. Navigate to Artifact Registry > Repositories
3. Click on the "testero" repository
4. Browse the images and tags

## Access Control

Access to the Artifact Registry repository is managed through IAM roles:

- The GitHub Actions service account has the `artifactregistry.admin` role, allowing it to push and manage images
- Other team members may need the following roles:
  - `artifactregistry.reader`: To pull images
  - `artifactregistry.writer`: To push images
  - `artifactregistry.admin`: To manage the repository and its policies

To grant access to a user or service account:

```bash
gcloud artifacts repositories add-iam-policy-binding testero \
  --location=us-central1 \
  --member=user:user@example.com \
  --role=roles/artifactregistry.reader
```

## Best Practices

1. **Use specific tags**: Always tag your images with specific versions or commit hashes rather than just using 'latest'
2. **Use semantic versioning**: For release images, use semantic version tags (e.g., v1.2.3)
3. **Clean up unused images**: Although lifecycle policies automatically clean up old images, manually delete images that are no longer needed
4. **Scan for vulnerabilities**: Regularly scan your images for security vulnerabilities

## Troubleshooting

If you encounter issues with the Artifact Registry:

1. **Authentication issues**:
   - Run `gcloud auth configure-docker us-central1-docker.pkg.dev` to refresh credentials
   - Check that your service account has the necessary permissions

2. **Push failures**:
   - Verify that the repository exists
   - Check that you have the correct permissions
   - Ensure your Docker image is built correctly

3. **Pull failures**:
   - Verify that the image exists in the repository
   - Check that you have the correct permissions
   - Ensure you're using the correct image path and tag
</file>

<file path="docs/github-actions-deployment.md">
# GitHub Actions Deployment to GCP Cloud Run

This document explains how to set up GitHub Actions for deploying the Testero frontend to Google Cloud Platform (GCP) Cloud Run.

## Overview

We're using GitHub Actions to automate the deployment process to GCP Cloud Run. This setup:

1. Creates a dedicated GCP service account with minimal required permissions
2. Uses the service account credentials as GitHub secrets
3. Configures a GitHub Actions workflow to build and deploy the application

## Prerequisites

- A GCP project with billing enabled
- Owner or Editor permissions on the GCP project
- Admin access to the GitHub repository
- Google Cloud SDK (gcloud) installed locally

## Step 1: Create a GCP Service Account

We've provided a script to create a service account with the necessary permissions:

```bash
# Make the script executable
chmod +x scripts/create-github-actions-service-account.sh

# Run the script
./scripts/create-github-actions-service-account.sh
```

This script will:
1. Check if the service account already exists
2. Create a service account named `github-actions-deployer` if it doesn't exist
3. Wait for the service account to propagate in GCP systems
4. Assign the following IAM roles:
   - Cloud Run Admin (`roles/run.admin`)
   - Storage Admin (`roles/artifactregistry.admin`)
   - Service Account User (`roles/iam.serviceAccountUser`)
5. Generate and download a JSON key file

> **Note:** The script is idempotent and can be run multiple times safely. It will skip the creation step if the service account already exists and proceed with assigning roles and generating a key.

## Step 2: Add GitHub Secrets

After running the script, you'll have a JSON key file. You need to add this as a secret in your GitHub repository:

1. Go to your GitHub repository
2. Navigate to Settings > Secrets and variables > Actions
3. Click "New repository secret"
4. Add the following secrets:
   - Name: `GCP_SA_KEY`
     - Value: *[Paste the entire contents of the JSON key file]*
   - Name: `GCP_PROJECT_ID`
     - Value: *[Your GCP project ID]*
   - Name: `GCP_REGION`
     - Value: *[Your GCP region, e.g., "us-central1"]*
   - Name: `ARTIFACT_REPOSITORY`
     - Value: *[Your Artifact Registry repository name, e.g., "testero"]*
   - Name: `SERVICE_NAME`
     - Value: *[Your Cloud Run service name, e.g., "testero-frontend"]*

## Step 3: Set up Artifact Registry Repository

Before the GitHub Actions workflow can push Docker images, you need to set up an Artifact Registry repository:

```bash
# Make the script executable
chmod +x scripts/setup-artifact-registry.sh

# Run the script
./scripts/setup-artifact-registry.sh
```

This script will:
1. Check if the repository already exists
2. Create a Docker repository named `testero` in the us-central1 region if it doesn't exist
3. Set up lifecycle policies for automatic cleanup:
   - Keep only the 10 most recent versions (excluding 'latest' and semantic version tags)
   - Remove untagged images older than 14 days

## Step 4: GitHub Actions Workflow

We've created a comprehensive CI/CD pipeline in the GitHub Actions workflow file at `.github/workflows/deploy-to-cloud-run.yml`. This workflow is divided into multiple jobs with dependencies and conditional execution:

### Workflow Triggers

The workflow is triggered by:
- Pushes to the main branch
- Pull requests targeting the main branch
- Manual triggering via the GitHub Actions UI

### Job 1: Code Quality

This job runs code quality checks:
1. Sets up Node.js environment
2. Installs dependencies
3. Runs ESLint for code linting
4. Runs TypeScript type checking

### Job 2: Build and Push

This job runs after the Code Quality job succeeds:
1. Sets up Docker Buildx
2. Authenticates to GCP using the service account key
3. Configures Docker for Artifact Registry
4. Builds the Docker image
5. Pushes the image to Artifact Registry
6. Outputs the image reference for the next job

This job runs on both main branch pushes and pull requests, allowing verification of the build process without deployment.

### Job 3: Deploy to Cloud Run

This job runs after the Build and Push job succeeds, but only on the main branch:
1. Authenticates to GCP using the service account key
2. Deploys the image to Cloud Run
3. Outputs the deployment URL
4. Provides deployment status notifications

The Cloud Run service is configured with:
- 1GB memory
- 1 vCPU
- Min instances: 0 (scales to zero when not in use)
- Max instances: 10
- Port: 3000
- Environment: Production

### Conditional Execution

- Code Quality checks run on all triggers
- Build and Push runs only if Code Quality passes
- Deploy to Cloud Run runs only if Build and Push passes AND it's a push to the main branch

## Step 5: Verify the Deployment

After pushing to the main branch, you can verify the deployment:

1. Go to the "Actions" tab in your GitHub repository
2. Click on the latest workflow run
3. Check the logs for any errors
4. The deployment URL will be displayed in the "Show Output" step

## Security Considerations

- The service account has been granted only the minimum permissions needed for deployment
- The key file should never be committed to the repository
  - We've added entries to `.gitignore` to prevent accidental commits of key files:
    ```
    # GCP service account keys
    github-actions-key.json
    *-key.json
    *-credentials.json
    ```
- The key can be rotated by creating a new key and updating the GitHub secret
- Consider setting an expiration date on the key and rotating it regularly

## Troubleshooting

If you encounter issues with the deployment:

1. Check the GitHub Actions logs for detailed error messages
2. Verify that the service account has the correct permissions
3. Ensure the Artifact Registry repository exists
4. Check that the Cloud Run service is configured correctly

## Additional Resources

- [GitHub Actions for GCP documentation](https://github.com/google-github-actions/auth)
- [Cloud Run deployment documentation](https://cloud.google.com/run/docs/deploying)
- [GCP service account best practices](https://cloud.google.com/iam/docs/best-practices-for-managing-service-account-keys)
</file>

<file path="lib/content/faqData.ts">
export type FaqEntry = {
  pillar: string;
  question: string;
  answer: string;
  slug: string;
  answerSnippet: string;
  internal_link: string;
  data_points: {
    search_volume_us: number;
    keyword_difficulty: number;
    cpc_usd: number;
    exam_length_minutes: number | null;
    num_questions: number | null;
    cost_usd: number | null;
    passing_score_pct: number | null;
    salary_uplift_pct: number | null;
  };
  citations: string[];
};

export const faqData: FaqEntry[] = [
  {
    pillar: "Cloud Leader",
    question: "What are Google Cloud certifications?",
    answer: "Google Cloud certifications are industry-recognized credentials that validate an individual's knowledge and skills in cloud technology, specifically focusing on Google Cloud products and services and their implementation within organizations. These certifications are designed to measure proficiency at performing specific job roles using Google Cloud technology, based on rigorous industry-standard methods and detailed job task analyses.\n\nObtaining a [Google Cloud certification](/content/hub/google-cloud-certification-guide) is widely considered valuable for career advancement. According to Google's own data, a significant majority of Google Cloud learners report that having a certification contributes to faster promotion and provides them with the skills needed for in-demand roles. Furthermore, a large percentage of leaders in organizations using Google Cloud express a preference for recruiting and hiring professionals who hold these certifications, highlighting their value in the job market.\n\nGoogle Cloud offers certifications at different levels to cater to various experience levels and job roles:\n*   **Foundational Certification:** This level validates a broad understanding of core cloud concepts and the products, services, tools, features, benefits, and use cases of Google Cloud. It's recommended for candidates with a fundamental understanding of Google Cloud and those in collaborative roles with technical professionals, requiring no technical prerequisites.\n*   **Associate Certification:** This certification validates fundamental skills required to deploy and maintain cloud projects. It's recommended for candidates with at least six months of experience building on Google Cloud, including experience deploying cloud applications, monitoring operations, and managing cloud enterprise solutions.\n*   **Professional Certification:** This is the highest level, validating key technical job functions and advanced skills in the design, implementation, and management of Google Cloud products. This includes specialized certifications for roles like Cloud Architect, Data Engineer, Security Engineer, and more. It's recommended for candidates with three or more years of industry experience, including at least one year using Google Cloud.\n\nGoogle Cloud certifications are typically valid for two years from the date of certification. To maintain certified status, individuals must recertify before their certification expires. Renewal notifications are sent out in the months leading up to the expiration date.\n\nIn summary, Google Cloud certifications serve as a robust validation of cloud expertise, significantly enhancing career prospects, demonstrating valuable skills to employers, and providing a structured path for professional development in the rapidly growing field of cloud computing. You can find more information and register for exams via the [Google Cloud website](/content/hub/google-cloud-certification-guide).",
    slug: "what-is-google-cloud-certification",
    answerSnippet: "Google Cloud certifications validate your expertise...",
    internal_link: "/content/hub/google-cloud-certification-guide.md",
    data_points: {
      "search_volume_us": 10000,
      "keyword_difficulty": 60,
      "cpc_usd": 5.00,
      "exam_length_minutes": 120,
      "num_questions": 50,
      "cost_usd": 200,
      "passing_score_pct": 70,
      "salary_uplift_pct": null
    },
    citations: [
      "https://cloud.google.com/learn/certification",
      "https://www.coursera.org/professional-certificates/google-cloud-digital-leader"
    ]
  },
  {
    pillar: "Cloud Leader",
    question: "Are Google Cloud certifications worth it?",
    answer: "Yes, generally speaking, Google Cloud certifications are widely considered worth the investment of time, effort, and money for individuals looking to advance their careers in the IT and cloud computing fields. These certifications offer several key benefits that contribute to their value.\n\nOne of the most significant advantages is the potential for higher salary prospects. According to various reports and studies, professionals holding Google Cloud certifications are among the highest earners in the IT industry, both in the United States and globally. This financial return on investment is a major factor for many pursuing certification.\n\nBeyond salary, Google Cloud certifications provide strong industry recognition. They are globally acknowledged credentials that add credibility to a professional's resume and demonstrate a validated level of expertise in Google Cloud Platform (GCP). This recognition is highly valued by employers.\n\nEnhanced career opportunities are another compelling reason to get certified. As more companies migrate their operations to the cloud, the demand for skilled cloud professionals is rapidly increasing. Google Cloud certifications can open doors to a variety of in-demand roles, such as Cloud Engineer, Solutions Architect, DevOps Specialist, and more. Employers often prefer certified candidates as it gives them confidence in an individual's ability to handle cloud projects and contribute effectively to digital transformation initiatives.\n\nFurthermore, the process of preparing for a Google Cloud certification exam helps individuals develop practical, hands-on skills that are directly applicable to real-world projects. This skill development enhances proficiency and confidence in working with GCP.\n\nWhile there are costs associated with exam fees and preparation materials, and a time investment is required, the potential benefits in terms of career advancement, earning potential, and skill development often outweigh these drawbacks. The need for regular updates and recertification to stay current with evolving cloud technology is also a factor to consider as an ongoing investment in one's career.\n\nUltimately, the worth of a Google Cloud certification depends on individual career goals and current skill levels. However, for those aiming for a career in cloud computing or seeking to validate their existing expertise, a Google Cloud certification can provide a significant competitive edge and contribute to long-term professional success. You can explore the various certification options and their roadmaps on the [Google Cloud website](/content/hub/google-cloud-digital-leader-certification-roadmap-2025).",
    slug: "is-google-cloud-certification-worth-it",
    answerSnippet: "Generally, yes. Google Cloud certifications...",
    internal_link: "/content/hub/google-cloud-digital-leader-certification-roadmap-2025.md",
    data_points: {
      "search_volume_us": 4000,
      "keyword_difficulty": 50,
      "cpc_usd": 4.00,
      "exam_length_minutes": null,
      "num_questions": null,
      "cost_usd": null,
      "passing_score_pct": null,
      "salary_uplift_pct": null
    },
    citations: [
      "https://cloud.google.com/learn/certification",
      "https://www.testpreptraining.com/blog/is-google-cloud-digital-leader-certification-worth-it/"
    ]
  },
  {
    pillar: "Cloud Leader",
    question: "What are the five sections of the Associate Cloud Engineer certification by Google?",
    answer: "The Google Associate Cloud Engineer certification exam assesses a candidate's ability to perform tasks related to the core Google Cloud Platform (GCP) services. The exam is structured around five key sections, each covering critical areas of cloud engineering on Google Cloud. These sections are designed to validate a candidate's foundational skills in deploying, monitoring, and maintaining projects on Google Cloud.\n\nThe five sections covered in the Google Associate Cloud Engineer exam are:\n\n1.  **Setting up your cloud environment:** This section focuses on tasks related to creating and managing cloud projects, billing accounts, and using the Google Cloud Console and command-line interface. It includes understanding organizational policies, resource hierarchy, and using tools like `gcloud` and `gsutil`.\n2.  **Planning and configuring a cloud solution:** This involves selecting the appropriate compute, storage, database, and networking resources for a given scenario. Candidates are expected to understand different service options (e.g., Compute Engine, GKE, Cloud Storage, Cloud SQL) and their use cases, as well as planning for factors like cost, performance, and scalability.\n3.  **Deploying and implementing a cloud solution:** This section covers deploying applications and services to Google Cloud, including using deployment tools and techniques. It involves deploying compute resources, implementing storage and databases, and configuring networking components.\n4.  **Ensuring successful operation of a cloud solution:** This focuses on monitoring, logging, and troubleshooting deployed applications and infrastructure. Candidates should be familiar with Cloud Monitoring, Cloud Logging, and debugging techniques to ensure the health and performance of cloud solutions.\n5.  **Configuring access and security:** This section covers managing identity and access management (IAM), configuring security controls, and ensuring data security. It includes understanding roles and permissions, managing service accounts, and implementing security best practices on Google Cloud.\n\nEach section includes various subtopics and objectives that candidates should study to prepare for the exam. A detailed exam guide is available on the official Google Cloud website, which provides a comprehensive blueprint of the knowledge, skills, and abilities assessed in the certification exam. Preparing across all five domains is crucial for success in obtaining the Google Associate Cloud Engineer certification. You can find more details about the exam content and preparation resources on the [Google Cloud website](/content/hub/google-professional-machine-learning-engineer-certification-roadmap-2025).",
    slug: "what-are-the-five-sections-of-the-associate-cloud-engineer-certification-by-google",
    answerSnippet: "The Google Associate Cloud Engineer exam covers...",
    internal_link: "/content/hub/google-professional-machine-learning-engineer-certification-roadmap-2025.md",
    data_points: {
      "search_volume_us": 800,
      "keyword_difficulty": 25,
      "cpc_usd": 1.50,
      "exam_length_minutes": 120,
      "num_questions": null,
      "cost_usd": 125,
      "passing_score_pct": null,
      "salary_uplift_pct": null
    },
    citations: [
      "https://services.google.com/fh/files/misc/associate_cloud_engineer_exam_guide_english.pdf"
    ]
  },
  {
    pillar: "Cloud Leader",
    question: "(Bonus) How much does Google Cloud Digital Leader cost?",
    answer: "The Google Cloud Digital Leader certification exam is an entry-level certification designed to validate foundational knowledge of cloud technology and Google Cloud products and services. The cost for the Google Cloud Digital Leader certification exam is $99 USD. This fee covers the cost of taking the exam itself. It's important to note that this cost is for the exam only and does not include any expenses for training materials, practice exams, or courses that individuals might choose to use for preparation.\n\nWhile the base cost of the exam is $99 USD, candidates should be aware that there might be additional costs depending on their location and the testing center. These could include applicable taxes or fees charged by the testing provider. It's always recommended to check the official Google Cloud certification website or the chosen testing center's website for the most accurate and up-to-date pricing information for your specific region.\n\nCompared to some other professional-level IT certifications, the Google Cloud Digital Leader certification is relatively affordable, making it an accessible option for individuals who are new to cloud computing or looking to validate their foundational cloud knowledge without a significant financial investment. This lower cost aligns with its positioning as a foundational certification aimed at a broad audience, including those in non-technical roles who need to understand cloud concepts and how Google Cloud can support digital transformation.\n\nPreparation for the exam can involve various resources, some of which may have associated costs. These can include official Google Cloud training courses, online learning platforms, study guides, and practice exams. The total investment for obtaining the certification will therefore be the sum of the exam fee and any chosen preparation materials.\n\nIn summary, the Google Cloud Digital Leader certification exam costs $99 USD, plus any applicable taxes or fees. This makes it a cost-effective way to gain an industry-recognized credential that demonstrates a foundational understanding of Google Cloud. You can find more details about the exam and registration on the [Google Cloud website](/content/hub/the-2025-google-cloud-digital-leader-certification-roadmap).",
    slug: "how-much-does-google-cloud-digital-leader-cost",
    answerSnippet: "The Google Cloud Digital Leader certification...",
    internal_link: "/content/hub/the-2025-google-cloud-digital-leader-certification-roadmap.md",
    data_points: {
      "search_volume_us": 1200,
      "keyword_difficulty": 15,
      "cpc_usd": 1.00,
      "exam_length_minutes": 90,
      "num_questions": null,
      "cost_usd": 99,
      "passing_score_pct": null,
      "salary_uplift_pct": null
    },
    citations: [
      "https://www.datacamp.blog/google-cloud-certification"
    ]
  },
  {
    pillar: "Cloud Leader",
    question: "(Bonus) How do you register for Google Cloud certifications?",
    answer: "Registering for a Google Cloud certification exam involves a straightforward process primarily managed through Google Cloud's official website and their testing partner, Kryterion, via the Webassessor platform. Exams can be taken either at a physical test center or online with a remote proctor.\n\nHere are the general steps to register for a Google Cloud certification exam:\n\n1.  **Visit the Google Cloud Certification Website:** Start by navigating to the official Google Cloud certification website. Here, you can explore the different certifications offered and find the specific exam you wish to take.\n2.  **Select Your Exam and Register:** Once you've chosen your exam, locate the registration link, typically found on the exam's dedicated page. Clicking 'Register' will usually redirect you to the candidate management portal, CM Connect.\n3.  **Login or Create a CM Connect Account:** If you already have a CM Connect account, log in. If not, you will need to follow the on-screen instructions to create a new account. Ensure that the legal first and last name in your account exactly matches the name on the government-issued photo ID you plan to use for verification on exam day. Mismatches can result in being denied from taking the exam and forfeiture of your exam fee.\n4.  **Access Webassessor:** From your CM Connect dashboard, you will typically find an option to 'Schedule / Launch an Exam', which will take you to the Webassessor platform, managed by Kryterion.\n5.  **Select Exam and Delivery Method:** Within the Webassessor catalog, select the specific Google Cloud exam you intend to take. You will then choose your preferred exam delivery method: either remotely proctored online or at an available physical testing center.\n6.  **Choose Date, Time, and Location:** Select a convenient date and time for your exam. If you chose a testing center, you will also need to select a location. Review the available slots and make your selection.\n7.  **Confirm Payment:** Complete the payment process for the exam fee. The cost varies depending on the certification level (e.g., Foundational, Associate, Professional).\n8.  **Receive Confirmation:** After successful registration and payment, Kryterion will send you a confirmation email. This email will contain important details, including a unique Test Taker Authorization Code, which is required to launch your exam, especially if you are taking it at a testing center.\n\nIt's highly recommended to review the testing requirements for online proctored exams or the specific rules of your chosen testing center well in advance. Also, familiarize yourself with the retake policy and any waiting periods between exam attempts. By following these steps, you can successfully register and schedule your Google Cloud certification exam. You can find more information and register for exams via the [Google Cloud website](/content/hub/google-cloud-certification-guide).",
    slug: "how-do-you-register-for-google-cloud-certification",
    answerSnippet: "Register via the Google Cloud website...",
    internal_link: "/content/hub/google-cloud-certification-guide.md",
    data_points: {
      "search_volume_us": 900,
      "keyword_difficulty": 20,
      "cpc_usd": 1.20,
      "exam_length_minutes": null,
      "num_questions": null,
      "cost_usd": null,
      "passing_score_pct": null,
      "salary_uplift_pct": null
    },
    citations: [
      "https://support.google.com/cloud-certification/answer/9907651?hl=en"
    ]
  },
  {
    pillar: "Data Analytics",
    question: "How long does it take to complete the Google Data Analytics certification?",
    answer: "The Google Data Analytics Professional Certificate, hosted on platforms like Coursera, is designed to equip individuals with the skills needed for entry-level data analytics roles. The estimated time to complete the entire certification program is approximately 155 hours of study. Google and Coursera suggest that if a learner dedicates about 10 hours per week to the coursework, they can complete the certification in under six months.\n\nThe program is structured into eight courses, each covering different aspects of data analysis, and they are typically taken in sequence as the knowledge builds from one course to the next. The estimated duration for each course varies, contributing to the overall time commitment. For example, introductory courses like \"Foundations: Data, Data, Everywhere\" might take around 14 hours, while more in-depth courses such as \"Data Analysis with R Programming\" could require up to 37 hours. The program concludes with a capstone project, estimated to take about 8 hours, where learners apply the skills they've gained to a case study.\n\nIt's important to note that the six-month timeframe and the 155-hour estimate are averages. The actual time it takes for an individual to complete the certification can vary based on several factors. These include a learner's prior knowledge and experience in data analysis, their learning pace, the amount of time they can dedicate each week, and how deeply they engage with the course materials and hands-on exercises. Some individuals with relevant backgrounds might move through the material more quickly, while others who are completely new to the field may take longer.\n\nThe flexibility of the online format allows learners to study at their own pace, fitting the coursework around their existing commitments. While the program is designed for completion within six months at a pace of 10 hours per week, learners have the option to accelerate their studies by dedicating more time or extend the duration if needed. The goal is to ensure learners gain a solid understanding of data types, structures, using data to solve problems, data analysis techniques, data storytelling through visualizations, and using tools like R programming, SQL, and Python.\n\nIn summary, while Google estimates the Data Analytics Professional Certificate can be completed in under six months with a commitment of 10 hours per week, the total time investment is approximately 155 hours, and the actual completion time is flexible depending on the individual learner's circumstances and study habits. You can find more details about the program structure and content on the [Google Data Analytics Professional Certificate guide](/content/hub/google-data-analytics-professional-certificate-2025-guide).",
    slug: "how-long-to-complete-google-data-analytics-certification",
    answerSnippet: "Google estimates the Data Analytics...",
    internal_link: "/content/hub/google-data-analytics-professional-certificate-2025-guide.md",
    data_points: {
      "search_volume_us": 6000,
      "keyword_difficulty": 10,
      "cpc_usd": 0.80,
      "exam_length_minutes": null,
      "num_questions": null,
      "cost_usd": null,
      "passing_score_pct": null,
      "salary_uplift_pct": null
    },
    citations: [
      "https://www.coursera.org/professional-certificates/google-data-analytics",
      "https://www.coursera.org/google-career-certificates"
    ]
  },
  {
    pillar: "Data Analytics",
    question: "Is the Google Data Analytics certification worth it?",
    answer: "Yes, the Google Data Analytics Professional Certificate is widely considered a valuable credential, particularly for individuals aiming to start or advance their careers in the field of data analytics. This certification, offered as part of the Google Career Certificates program on platforms like Coursera, is designed to provide foundational knowledge and job-ready skills for entry-level data analyst roles.\n\nOne of the primary reasons for its value is the focus on industry-relevant skills. The curriculum covers essential competencies that data analysts use daily, including data cleaning and preparation, data analysis using tools like Excel and Google Sheets, data visualization with tools such as Tableau and Data Studio, managing large datasets with SQL, and applying advanced analytics techniques using R programming. The program emphasizes hands-on experience through practical assignments and projects, allowing learners to build a portfolio that demonstrates their ability to solve real-world business problems, which is a significant asset in job interviews.\n\nGoogle's strong reputation in the technology industry also adds considerable weight to the certification. Employers recognize the Google brand and trust that the certification provides a solid foundation in data analytics. This can give certified individuals a competitive edge in the job market.\n\nThe certification is particularly beneficial for beginners with no prior experience or formal education in data science or related fields. It provides a structured learning path and covers the entire data analysis process, from asking the right questions to preparing, processing, analyzing, and sharing data-driven insights. The program also includes career advice and case studies to help prepare learners for entry-level positions.\n\nWhile the certification is highly regarded for launching entry-level careers, individuals with some existing experience in data analysis might find it beneficial as a way to formalize their skills or fill knowledge gaps. However, those with a basic understanding of the tools and concepts covered might consider exploring more advanced courses for deeper learning.\n\nUpon completion, graduates gain access to resources like the Google Data Analytics job site and potentially free access to interview preparation tools, further supporting their job search. While a bachelor's or master's degree can still be advantageous, this certification serves as a strong stepping stone and can significantly increase the chances of getting hired, especially when combined with continuous learning and practical experience.\n\nIn conclusion, the Google Data Analytics Professional Certificate is a worthwhile investment for aspiring data analysts, providing essential skills, practical experience, and a recognized credential to help launch a career in this growing field. You can find more details about the program and its benefits on the [Google Data Analytics Professional Certificate guide](/content/hub/google-data-analytics-professional-certificate-2025-guide).",
    slug: "is-google-data-analytics-certification-worth-it",
    answerSnippet: "Yes, the Google Data Analytics...",
    internal_link: "/content/hub/google-data-analytics-professional-certificate-2025-guide.md",
    data_points: {
      "search_volume_us": 10000,
      "keyword_difficulty": 55,
      "cpc_usd": 3.00,
      "exam_length_minutes": null,
      "num_questions": null,
      "cost_usd": null,
      "passing_score_pct": null,
      "salary_uplift_pct": null
    },
    citations: [
      "https://www.coursera.org/professional-certificates/google-data-analytics",
      "https://pangea.ai/resources/is-the-google-data-analytics-certification-worth-it"
    ]
  },
  {
    pillar: "PMLE",
    question: "Is the Google Professional Machine Learning Engineer certification worth it?",
    answer: "The Google Professional Machine Learning Engineer certification is highly valuable, particularly for experienced machine learning professionals, data scientists, and software engineers who work with or plan to work with Google Cloud's ML solutions. This advanced certification, maintained by Google, validates an individual's ability to design, build, and size ML models for solving unique business challenges, as well as their deep familiarity with Google Cloud technologies that enable ML and AI.\n\nFor those already invested in the fields of machine learning and artificial intelligence, obtaining this certification can be a significant asset for career growth. It demonstrates a proven level of expertise in training, deploying, monitoring, and improving ML and AI models within the Google Cloud framework. This is crucial in today's landscape where ML and AI solutions are increasingly integrated into business practices.\n\nThe certification is earned by passing the Professional Machine Learning Engineer exam. The exam was updated in October 2024, reflecting the evolving nature of the field and Google Cloud's offerings. Preparing for this exam ensures that professionals are up-to-date with the latest industry best practices and Google Cloud's ML solutions.\n\nWhile the certification is directly relevant for roles like Machine Learning Engineer, it can also be beneficial for IT professionals in other fields. Understanding how to frame ML problems and architect their solutions is a valuable skill set that can be applied in various contexts, helping companies leverage ML for innovation and problem-solving.\n\nIn summary, for experienced professionals in the ML and AI space, the Google Professional Machine Learning Engineer certification is a worthwhile pursuit. It validates advanced skills, enhances credibility, and can open doors to more opportunities and responsibilities in the rapidly advancing field of machine learning on Google Cloud. You can find more information about the certification and exam on the [Google Cloud website](/content/hub/google-professional-machine-learning-engineer-certification-roadmap-2025).",
    slug: "is-the-google-professional-machine-learning-engineer-certification-worth-it",
    answerSnippet: "Yes, for experienced ML professionals...",
    internal_link: "/content/hub/google-professional-machine-learning-engineer-certification-roadmap-2025.md",
    data_points: {
      "search_volume_us": 1000,
      "keyword_difficulty": 50,
      "cpc_usd": 5.50,
      "exam_length_minutes": 120,
      "num_questions": null,
      "cost_usd": 200,
      "passing_score_pct": null,
      "salary_uplift_pct": null
    },
    citations: [
      "https://www.testpreptraining.com/blog/is-google-professional-machine-learning-engineer-certification-worth-it/",
      "https://www.cbtnuggets.com/blog/certifications/cloud/is-the-google-professional-machine-learning-engineer-worth-it"
    ]
  },
  {
    pillar: "PMLE",
    question: "How long is the Google Professional Machine Learning Engineer exam?",
    answer: "The Google Cloud Professional Machine Learning Engineer certification exam is designed to assess a candidate's expertise in machine learning on Google Cloud Platform. The exam has a duration of 2 hours, which is equivalent to 120 minutes. This time limit is standard for many professional-level IT certification exams and is intended to provide candidates with sufficient time to read and answer the questions carefully.\n\nThe exam format typically includes multiple-choice and multiple-select questions. The number of questions can vary, but candidates should be prepared to answer a range of questions covering the exam's objectives within the allotted time. The 120-minute duration requires candidates to manage their time effectively during the exam to ensure they can attempt all questions.\n\nThe exam covers various domains related to machine learning engineering, including designing, building, and productionizing ML models, as well as optimizing and maintaining ML solutions on Google Cloud. The two-hour timeframe is set to allow for a comprehensive evaluation of a candidate's knowledge and skills across these areas.\n\nCandidates preparing for the exam should practice time management as part of their study routine. Taking practice exams under timed conditions can help simulate the actual exam environment and improve the ability to complete the exam within the two-hour limit. Familiarity with the exam content and the types of questions asked is also crucial for efficient time utilization during the exam.\n\nIn summary, the Google Cloud Professional Machine Learning Engineer certification exam is 2 hours (120 minutes) long. This duration is provided for candidates to demonstrate their proficiency in machine learning on Google Cloud through a series of questions covering key domains of the profession. You can find more details about the exam structure and content on the [Google Cloud website](/content/hub/google-professional-machine-learning-engineer-certification-roadmap-2025).",
    slug: "how-long-is-the-google-ml-engineer-exam",
    answerSnippet: "The Google Cloud Professional...",
    internal_link: "/content/hub/google-professional-machine-learning-engineer-certification-roadmap-2025.md",
    data_points: {
      "search_volume_us": 500,
      "keyword_difficulty": 10,
      "cpc_usd": 1.60,
      "exam_length_minutes": 120,
      "num_questions": null,
      "cost_usd": 200,
      "passing_score_pct": null,
      "salary_uplift_pct": null
    },
    citations: [
      "https://www.datacamp.com/blog/google-cloud-certification"
    ]
  }
];
</file>

<file path="lib/content/loader.ts">
import fs from 'fs';
import path from 'path';
import matter from 'gray-matter';
import { remark } from 'remark';
// html is not used since we're using the rehype pipeline
// import html from 'remark-html';
import remarkGfm from 'remark-gfm';
import remarkRehype from 'remark-rehype';
import rehypeRaw from 'rehype-raw';
import rehypeStringify from 'rehype-stringify';
import { cache } from 'react';

export interface ContentMeta {
  title: string;
  description: string;
  date: string;
  lastModified?: string;
  author?: string;
  category?: string;
  tags?: string[];
  slug: string;
  type: 'hub' | 'spoke';
  hubSlug?: string; // For spoke content to reference its hub
  spokeOrder?: number; // For ordering spokes within a hub
  coverImage?: string;
  readingTime?: number;
}

export interface Content {
  slug: string;
  content: string;
  meta: ContentMeta;
}

// Root directories for content
const HUB_CONTENT_DIR = path.join(process.cwd(), 'app/content/hub');
const SPOKE_CONTENT_DIR = path.join(process.cwd(), 'app/content/spokes');

// Helper function to parse content file
const parseContentFile = async (filePath: string, slug: string, type: 'hub' | 'spoke'): Promise<Content> => {
  const fileContents = fs.readFileSync(filePath, 'utf8');
  const { data, content } = matter(fileContents);
  
  // Normalize special characters before processing
  const normalizedContent = content
    // Replace non-breaking hyphens with regular hyphens
    .replace(/‑/g, '-')
    // Make sure HTML anchors are formatted correctly
    .replace(/<a id="([^"]+)"><\/a>/g, '<a id="$1" class="anchor-link"></a>')
    // Ensure proper spacing around anchor links
    .replace(/<a id="([^"]+)"><\/a>\s*##/g, '<a id="$1" class="anchor-link"></a>\n\n##');
  
  // Process markdown to HTML with improved rendering
  // Using a full rehype pipeline for better HTML output
  const processedContent = await remark()
    .use(remarkGfm) // GitHub Flavored Markdown support for better lists, tables, etc.
    .use(remarkRehype, { allowDangerousHtml: true })
    .use(rehypeRaw) // Parse HTML in the markdown
    .use(rehypeStringify)
    .process(normalizedContent);
  
  const htmlContent = processedContent.toString();
  
  // Calculate reading time (approx. 200 words per minute)
  const wordCount = content.split(/\s+/).length;
  const readingTime = Math.ceil(wordCount / 200);
  
  const meta: ContentMeta = {
    title: data.title,
    description: data.description || '',
    date: data.date ? new Date(data.date).toISOString() : new Date().toISOString(),
    lastModified: data.lastModified ? new Date(data.lastModified).toISOString() : undefined,
    author: data.author,
    category: data.category,
    tags: data.tags,
    slug,
    type,
    hubSlug: data.hubSlug,
    spokeOrder: data.spokeOrder,
    coverImage: data.coverImage,
    readingTime
  };
  
  return {
    slug,
    content: htmlContent,
    meta
  };
};

// Get a single hub content by slug
export const getHubContent = cache(async (slug: string): Promise<Content | null> => {
  try {
    const filePath = path.join(HUB_CONTENT_DIR, `${slug}.md`);
    return await parseContentFile(filePath, slug, 'hub');
  } catch (error) {
    console.error(`Error fetching hub content for slug ${slug}:`, error);
    return null;
  }
});

// Get a single spoke content by slug
export const getSpokeContent = cache(async (slug: string): Promise<Content | null> => {
  try {
    const filePath = path.join(SPOKE_CONTENT_DIR, `${slug}.md`);
    return await parseContentFile(filePath, slug, 'spoke');
  } catch (error) {
    console.error(`Error fetching spoke content for slug ${slug}:`, error);
    return null;
  }
});

// Get all hub content
export const getAllHubContent = cache(async (): Promise<Content[]> => {
  try {
    if (!fs.existsSync(HUB_CONTENT_DIR)) {
      return [];
    }
    
    const fileNames = fs.readdirSync(HUB_CONTENT_DIR);
    const allContent = await Promise.all(
      fileNames
        .filter(fileName => fileName.endsWith('.md'))
        .map(async fileName => {
          const slug = fileName.replace(/\.md$/, '');
          const filePath = path.join(HUB_CONTENT_DIR, fileName);
          return await parseContentFile(filePath, slug, 'hub');
        })
    );
    
    // Sort by date, newest first
    return allContent.sort((a, b) => {
      return new Date(b.meta.date).getTime() - new Date(a.meta.date).getTime();
    });
  } catch (error) {
    console.error('Error fetching all hub content:', error);
    return [];
  }
});

// Get all spoke content
export const getAllSpokeContent = cache(async (): Promise<Content[]> => {
  try {
    if (!fs.existsSync(SPOKE_CONTENT_DIR)) {
      return [];
    }
    
    const fileNames = fs.readdirSync(SPOKE_CONTENT_DIR);
    const allContent = await Promise.all(
      fileNames
        .filter(fileName => fileName.endsWith('.md'))
        .map(async fileName => {
          const slug = fileName.replace(/\.md$/, '');
          const filePath = path.join(SPOKE_CONTENT_DIR, fileName);
          return await parseContentFile(filePath, slug, 'spoke');
        })
    );
    
    // Sort by date, newest first
    return allContent.sort((a, b) => {
      return new Date(b.meta.date).getTime() - new Date(a.meta.date).getTime();
    });
  } catch (error) {
    console.error('Error fetching all spoke content:', error);
    return [];
  }
});

// Get all spoke content for a specific hub
export const getSpokesForHub = cache(async (hubSlug: string): Promise<Content[]> => {
  try {
    const allSpokes = await getAllSpokeContent();
    const hubSpokes = allSpokes.filter(spoke => spoke.meta.hubSlug === hubSlug);
    
    // Sort by spokeOrder if available, otherwise by date
    return hubSpokes.sort((a, b) => {
      if (a.meta.spokeOrder !== undefined && b.meta.spokeOrder !== undefined) {
        return a.meta.spokeOrder - b.meta.spokeOrder;
      }
      return new Date(b.meta.date).getTime() - new Date(a.meta.date).getTime();
    });
  } catch (error) {
    console.error(`Error fetching spokes for hub ${hubSlug}:`, error);
    return [];
  }
});

// Get all content slugs for generating static paths
export const getAllContentSlugs = cache(async () => {
  const hubContent = await getAllHubContent();
  const spokeContent = await getAllSpokeContent();
  
  return {
    hubSlugs: hubContent.map(content => content.slug),
    spokeSlugs: spokeContent.map(content => content.slug)
  };
});
</file>

<file path="lib/gcp/storage.ts">
import { Storage, UploadOptions, SaveOptions, GetSignedUrlConfig } from '@google-cloud/storage';

// Constants
export const BUCKET_NAME = process.env.GCP_STORAGE_BUCKET_NAME || 'testero-media';
export const CDN_URL = process.env.GCP_CDN_URL || 'https://media.testero.ai';

// Initialize GCP Storage client
let storage: Storage;

/**
 * Initialize the GCP Storage client
 * This function handles different authentication methods:
 * 1. Service account key file (for local development)
 * 2. Application Default Credentials (for production/GCP environments)
 */
export function initStorage(): Storage {
  if (storage) return storage;

  const keyFilePath = process.env.GCP_KEY_FILE_PATH;
  
  if (keyFilePath) {
    // Use service account key file if provided
    storage = new Storage({
      keyFilename: keyFilePath,
    });
  } else {
    // Use Application Default Credentials
    storage = new Storage();
  }
  
  return storage;
}

/**
 * Upload a file to GCP Cloud Storage
 * 
 * @param filePath - Local file path
 * @param destination - Destination path in the bucket
 * @param options - Upload options
 * @returns URL of the uploaded file
 */
export async function uploadFile(
  filePath: string,
  destination: string,
  options: {
    contentType?: string;
    cacheControl?: string;
    makePublic?: boolean; // Kept for backward compatibility but not used with uniform bucket-level access
    metadata?: Record<string, string>;
  } = {}
): Promise<string> {
  const {
    contentType,
    cacheControl = 'public, max-age=31536000', // 1 year default cache
    metadata = {},
  } = options;

  // Initialize storage if not already initialized
  const storageClient = initStorage();
  const bucket = storageClient.bucket(BUCKET_NAME);
  
  // Upload options
  const uploadOptions: UploadOptions = {
    destination,
    metadata: {
      cacheControl,
      metadata,
    } as {
      cacheControl?: string;
      contentType?: string;
      metadata?: Record<string, string>;
    },
  };
  
  // Ensure metadata is defined
  if (!uploadOptions.metadata) {
    uploadOptions.metadata = {};
  }
  
  // Add content type if provided
  if (contentType) {
    uploadOptions.metadata.contentType = contentType;
  }

  // Upload the file
  await bucket.upload(filePath, uploadOptions);
  
  // Return the CDN URL
  return `${CDN_URL}/${destination}`;
}

/**
 * Upload a buffer to GCP Cloud Storage
 * 
 * @param buffer - File buffer
 * @param destination - Destination path in the bucket
 * @param options - Upload options
 * @returns URL of the uploaded file
 */
export async function uploadBuffer(
  buffer: Buffer,
  destination: string,
  options: {
    contentType?: string;
    cacheControl?: string;
    makePublic?: boolean; // Kept for backward compatibility but not used with uniform bucket-level access
    metadata?: Record<string, string>;
  } = {}
): Promise<string> {
  const {
    contentType,
    cacheControl = 'public, max-age=31536000', // 1 year default cache
    metadata = {},
  } = options;

  // Initialize storage if not already initialized
  const storageClient = initStorage();
  const bucket = storageClient.bucket(BUCKET_NAME);
  const file = bucket.file(destination);
  
  // File options
  const fileOptions: SaveOptions = {
    resumable: false,
    metadata: {
      cacheControl,
      metadata,
    } as {
      cacheControl?: string;
      contentType?: string;
      metadata?: Record<string, string>;
    },
  };
  
  // Ensure metadata is defined
  if (!fileOptions.metadata) {
    fileOptions.metadata = {};
  }
  
  // Add content type if provided
  if (contentType) {
    fileOptions.metadata.contentType = contentType;
  }

  // Upload the buffer
  await file.save(buffer, fileOptions);
  
  // Return the CDN URL
  return `${CDN_URL}/${destination}`;
}

/**
 * Get a signed URL for a file in GCP Cloud Storage
 * 
 * @param filename - File path in the bucket
 * @param options - Signed URL options
 * @returns Signed URL
 */
export async function getSignedUrl(
  filename: string,
  options: {
    action?: 'read' | 'write' | 'delete' | 'resumable';
    expires?: number; // In seconds
    contentType?: string;
  } = {}
): Promise<string> {
  const {
    action = 'read',
    expires = 15 * 60, // 15 minutes default
    contentType,
  } = options;

  // Initialize storage if not already initialized
  const storageClient = initStorage();
  const bucket = storageClient.bucket(BUCKET_NAME);
  const file = bucket.file(filename);
  
  // Signed URL options
  const signedUrlOptions: GetSignedUrlConfig = {
    action,
    expires: Date.now() + expires * 1000,
  };
  
  // Add content type if provided
  if (contentType) {
    signedUrlOptions.contentType = contentType;
  }

  // Get the signed URL
  const [url] = await file.getSignedUrl(signedUrlOptions);
  
  return url;
}

/**
 * Get the CDN URL for a file
 * 
 * @param filename - File path in the bucket
 * @returns CDN URL
 */
export function getCdnUrl(filename: string): string {
  return `${CDN_URL}/${filename}`;
}

/**
 * Check if a file exists in GCP Cloud Storage
 * 
 * @param filename - File path in the bucket
 * @returns Whether the file exists
 */
export async function fileExists(filename: string): Promise<boolean> {
  // Initialize storage if not already initialized
  const storageClient = initStorage();
  const bucket = storageClient.bucket(BUCKET_NAME);
  const file = bucket.file(filename);
  
  // Check if the file exists
  const [exists] = await file.exists();
  
  return exists;
}

/**
 * Delete a file from GCP Cloud Storage
 * 
 * @param filename - File path in the bucket
 */
export async function deleteFile(filename: string): Promise<void> {
  // Initialize storage if not already initialized
  const storageClient = initStorage();
  const bucket = storageClient.bucket(BUCKET_NAME);
  const file = bucket.file(filename);
  
  // Delete the file
  await file.delete();
}

/**
 * Configure CORS for the bucket
 * 
 * @param origins - Allowed origins
 * @param methods - Allowed methods
 * @param maxAgeSeconds - Max age in seconds
 */
export async function configureBucketCors(
  origins: string[] = ['*'],
  methods: string[] = ['GET', 'HEAD', 'PUT', 'POST', 'DELETE'],
  maxAgeSeconds: number = 3600
): Promise<void> {
  // Initialize storage if not already initialized
  const storageClient = initStorage();
  const bucket = storageClient.bucket(BUCKET_NAME);
  
  // Configure CORS
  await bucket.setCorsConfiguration([
    {
      origin: origins,
      method: methods,
      responseHeader: ['Content-Type', 'x-goog-meta-*'],
      maxAgeSeconds,
    },
  ]);
}
</file>

<file path="lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

// Utility function to merge Tailwind CSS classes
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="public/file.svg">
<svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
  <path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" fill="#666" fillRule="evenodd"/>
</svg>
</file>

<file path="public/globe.svg">
<svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
  <path d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666" fillRule="evenodd"/>
</svg>
</file>

<file path="public/next.svg">
<svg width="394" height="80" viewBox="0 0 394 80" xmlns="http://www.w3.org/2000/svg">
  <path d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z" fill="#000"/>
  <path d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z" fill="#000"/>
</svg>
</file>

<file path="public/sitemap-questions.xml">
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>https://testero.ai/practice/question/2</loc>
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.4</priority>
  </url>
</urlset>
</file>

<file path="public/vercel.svg">
<svg width="1155" height="1000" viewBox="0 0 1155 1000" xmlns="http://www.w3.org/2000/svg">
  <path d="m577.3 0 577.4 1000H0z" fill="#fff"/>
</svg>
</file>

<file path="public/window.svg">
<svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
  <path d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666" fillRule="evenodd"/>
</svg>
</file>

<file path="scripts/create-github-actions-service-account.sh">
#!/bin/bash
# Script to create a GCP service account for GitHub Actions deployment

# Exit on error
set -e

# Configuration - modify these variables as needed
PROJECT_ID=$(gcloud config get-value project)
SERVICE_ACCOUNT_NAME="github-actions-deployer"
SERVICE_ACCOUNT_DISPLAY_NAME="GitHub Actions Deployment Service Account"
KEY_FILE_PATH="github-actions-key.json"

echo "Setting up service account for GitHub Actions deployment in project: $PROJECT_ID"

# Get the service account email
SERVICE_ACCOUNT_EMAIL="$SERVICE_ACCOUNT_NAME@$PROJECT_ID.iam.gserviceaccount.com"

# Check if the service account already exists
if gcloud iam service-accounts describe "$SERVICE_ACCOUNT_EMAIL" &>/dev/null; then
  echo "Service account $SERVICE_ACCOUNT_EMAIL already exists. Skipping creation."
else
  # Create the service account
  echo "Creating service account: $SERVICE_ACCOUNT_NAME"
  gcloud iam service-accounts create $SERVICE_ACCOUNT_NAME \
    --display-name="$SERVICE_ACCOUNT_DISPLAY_NAME" \
    --description="Service account for GitHub Actions to deploy to Cloud Run"
  
  echo "Service account created: $SERVICE_ACCOUNT_EMAIL"
  
  # Wait for the service account to be fully created and propagated
  echo "Waiting for service account to be fully propagated (10 seconds)..."
  sleep 10
  
  # Verify the service account exists
  echo "Verifying service account exists..."
  if ! gcloud iam service-accounts describe "$SERVICE_ACCOUNT_EMAIL" &>/dev/null; then
    echo "ERROR: Service account $SERVICE_ACCOUNT_EMAIL was not created properly or needs more time to propagate."
    echo "Please wait a few minutes and try running the script again."
    exit 1
  fi
fi

# Assign required IAM roles
echo "Assigning required IAM roles..."

# Cloud Run Admin - to deploy to Cloud Run
echo "Adding Cloud Run Admin role..."
gcloud projects add-iam-policy-binding $PROJECT_ID \
  --member="serviceAccount:$SERVICE_ACCOUNT_EMAIL" \
  --role="roles/run.admin" \
  --quiet

# Storage Admin - for Artifact Registry access
echo "Adding Storage Admin role..."
gcloud projects add-iam-policy-binding $PROJECT_ID \
  --member="serviceAccount:$SERVICE_ACCOUNT_EMAIL" \
  --role="roles/artifactregistry.admin" \
  --quiet

# Service Account User - to act as the service account
echo "Adding Service Account User role..."
gcloud projects add-iam-policy-binding $PROJECT_ID \
  --member="serviceAccount:$SERVICE_ACCOUNT_EMAIL" \
  --role="roles/iam.serviceAccountUser" \
  --quiet

# Create and download a JSON key file
echo "Creating and downloading key file to: $KEY_FILE_PATH"
gcloud iam service-accounts keys create $KEY_FILE_PATH \
  --iam-account="$SERVICE_ACCOUNT_EMAIL"

echo "Service account created successfully!"
echo "Key file downloaded to: $KEY_FILE_PATH"
echo ""
echo "IMPORTANT: Store this key file securely and add it as a GitHub secret."
echo "Never commit this key file to your repository."
echo ""
echo "Next steps:"
echo "1. Add the following GitHub secrets:"
echo "   - GCP_SA_KEY: [Paste the entire contents of the JSON key file]"
echo "   - GCP_PROJECT_ID: $PROJECT_ID"
echo "   - GCP_REGION: us-central1 (or your preferred region)"
echo "   - ARTIFACT_REPOSITORY: testero (or your repository name)"
echo "   - SERVICE_NAME: testero-frontend (or your service name)"
echo "2. Create a GitHub Actions workflow file as described in the documentation"
</file>

<file path="scripts/generate-social-images.js">
// This script generates optimized images for social sharing and uploads them to GCP Cloud Storage
// Run with: node scripts/generate-social-images.js

// Load environment variables from .env.local
require('dotenv').config({ path: '.env.local' });

const fs = require('fs');
const path = require('path');
const sharp = require('sharp');
const { Storage } = require('@google-cloud/storage');
const os = require('os');

const PUBLIC_DIR = path.join(__dirname, '../public');
const TEMP_DIR = path.join(os.tmpdir(), 'testero-images');

// GCP Storage configuration
const BUCKET_NAME = process.env.GCP_STORAGE_BUCKET_NAME || 'testero-media';
const CDN_URL = process.env.GCP_CDN_URL || 'https://media.testero.ai';
const USE_GCP = process.env.USE_GCP_STORAGE === 'true';
const PROJECT_ID = process.env.GCP_PROJECT_ID;

// Debug environment variables
console.log('Environment Variables:');
console.log('- USE_GCP_STORAGE:', USE_GCP);
console.log('- GCP_STORAGE_BUCKET_NAME:', BUCKET_NAME);
console.log('- GCP_CDN_URL:', CDN_URL);
console.log('- GCP_PROJECT_ID:', PROJECT_ID);

// Create temp directory if it doesn't exist
if (!fs.existsSync(TEMP_DIR)) {
  fs.mkdirSync(TEMP_DIR, { recursive: true });
}

// Initialize GCP Storage client if needed
let storage;
if (USE_GCP) {
  const keyFilePath = process.env.GCP_KEY_FILE_PATH;
  
  if (keyFilePath) {
    storage = new Storage({
      keyFilename: keyFilePath,
    });
  } else {
    storage = new Storage();
  }
}

/**
 * Upload a file to GCP Cloud Storage
 * 
 * @param {string} filePath - Local file path
 * @param {string} destination - Destination path in the bucket
 * @param {object} options - Upload options
 * @returns {string} URL of the uploaded file
 */
async function uploadToGCP(filePath, destination, options = {}) {
  if (!USE_GCP) {
    return `/${path.basename(filePath)}`;
  }

  const {
    contentType,
    cacheControl = 'public, max-age=31536000', // 1 year default cache
  } = options;

  const bucket = storage.bucket(BUCKET_NAME);
  
  // Upload options
  const uploadOptions = {
    destination,
    metadata: {
      cacheControl,
    },
  };
  
  // Add content type if provided
  if (contentType) {
    uploadOptions.metadata.contentType = contentType;
  }

  // Upload the file
  await bucket.upload(filePath, uploadOptions);
  
  // Return the CDN URL
  return `${CDN_URL}/${destination}`;
}

async function generateSocialImages() {
  try {
    // File paths
    const ogImagePath = USE_GCP 
      ? path.join(TEMP_DIR, 'og-image.jpg')
      : path.join(PUBLIC_DIR, 'og-image.jpg');
    
    const twitterImagePath = USE_GCP
      ? path.join(TEMP_DIR, 'twitter-image.jpg')
      : path.join(PUBLIC_DIR, 'twitter-image.jpg');
    
    const logoPath = USE_GCP
      ? path.join(TEMP_DIR, 'logo.png')
      : path.join(PUBLIC_DIR, 'logo.png');
    
    // Generate Open Graph image (1200x630)
    await sharp({
      create: {
        width: 1200,
        height: 630,
        channels: 4,
        background: { r: 30, g: 41, b: 59, alpha: 1 } // Slate-800 color
      }
    })
    .composite([
      {
        input: Buffer.from(`
          <svg width="1200" height="630" xmlns="http://www.w3.org/2000/svg">
            <rect x="50" y="50" width="1100" height="530" fill="none" stroke="#f97316" stroke-width="4" rx="20" />
            <text x="600" y="200" font-family="Arial" font-size="80" font-weight="bold" fill="white" text-anchor="middle">Testero</text>
            <text x="600" y="300" font-family="Arial" font-size="40" fill="white" text-anchor="middle">AI-Powered Certification Exam Preparation</text>
            <text x="600" y="400" font-family="Arial" font-size="30" fill="#f97316" text-anchor="middle">Ace your cloud certification exams confidently</text>
            <text x="600" y="500" font-family="Arial" font-size="24" fill="#94a3b8" text-anchor="middle">Join 1,200+ cloud professionals on the waitlist</text>
          </svg>
        `),
        gravity: 'center'
      }
    ])
    .jpeg({ quality: 90 })
    .toFile(ogImagePath);
    
    console.log('Generated og-image.jpg');

    // Generate WebP version of Open Graph image
    if (USE_GCP) {
      const ogImageWebPPath = path.join(TEMP_DIR, 'og-image.webp');
      await sharp(ogImagePath)
        .webp({ quality: 85 })
        .toFile(ogImageWebPPath);
      
      console.log('Generated og-image.webp');
    }

    // Generate Twitter image (same dimensions but optimized for Twitter)
    await sharp({
      create: {
        width: 1200,
        height: 630,
        channels: 4,
        background: { r: 30, g: 41, b: 59, alpha: 1 } // Slate-800 color
      }
    })
    .composite([
      {
        input: Buffer.from(`
          <svg width="1200" height="630" xmlns="http://www.w3.org/2000/svg">
            <rect x="50" y="50" width="1100" height="530" fill="none" stroke="#f97316" stroke-width="4" rx="20" />
            <text x="600" y="200" font-family="Arial" font-size="80" font-weight="bold" fill="white" text-anchor="middle">Testero</text>
            <text x="600" y="300" font-family="Arial" font-size="40" fill="white" text-anchor="middle">AI-Powered Certification Exam Preparation</text>
            <text x="600" y="400" font-family="Arial" font-size="30" fill="#f97316" text-anchor="middle">Ace your cloud certification exams confidently</text>
            <text x="600" y="500" font-family="Arial" font-size="24" fill="#94a3b8" text-anchor="middle">Join 1,200+ cloud professionals on the waitlist</text>
          </svg>
        `),
        gravity: 'center'
      }
    ])
    .jpeg({ quality: 90 })
    .toFile(twitterImagePath);
    
    console.log('Generated twitter-image.jpg');

    // Generate WebP version of Twitter image
    if (USE_GCP) {
      const twitterImageWebPPath = path.join(TEMP_DIR, 'twitter-image.webp');
      await sharp(twitterImagePath)
        .webp({ quality: 85 })
        .toFile(twitterImageWebPPath);
      
      console.log('Generated twitter-image.webp');
    }

    // Generate logo placeholder (512x512)
    await sharp({
      create: {
        width: 512,
        height: 512,
        channels: 4,
        background: { r: 255, g: 140, b: 0, alpha: 1 }
      }
    })
    .composite([
      {
        input: Buffer.from(`
          <svg width="512" height="512" xmlns="http://www.w3.org/2000/svg">
            <text x="256" y="256" font-family="Arial" font-size="120" font-weight="bold" fill="white" text-anchor="middle" dominant-baseline="middle">T</text>
          </svg>
        `),
        gravity: 'center'
      }
    ])
    .png()
    .toFile(logoPath);
    
    console.log('Generated logo.png');

    // Generate WebP version of logo
    if (USE_GCP) {
      const logoWebPPath = path.join(TEMP_DIR, 'logo.webp');
      await sharp(logoPath)
        .webp({ quality: 90 })
        .toFile(logoWebPPath);
      
      console.log('Generated logo.webp');
    }

    // Upload to GCP if enabled
    if (USE_GCP) {
      // Upload JPEG/PNG versions
      const ogImageUrl = await uploadToGCP(ogImagePath, 'images/og-image.jpg', { contentType: 'image/jpeg' });
      const twitterImageUrl = await uploadToGCP(twitterImagePath, 'images/twitter-image.jpg', { contentType: 'image/jpeg' });
      const logoUrl = await uploadToGCP(logoPath, 'images/logo.png', { contentType: 'image/png' });
      
      console.log('Uploaded JPEG/PNG images to GCP Cloud Storage');
      console.log(`OG Image URL: ${ogImageUrl}`);
      console.log(`Twitter Image URL: ${twitterImageUrl}`);
      console.log(`Logo URL: ${logoUrl}`);
      
      // Upload WebP versions
      const ogImageWebPUrl = await uploadToGCP(
        path.join(TEMP_DIR, 'og-image.webp'), 
        'images/og-image.webp', 
        { contentType: 'image/webp' }
      );
      
      const twitterImageWebPUrl = await uploadToGCP(
        path.join(TEMP_DIR, 'twitter-image.webp'), 
        'images/twitter-image.webp', 
        { contentType: 'image/webp' }
      );
      
      const logoWebPUrl = await uploadToGCP(
        path.join(TEMP_DIR, 'logo.webp'), 
        'images/logo.webp', 
        { contentType: 'image/webp' }
      );
      
      console.log('Uploaded WebP images to GCP Cloud Storage');
      console.log(`OG Image WebP URL: ${ogImageWebPUrl}`);
      console.log(`Twitter Image WebP URL: ${twitterImageWebPUrl}`);
      console.log(`Logo WebP URL: ${logoWebPUrl}`);
      
      // Create a JSON file with image URLs for reference
      const imageUrls = {
        ogImage: {
          jpg: ogImageUrl,
          webp: ogImageWebPUrl
        },
        twitterImage: {
          jpg: twitterImageUrl,
          webp: twitterImageWebPUrl
        },
        logo: {
          png: logoUrl,
          webp: logoWebPUrl
        }
      };
      
      fs.writeFileSync(
        path.join(PUBLIC_DIR, 'image-urls.json'), 
        JSON.stringify(imageUrls, null, 2)
      );
      
      console.log('Created image-urls.json with CDN URLs');
    }

    console.log('All social images generated successfully!');
  } catch (error) {
    console.error('Error generating social images:', error);
    throw error; // Re-throw to ensure the build fails if images can't be generated
  }
}

generateSocialImages();
</file>

<file path="scripts/setup-artifact-registry.sh">
#!/bin/bash
# Script to set up GCP Artifact Registry for Docker images

# Exit on error
set -e

# Configuration - modify these variables as needed
PROJECT_ID=$(gcloud config get-value project)
REPOSITORY_NAME="testero"
REGION="us-central1"
DESCRIPTION="Docker repository for Testero frontend images"

echo "Setting up Artifact Registry repository in project: $PROJECT_ID"

# Check if the Artifact Registry API is enabled
if ! gcloud services list --enabled | grep -q artifactregistry.googleapis.com; then
  echo "Enabling Artifact Registry API..."
  gcloud services enable artifactregistry.googleapis.com
fi

# Check if the repository already exists
if gcloud artifacts repositories describe $REPOSITORY_NAME --location=$REGION &>/dev/null; then
  echo "Repository $REPOSITORY_NAME already exists in $REGION. Skipping creation."
else
  # Create the Docker repository
  echo "Creating Docker repository: $REPOSITORY_NAME in $REGION"
  gcloud artifacts repositories create $REPOSITORY_NAME \
    --repository-format=docker \
    --location=$REGION \
    --description="$DESCRIPTION"
  
  echo "Repository created: $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_NAME"
fi

# Note: Lifecycle policies need to be configured manually in the GCP Console
echo "Note: Please set up lifecycle policies manually in the GCP Console"
echo "Recommended policies:"
echo "1. Keep only the 10 most recent versions (excluding 'latest' and semantic version tags)"
echo "2. Remove untagged images older than 14 days"

echo "Artifact Registry repository setup complete!"
echo ""
echo "Repository details:"
echo "- Name: $REPOSITORY_NAME"
echo "- Region: $REGION"
echo "- Full path: $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_NAME"
echo "- Lifecycle policies:"
echo "  - keep-recent-versions: Keep only the 10 most recent versions (excluding 'latest' and semantic version tags)"
echo "  - cleanup-untagged: Remove untagged images older than 14 days"
echo ""
echo "To push images to this repository:"
echo "1. Configure Docker: gcloud auth configure-docker $REGION-docker.pkg.dev"
echo "2. Tag your image: docker tag IMAGE_NAME $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_NAME/frontend:TAG"
echo "3. Push your image: docker push $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_NAME/frontend:TAG"
echo ""
echo "For GitHub Actions deployment, make sure to set up the following secrets:"
echo "- GCP_PROJECT_ID: $PROJECT_ID"
echo "- GCP_REGION: $REGION"
echo "- ARTIFACT_REPOSITORY: $REPOSITORY_NAME"
echo "- SERVICE_NAME: testero-frontend (or your service name)"
</file>

<file path="scripts/submit-to-indexnow.js">
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const { XMLParser } = require('fast-xml-parser'); // Using a common XML parsing library

// --- Configuration ---
const INDEXNOW_API_KEY = process.env.INDEXNOW_KEY || process.argv[2];
const SITEMAP_PATH = path.join(__dirname, '..', 'public', 'sitemap.xml');
const INDEXNOW_ENDPOINT = 'https://api.indexnow.org/indexnow'; // Generic endpoint, also Yandex, Bing, Seznam etc. have their own
const HOST_DOMAIN = 'testero.ai'; // Replace with your actual domain if different, or make it dynamic
const MAX_URLS_PER_REQUEST = 10000;

// --- Helper Functions ---
async function getUrlsFromSitemap(sitemapPath) {
    try {
        const sitemapXml = fs.readFileSync(sitemapPath, 'utf-8');
        const parser = new XMLParser();
        const sitemapJson = parser.parse(sitemapXml);

        if (sitemapJson.urlset && Array.isArray(sitemapJson.urlset.url)) {
            return sitemapJson.urlset.url.map(entry => entry.loc);
        } else if (sitemapJson.sitemapindex && Array.isArray(sitemapJson.sitemapindex.sitemap)) {
            // Handle sitemap index files by recursively fetching and parsing sub-sitemaps
            let allUrls = [];
            for (const subSitemapEntry of sitemapJson.sitemapindex.sitemap) {
                // Assuming sub-sitemaps are also locally available or accessible via http
                // This part might need adjustment based on how sub-sitemaps are structured/hosted
                console.warn(`Sitemap index found. This script currently doesn't recursively fetch sub-sitemaps. Please submit them individually or enhance this script. Skipping: ${subSitemapEntry.loc}`);
            }
            return allUrls;
        }
        console.error('Could not parse URLs from sitemap. Ensure it follows a standard format.');
        return [];
    } catch (error) {
        console.error(`Error reading or parsing sitemap at ${sitemapPath}:`, error.message);
        return [];
    }
}

async function submitUrlsToIndexNow(apiKey, urls, host) {
    if (!apiKey) {
        console.error('Error: IndexNow API key is missing. Provide it via INDEXNOW_KEY environment variable or as a command-line argument.');
        return;
    }
    if (!urls || urls.length === 0) {
        console.log('No URLs to submit.');
        return;
    }

    console.log(`Preparing to submit ${urls.length} URL(s) to IndexNow for host: ${host}`);

    for (let i = 0; i < urls.length; i += MAX_URLS_PER_REQUEST) {
        const batchUrls = urls.slice(i, i + MAX_URLS_PER_REQUEST);
        const payload = {
            host: host,
            key: apiKey,
            keyLocation: `https://${host}/${apiKey}.txt`, // Assuming key file is at root
            urlList: batchUrls,
        };

        try {
            console.log(`Submitting batch of ${batchUrls.length} URLs...`);
            const response = await axios.post(INDEXNOW_ENDPOINT, payload, {
                headers: {
                    'Content-Type': 'application/json; charset=utf-8',
                },
                timeout: 10000, // 10 seconds timeout
            });

            if (response.status === 200) {
                console.log(`Batch submitted successfully to ${INDEXNOW_ENDPOINT}. Status: ${response.status}`);
            } else if (response.status === 202) {
                 console.log(`Batch accepted for processing by ${INDEXNOW_ENDPOINT}. Status: ${response.status}. It might take some time to process.`);
            }
            else {
                console.warn(`Warning: Submission to ${INDEXNOW_ENDPOINT} returned status ${response.status}. Response:`, response.data);
            }
        } catch (error) {
            console.error(`Error submitting batch to ${INDEXNOW_ENDPOINT}:`, error.response ? error.response.data : error.message);
            if (error.response && error.response.status === 403) {
                console.error("A 403 Forbidden error often means the API key is invalid or the key file is not accessible/correct.");
            }
        }
    }
    console.log('All URL submissions attempted.');
}

// --- Main Execution ---
async function main() {
    if (!INDEXNOW_API_KEY) {
        console.error("Error: IndexNow API key must be provided either as the first command-line argument or via the INDEXNOW_KEY environment variable.");
        console.log("Usage: node scripts/submit-to-indexnow.js YOUR_API_KEY [url1 url2 ...]");
        console.log("Or (reading from sitemap): INDEXNOW_KEY=YOUR_API_KEY node scripts/submit-to-indexnow.js");
        return;
    }

    let urlsToSubmit = [];
    const additionalArgs = process.argv.slice(3); // URLs passed as command line arguments

    if (additionalArgs.length > 0) {
        urlsToSubmit = additionalArgs.filter(arg => arg.startsWith('http'));
        console.log(`Received ${urlsToSubmit.length} URL(s) from command line arguments.`);
    } else {
        console.log(`No URLs provided via command line, attempting to read from sitemap: ${SITEMAP_PATH}`);
        urlsToSubmit = await getUrlsFromSitemap(SITEMAP_PATH);
    }

    if (urlsToSubmit.length === 0) {
        console.log("No URLs found to submit from sitemap or arguments.");
        // As per TES-207, at least submit the homepage if nothing else.
        const homepageUrl = `https://${HOST_DOMAIN}/`;
        console.log(`Adding homepage ${homepageUrl} for submission.`);
        urlsToSubmit.push(homepageUrl);
    }

    await submitUrlsToIndexNow(INDEXNOW_API_KEY, urlsToSubmit, HOST_DOMAIN);
}

main().catch(error => {
    console.error("An unexpected error occurred:", error);
});
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# GCP service account keys
github-actions-key.json
*-key.json
*-credentials.json
</file>

<file path="README.md">
# Next.js Frontend Project

A modern frontend application built with:

- Next.js 15
- React 18.3
- shadcn/ui
- TypeScript
- Tailwind CSS
- PostHog

## Getting Started

### Development

```bash
npm run dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

### Build

```bash
npm run build
```

### Start Production Server

```bash
npm start
```

## Project Structure

- `app/` - Next.js App Router
- `components/` - UI components
  - `ui/` - shadcn/ui components
- `lib/` - Utility functions
- `public/` - Static assets

## Features

- Modern UI components using shadcn/ui
- Responsive design with Tailwind CSS
- Type safety with TypeScript

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"],
      "@/components/*": ["./src/components/*", "./components/*"],
      "@/lib/*": ["./src/lib/*", "./lib/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="app/api/waitlist/route.ts">
import { NextRequest, NextResponse } from "next/server";
import { z } from "zod";
import { supabase } from "@/lib/supabase/client"; // Import Supabase client

// Define the schema for validation
const formSchema = z.object({
  email: z
    .string()
    .min(1, { message: "Email is required" })
    .email({ message: "Must be a valid email address" }),
  examType: z.string().optional(),
});

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const result = formSchema.safeParse(body);

    if (!result.success) {
      return NextResponse.json(
        { error: result.error.errors[0]?.message || "Invalid input" },
        { status: 400 }
      );
    }

    const { email, examType } = result.data;

    // Insert data into Supabase
    const { data, error: dbError } = await supabase
      .from("waitlist")
      .insert([{ email: email, exam_type: examType }]) // Map examType to exam_type
      .select();

    if (dbError) {
      console.error("Supabase error:", dbError);
      // Handle potential unique constraint violation (email already exists)
      if (dbError.code === "23505") {
        return NextResponse.json(
          { error: "This email is already on the waitlist." },
          { status: 409 } // Conflict
        );
      }
      return NextResponse.json(
        { error: "Failed to save submission to database" },
        { status: 500 }
      );
    }

    console.log("Waitlist submission saved:", data);

    // --- Loops Integration Start ---
    const loopsApiKey = process.env.LOOPS_API_KEY;
    if (!loopsApiKey) {
      console.error("Loops API Key not configured. Skipping Loops integration.");
      // Decide if this should be a hard error or just a log
      // For now, log and continue, as waitlist signup succeeded.
    } else {
      try {
        const loopsResponse = await fetch('https://app.loops.so/api/v1/contacts/create', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${loopsApiKey}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            email: email,
            // Assuming Loops uses userGroup or similar for segmentation
            // Adjust based on actual Loops setup if different
            ...(examType && { examType: examType }), // Pass examType if provided
            // Add any other relevant properties or transactional IDs here
            // e.g., source: 'Waitlist Signup'
            userGroup: 'Waitlist', // Example group
          }),
        });

        if (!loopsResponse.ok) {
          const errorBody = await loopsResponse.text();
          console.error(`Loops API Error (${loopsResponse.status}): ${errorBody}`);
          // Log the error but don't fail the overall request
        } else {
          const loopsData = await loopsResponse.json();
          console.log("Loops contact created/updated successfully:", loopsData);
        }
      } catch (loopsError: Error | unknown) {
        const errorMessage = loopsError instanceof Error ? loopsError.message : "An unknown error occurred during Loops API call";
        console.error("Failed to send data to Loops:", errorMessage);
        // Log the error but don't fail the overall request
      }
    }
    // --- Loops Integration End ---

    return NextResponse.json({ success: true });

  } catch (error: Error | unknown) {
    console.error("API route error:", error);
    // Check if error is an instance of Error to access message property safely
    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred";
    return NextResponse.json(
      { error: `Failed to process submission: ${errorMessage}` },
      { status: 500 }
    );
  }
}
</file>

<file path="app/content/hub/[slug]/page.tsx">
import React from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { notFound } from 'next/navigation';
import { 
  getAllContentSlugs, 
  getAllHubContent,
  getHubContent,
  getSpokesForHub
} from '@/lib/content/loader';
import { generateContentMetadata, generateStructuredData } from '@/lib/content/meta';
import TableOfContents from '@/components/content/TableOfContents';
import SocialShare from '@/components/content/SocialShare';
import RecommendedContent from '@/components/content/RecommendedContent';

// Generate static params for all hub content
export async function generateStaticParams() {
  const { hubSlugs } = await getAllContentSlugs();
  return hubSlugs.map(slug => ({ slug }));
}

// Generate metadata for the hub page
export async function generateMetadata({ params }: { params: Promise<{ slug: string }> }) {
  const { slug } = await params;
  const content = await getHubContent(slug);
  if (!content) return {};
  return generateContentMetadata(content);
}

interface SpokeCardProps {
  title: string;
  description: string;
  slug: string;
  order?: number;
  date: string;
  readingTime?: number;
  coverImage?: string;
}

const SpokeCard = ({ title, description, slug, date, readingTime, coverImage }: SpokeCardProps) => {
  return (
    <div className="border rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow flex flex-col md:flex-row">
      {coverImage && (
        <div className="relative h-48 md:h-auto md:w-1/3">
          <Image 
            src={coverImage} 
            alt={title} 
            fill 
            className="object-cover"
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 33vw, 400px"
            loading="lazy"
            quality={80}
          />
        </div>
      )}
      <div className="p-6 flex-1">
        <Link href={`/content/spoke/${slug}`} className="block hover:underline">
          <h3 className="text-xl font-bold mb-2">{title}</h3>
        </Link>
        <p className="text-gray-700 mb-4">
          {description.length > 120 
            ? `${description.substring(0, 120)}...` 
            : description}
        </p>
        <div className="flex justify-between items-center text-sm text-gray-500 mt-auto">
          <span>
            {new Date(date).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
            })}
          </span>
          {readingTime && (
            <span>{readingTime} min read</span>
          )}
        </div>
      </div>
    </div>
  );
};

export default async function HubPage({ params }: { params: Promise<{ slug: string }> }) {
  const { slug } = await params;
  const content = await getHubContent(slug);
  if (!content) notFound();
  
  const spokes = await getSpokesForHub(slug);
  const recommendedContent = await getAllHubContent();
  
  // JSON-LD structured data
  const structuredData = generateStructuredData(content);
  
  return (
    <main className="container mx-auto px-4 py-12">
      <div className="max-w-4xl mx-auto">
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{ __html: JSON.stringify(structuredData) }}
        />
        
        <header className="mb-12">
          <h1 className="text-4xl md:text-5xl font-bold mb-6 text-gray-900 leading-tight">{content.meta.title}</h1>
          <SocialShare 
            title={content.meta.title}
            url={`/content/hub/${content.slug}`}
            description={content.meta.description}
            className="mb-5"
          />
          {content.meta.author && (
            <div className="text-gray-600 mb-5 font-medium">
              By {content.meta.author} • 
              {new Date(content.meta.date).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
              })}
              {content.meta.readingTime && (
                <span className="ml-1">• {content.meta.readingTime} min read</span>
              )}
            </div>
          )}
          {content.meta.tags && content.meta.tags.length > 0 && (
            <div className="flex flex-wrap gap-2 mb-8">
              {content.meta.tags.map(tag => (
                <span 
                  key={tag} 
                  className="bg-blue-50 text-blue-700 border border-blue-200 px-3 py-1.5 rounded-md text-sm font-medium"
                >
                  {tag}
                </span>
              ))}
            </div>
          )}
          {content.meta.coverImage && (
            <div className="relative w-full h-96 mb-8 rounded-lg overflow-hidden">
              <Image 
                src={content.meta.coverImage} 
                alt={content.meta.title} 
                fill 
                className="object-cover"
                priority
                sizes="(max-width: 768px) 100vw, (max-width: 1200px) 1200px, 1200px"
                quality={85}
              />
            </div>
          )}
        </header>
        
        <div className="flex flex-col lg:flex-row gap-10">
          <article className="prose prose-lg max-w-none mb-12 lg:flex-grow lg:pr-8" id="article-content">
            <div 
              dangerouslySetInnerHTML={{ __html: content.content }} 
              className="certification-content"
              id="certification-content"
            />
          </article>
          
          <div className="lg:w-72 lg:flex-shrink-0">
            <div className="sticky top-8">
              <TableOfContents 
                contentId="article-content" 
                className="bg-gray-50 p-6 rounded-lg shadow-sm border border-gray-100"
              />
            </div>
          </div>
        </div>
        
        {spokes.length > 0 && (
          <section className="mt-16">
            <h2 className="text-3xl font-bold mb-6">Related Content</h2>
            <div className="space-y-6">
              {spokes.map((spoke) => (
                <SpokeCard
                  key={spoke.slug}
                  title={spoke.meta.title}
                  description={spoke.meta.description}
                  slug={spoke.slug}
                  order={spoke.meta.spokeOrder}
                  date={spoke.meta.date}
                  readingTime={spoke.meta.readingTime}
                  coverImage={spoke.meta.coverImage}
                />
              ))}
            </div>
          </section>
        )}
        
        <div className="mt-8 pt-8 border-t">
          <Link 
            href="/content" 
            className="text-blue-600 hover:text-blue-800 font-medium"
          >
            ← Back to all resources
          </Link>
        </div>
        
        {/* Recommended Content Section */}
        <RecommendedContent
          content={recommendedContent}
          currentSlug={content.slug}
          title="More Certification Resources"
        />
      </div>
    </main>
  );
}
</file>

<file path="app/content/page.tsx">
import React from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { Metadata } from 'next';
import { getAllHubContent, Content } from '@/lib/content/loader';

export const metadata: Metadata = {
  title: 'Google Certification Guides | Testero',
  description: 'Comprehensive guides for Google certifications to accelerate your career in cloud, data analytics, machine learning, and more.',
  openGraph: {
    title: 'Google Certification Guides | Testero',
    description: 'Comprehensive guides for Google certifications to accelerate your career in cloud, data analytics, machine learning, and more.',
    url: 'https://testero.ai/content',
    siteName: 'Testero',
    locale: 'en_US',
    type: 'website',
  },
  alternates: {
    canonical: '/content',
  },
};

type HubCardProps = {
  content: Content;
};

const HubCard = ({ content }: HubCardProps) => {
  const { meta } = content;
  
  return (
    <div className="border rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow">
      {meta.coverImage && (
        <div className="relative h-48 w-full">
          <Image 
            src={meta.coverImage} 
            alt={meta.title} 
            fill 
            className="object-cover"
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
          />
        </div>
      )}
      <div className="p-6">
        <Link href={`/content/hub/${meta.slug}`} className="block hover:underline">
          <h2 className="text-2xl font-bold mb-2">{meta.title}</h2>
        </Link>
        <p className="text-gray-700 mb-4">
          {meta.description.length > 160 
            ? `${meta.description.substring(0, 160)}...` 
            : meta.description}
        </p>
        <div className="flex justify-between items-center text-sm text-gray-500">
          <span>
            {new Date(meta.date).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
            })}
          </span>
          {meta.readingTime && (
            <span>{meta.readingTime} min read</span>
          )}
        </div>
      </div>
    </div>
  );
};

export default async function ContentPage() {
  const hubContent = await getAllHubContent();
  
  return (
    <main className="container mx-auto px-4 py-12">
      <div className="max-w-5xl mx-auto">
        <div className="text-center mb-12">
          <h1 className="text-4xl md:text-5xl font-bold mb-4">
            Google Certification Resources
          </h1>
          <p className="text-xl text-gray-700">
            Comprehensive guides to help you navigate Google&apos;s professional certification ecosystem
          </p>
        </div>
        
        {hubContent.length === 0 ? (
          <div className="text-center py-12">
            <p className="text-gray-500">No content available yet. Check back soon!</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {hubContent.map((content) => (
              <HubCard key={content.slug} content={content} />
            ))}
          </div>
        )}
      </div>
    </main>
  );
}
</file>

<file path="app/faq/[slug]/FaqClientContent.tsx">
'use client';

import React from 'react';
import Link from 'next/link';
import { FaqEntry } from '@/lib/content/faqData';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { motion } from 'framer-motion';

interface FaqClientContentProps {
  faq: FaqEntry | undefined;
}

export default function FaqClientContent({ faq }: FaqClientContentProps) {
  if (!faq) {
    return (
      <div className="bg-gradient-to-b from-slate-50 to-white dark:from-slate-900 dark:to-slate-800 min-h-screen">
        <div className="container mx-auto px-4 py-20 text-center">
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <h1 className="text-3xl md:text-4xl font-bold mb-4 text-slate-900 dark:text-slate-50">
              FAQ Not Found
            </h1>
            <p className="mb-8 text-lg text-slate-700 dark:text-slate-300">
              Sorry, we could not find the FAQ you were looking for.
            </p>
            <Button asChild variant="outline" className="rounded-full hover:scale-105 transition-transform">
              <Link href="/faq">
                &larr; Back to FAQs
              </Link>
            </Button>
          </motion.div>
        </div>
      </div>
    );
  }

  // Helper to render markdown-like content safely
  // In a real app, use a proper markdown renderer like react-markdown
  const renderAnswer = (answer: string) => {
    return answer.split('\n').map((paragraph, index) => (
      <motion.p 
        key={index} 
        className="mb-6 last:mb-0 text-lg leading-relaxed"
        initial={{ opacity: 0, y: 15 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.4, delay: 0.2 + index * 0.1 }}
      >
        {paragraph}
      </motion.p>
    ));
  };

  // Extract cost from data points if available
  const costInfo = faq.data_points.cost_usd ? `$${faq.data_points.cost_usd} USD` : null;
  const examLength = faq.data_points.exam_length_minutes ? `${faq.data_points.exam_length_minutes} minutes` : null;
  const passingScore = faq.data_points.passing_score_pct ? `${faq.data_points.passing_score_pct}%` : null;

  return (
    <div className="bg-gradient-to-b from-slate-50 to-white dark:from-slate-900 dark:to-slate-800 min-h-screen">
      <div className="container mx-auto px-4 py-20">
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{
            __html: JSON.stringify({
              "@context": "https://schema.org",
              "@type": "FAQPage",
              "mainEntity": [{
                "@type": "Question",
                "name": faq.question,
                "acceptedAnswer": {
                  "@type": "Answer",
                  "text": faq.answer
                }
              }]
            })
          }}
        />
        
        <motion.div 
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="mb-10"
        >
          <Button 
            asChild 
            variant="ghost" 
            className="mb-6 text-slate-600 dark:text-slate-400 hover:text-orange-500 dark:hover:text-orange-400 transition-colors group"
          >
            <Link href="/faq">
              <span className="inline-block mr-1 group-hover:-translate-x-1 transition-transform">←</span> Back to FAQs
            </Link>
          </Button>
          
          <div className="mb-1 text-sm font-medium text-orange-500 dark:text-orange-400 uppercase tracking-wider">
            {faq.pillar}
          </div>
          <h1 className="text-4xl md:text-5xl font-extrabold mb-8 text-slate-900 dark:text-white">
            {faq.question}
          </h1>
        </motion.div>
        
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* Main content */}
          <motion.div 
            className="lg:col-span-3"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            <Card className="overflow-hidden border-0 shadow-xl bg-white dark:bg-slate-800/80 backdrop-blur-sm">
              <CardContent className="p-8 md:p-10">
                <div className="prose prose-lg max-w-none dark:prose-invert prose-headings:text-slate-900 dark:prose-headings:text-white prose-p:text-slate-700 dark:prose-p:text-slate-300">
                  {renderAnswer(faq.answer)}
                </div>
                
                {/* Citations */}
                {faq.citations && faq.citations.length > 0 && (
                  <motion.div 
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ duration: 0.5, delay: 0.4 }}
                    className="mt-12 pt-6 border-t border-slate-200 dark:border-slate-700"
                  >
                    <h3 className="text-xl font-semibold mb-4 text-slate-800 dark:text-slate-200">Sources</h3>
                    <ul className="space-y-2">
                      {faq.citations.map((citation, index) => (
                        <li key={index} className="text-sm text-slate-600 dark:text-slate-400 truncate">
                          <a 
                            href={citation} 
                            target="_blank" 
                            rel="noopener noreferrer" 
                            className="hover:text-orange-500 dark:hover:text-orange-400 transition-colors"
                          >
                            {citation}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </motion.div>
                )}
              </CardContent>
            </Card>
          </motion.div>
          
          {/* Sidebar with data points */}
          <motion.div 
            className="lg:col-span-1"
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5, delay: 0.3 }}
          >
            <div className="sticky top-10">
              <Card className="bg-gradient-to-br from-orange-50 to-orange-100 dark:from-slate-800 dark:to-slate-700 border-0 shadow-lg overflow-hidden">
                <div className="absolute top-0 right-0 w-24 h-24 bg-orange-200 dark:bg-orange-800/20 rounded-full -mr-12 -mt-12 opacity-50"></div>
                <CardContent className="p-6 relative">
                  <h3 className="text-lg font-semibold mb-4 text-slate-900 dark:text-white">Quick Facts</h3>
                  
                  <div className="space-y-4">
                    {costInfo && (
                      <div className="flex items-center">
                        <div className="flex-shrink-0 mr-3 w-10 h-10 flex items-center justify-center rounded-full bg-orange-200 dark:bg-orange-800/30">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" className="w-5 h-5 text-orange-700 dark:text-orange-300">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                        </div>
                        <div>
                          <div className="text-sm font-medium text-slate-500 dark:text-slate-400">Cost</div>
                          <div className="font-semibold text-slate-900 dark:text-white">{costInfo}</div>
                        </div>
                      </div>
                    )}
                    
                    {examLength && (
                      <div className="flex items-center">
                        <div className="flex-shrink-0 mr-3 w-10 h-10 flex items-center justify-center rounded-full bg-orange-200 dark:bg-orange-800/30">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" className="w-5 h-5 text-orange-700 dark:text-orange-300">
                            <circle cx="12" cy="12" r="10" strokeWidth="2" />
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6l4 2" />
                          </svg>
                        </div>
                        <div>
                          <div className="text-sm font-medium text-slate-500 dark:text-slate-400">Exam Duration</div>
                          <div className="font-semibold text-slate-900 dark:text-white">{examLength}</div>
                        </div>
                      </div>
                    )}
                    
                    {passingScore && (
                      <div className="flex items-center">
                        <div className="flex-shrink-0 mr-3 w-10 h-10 flex items-center justify-center rounded-full bg-orange-200 dark:bg-orange-800/30">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" className="w-5 h-5 text-orange-700 dark:text-orange-300">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                        </div>
                        <div>
                          <div className="text-sm font-medium text-slate-500 dark:text-slate-400">Passing Score</div>
                          <div className="font-semibold text-slate-900 dark:text-white">{passingScore}</div>
                        </div>
                      </div>
                    )}
                    
                    {(faq.data_points.search_volume_us > 0) && (
                      <div className="flex items-center">
                        <div className="flex-shrink-0 mr-3 w-10 h-10 flex items-center justify-center rounded-full bg-orange-200 dark:bg-orange-800/30">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" className="w-5 h-5 text-orange-700 dark:text-orange-300">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                          </svg>
                        </div>
                        <div>
                          <div className="text-sm font-medium text-slate-500 dark:text-slate-400">Popularity</div>
                          <div className="font-semibold text-slate-900 dark:text-white">
                            {faq.data_points.search_volume_us > 5000 ? 'High' : faq.data_points.search_volume_us > 1000 ? 'Medium' : 'Low'} search interest
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                  
                  <Link 
                    href={faq.internal_link.replace('.md', '')} 
                    className="mt-8 block w-full text-center py-3 px-4 rounded-lg bg-orange-500 hover:bg-orange-600 text-white font-medium transition-colors"
                  >
                    Read Full Guide
                  </Link>
                </CardContent>
              </Card>
              
              <div className="mt-6">
                <h3 className="text-lg font-semibold mb-3 text-slate-900 dark:text-white">Share this FAQ</h3>
                <div className="flex space-x-2">
                  <Button variant="outline" size="icon" className="rounded-full w-10 h-10">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                      <path d="M5.026 15c6.038 0 9.341-5.003 9.341-9.334 0-.14 0-.282-.006-.422A6.685 6.685 0 0 0 16 3.542a6.658 6.658 0 0 1-1.889.518 3.301 3.301 0 0 0 1.447-1.817 6.533 6.533 0 0 1-2.087.793A3.286 3.286 0 0 0 7.875 6.03a9.325 9.325 0 0 1-6.767-3.429 3.289 3.289 0 0 0 1.018 4.382A3.323 3.323 0 0 1 .64 6.575v.045a3.288 3.288 0 0 0 2.632 3.218 3.203 3.203 0 0 1-.865.115 3.23 3.23 0 0 1-.614-.057 3.283 3.283 0 0 0 3.067 2.277A6.588 6.588 0 0 1 .78 13.58a6.32 6.32 0 0 1-.78-.045A9.344 9.344 0 0 0 5.026 15z"/>
                    </svg>
                  </Button>
                  <Button variant="outline" size="icon" className="rounded-full w-10 h-10">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                      <path d="M16 8.049c0-4.446-3.582-8.05-8-8.05C3.58 0-.002 3.603-.002 8.05c0 4.017 2.926 7.347 6.75 7.951v-5.625h-2.03V8.05H6.75V6.275c0-2.017 1.195-3.131 3.022-3.131.876 0 1.791.157 1.791.157v1.98h-1.009c-.993 0-1.303.621-1.303 1.258v1.51h2.218l-.354 2.326H9.25V16c3.824-.604 6.75-3.934 6.75-7.951z"/>
                    </svg>
                  </Button>
                  <Button variant="outline" size="icon" className="rounded-full w-10 h-10">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                      <path d="M0 1.146C0 .513.526 0 1.175 0h13.65C15.474 0 16 .513 16 1.146v13.708c0 .633-.526 1.146-1.175 1.146H1.175C.526 16 0 15.487 0 14.854V1.146zm4.943 12.248V6.169H2.542v7.225h2.401zm-1.2-8.212c.837 0 1.358-.554 1.358-1.248-.015-.709-.52-1.248-1.342-1.248-.822 0-1.359.54-1.359 1.248 0 .694.521 1.248 1.327 1.248h.016zm4.908 8.212V9.359c0-.216.016-.432.08-.586.173-.431.568-.878 1.232-.878.869 0 1.216.662 1.216 1.634v3.865h2.401V9.25c0-2.22-1.184-3.252-2.764-3.252-1.274 0-1.845.7-2.165 1.193v.025h-.016a5.54 5.54 0 0 1 .016-.025V6.169h-2.4c.03.678 0 7.225 0 7.225h2.4z"/>
                    </svg>
                  </Button>
                </div>
              </div>
            </div>
          </motion.div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="app/globals.css">
@import "tailwindcss";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* Custom styles for certification content */
.certification-content {
  line-height: 1.6;
  color: #333;
}

.certification-content h2 {
  margin-top: 2.5em;
  margin-bottom: 1em;
  font-weight: 700;
  font-size: 1.85em;
  color: #1a202c;
  border-bottom: 1px solid #edf2f7;
  padding-bottom: 0.5em;
}

.certification-content h3 {
  margin-top: 2em;
  margin-bottom: 0.75em;
  font-weight: 600;
  font-size: 1.5em;
  color: #2d3748;
}

.certification-content h4 {
  margin-top: 1.5em;
  margin-bottom: 0.75em;
  font-weight: 600;
  font-size: 1.25em;
  color: #4a5568;
}

.certification-content p {
  margin-bottom: 1.2em;
  line-height: 1.6;
}

.certification-content strong {
  font-weight: 700;
  color: #2d3748;
}

/* Special styling for the Quick-Glance Summary section */
.certification-content > blockquote:first-of-type {
  background-color: #f7fafc;
  border-left: 4px solid #4299e1;
  border-radius: 0.375em;
  padding: 1.25em;
  margin: 1.5em 0 2.5em;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.certification-content > blockquote:first-of-type > p {
  font-weight: 600;
  color: #2c5282;
  font-size: 1.1em;
  margin-bottom: 0.75em;
}

.certification-content > blockquote:first-of-type + p {
  margin-top: 2em;
}

/* Version Update callout styling */
.certification-content blockquote:not(:first-of-type) {
  background-color: #fff8f1;
  border-left: 4px solid #ed8936;
  border-radius: 0.375em;
  padding: 1em 1.5em;
  margin: 1.5em 0;
  position: relative;
}

.certification-content blockquote:not(:first-of-type) p strong {
  color: #c05621;
}

.certification-content blockquote:not(:first-of-type)::before {
  content: "⚠️";
  position: absolute;
  left: -12px;
  top: -12px;
  background: #fff;
  width: 24px;
  height: 24px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 2px solid #ed8936;
}

/* Fix list formatting with enhanced styling */
.certification-content ul,
.certification-content ol {
  margin-top: 0.75em;
  margin-bottom: 1.75em;
  padding-left: 1.75em;
}

/* Enhanced bullet points for the Quick-Glance Summary */
.certification-content > blockquote:first-of-type ul {
  list-style: none;
  padding-left: 0.5em;
}

.certification-content > blockquote:first-of-type li {
  position: relative;
  padding-left: 1.75em;
  margin-bottom: 0.75em;
}

.certification-content > blockquote:first-of-type li::before {
  content: "";
  position: absolute;
  left: 0;
  top: 0.5em;
  width: 0.75em;
  height: 0.75em;
  background-color: #4299e1;
  border-radius: 50%;
}

/* Regular lists styling */
.certification-content ul:not(.certification-content > blockquote:first-of-type ul) {
  list-style-type: disc;
}

.certification-content ol {
  list-style-type: decimal;
  counter-reset: item;
}

.certification-content ol > li {
  counter-increment: item;
}

.certification-content li {
  margin-bottom: 0.75em;
  position: relative;
}

.certification-content li p {
  margin-bottom: 0.5em;
}

/* Highlight important statistics with accent color */
.certification-content li strong:has(+ %) {
  color: #4299e1;
  font-weight: 700;
}

.certification-content p strong:has(~ %) {
  color: #4299e1;
  font-weight: 700;
}

/* Format certification sections */
.certification-content h3 + ul {
  margin-top: 0.5em;
}

.certification-content h3 + p + ul {
  margin-top: 0.5em;
}

/* Properly format certification description sections */
.certification-content p strong:first-child {
  display: inline-block;
  min-width: 120px;
  font-weight: 700;
}

/* Focus, Topics, Difficulty, Ideal for sections */
.certification-content p:has(> strong:first-child:contains("Focus")),
.certification-content p:has(> strong:first-child:contains("Topics")),
.certification-content p:has(> strong:first-child:contains("Difficulty")),
.certification-content p:has(> strong:first-child:contains("Ideal for")) {
  margin-bottom: 0.5em;
  padding-left: 0.5em;
  border-left: 3px solid #e5e7eb;
}

/* Add spacing between certification descriptions */
.certification-content h3 + p + p {
  margin-top: 0.5em;
}

/* Enhance certification description sections */
.certification-content h3 {
  border-bottom: 1px solid #f3f4f6;
  padding-bottom: 0.5em;
}

/* Enhanced table formatting */
.certification-content table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  margin: 2em 0;
  overflow-x: auto;
  display: block;
  border-radius: 0.5em;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.certification-content table th,
.certification-content table td {
  padding: 1em 1.25em;
  border: 1px solid #e2e8f0;
  text-align: left;
}

.certification-content table th {
  background-color: #edf2f7;
  font-weight: 700;
  color: #2d3748;
  text-transform: uppercase;
  font-size: 0.85em;
  letter-spacing: 0.05em;
  border-bottom: 2px solid #4299e1;
}

/* Zebra striping for rows */
.certification-content table tr:nth-child(even) {
  background-color: #f7fafc;
}

.certification-content table tr:hover {
  background-color: #ebf4ff;
}

/* First table (exam details) special styling */
.certification-content > table:first-of-type {
  border: 1px solid #e2e8f0;
}

.certification-content > table:first-of-type th {
  width: 35%;
}

/* Make the Item column narrower and bold */
.certification-content > table:first-of-type td:first-child {
  font-weight: 600;
  color: #2d3748;
}

/* Second table (study plan) special styling */
.certification-content table:has(th:contains("Week")) {
  border-collapse: collapse;
}

.certification-content table:has(th:contains("Week")) th,
.certification-content table:has(th:contains("Week")) td {
  border: 1px solid #cbd5e0;
}

.certification-content table:has(th:contains("Week")) th {
  background-color: #e6f6ff;
  border-bottom: 2px solid #3182ce;
}

/* Blockquote formatting */
.certification-content blockquote {
  border-left: 4px solid #e5e7eb;
  padding: 0.5em 0 0.5em 1em;
  margin: 1.5em 0;
  background-color: #f9fafb;
  border-radius: 0.25em;
}

.certification-content blockquote p {
  margin: 0.5em 0;
}

.certification-content blockquote strong {
  color: #4b5563;
}

/* Code block formatting */
.certification-content pre {
  background-color: #f9fafb;
  padding: 1em;
  border-radius: 0.25em;
  overflow-x: auto;
  margin: 1.5em 0;
  white-space: pre-wrap;
}

.certification-content code {
  font-family: var(--font-mono);
  font-size: 0.9em;
}

/* Inline code formatting */
.certification-content p code,
.certification-content li code {
  background-color: #f3f4f6;
  padding: 0.2em 0.4em;
  border-radius: 0.25em;
  font-size: 0.9em;
}

/* Improve spacing in lists with descriptions */
.certification-content li > p:first-child {
  margin-bottom: 0.25em;
}

/* Fix anchor link positioning for headings with IDs */
.certification-content h2[id],
.certification-content h3[id],
.certification-content h4[id] {
  scroll-margin-top: 2rem;
}

/* Fix zero-width spaces and special character rendering */
.certification-content {
  word-break: normal;
  overflow-wrap: anywhere;
}

/* Style anchor links */
.certification-content .anchor-link {
  display: block;
  position: relative;
  top: -80px;
  visibility: hidden;
}

/* Better code formatting for preformatted text */
.certification-content pre {
  font-family: var(--font-mono);
  line-height: 1.5;
}

/* Ensure hyphen and dash characters render properly */
.certification-content {
  font-feature-settings: "liga" 0;
  text-rendering: optimizeSpeed;
}

/* Table responsiveness fix */
.certification-content table {
  display: block;
  width: 100%;
  overflow-x: auto;
}

/* Additional spacing after horizontal rules */
.certification-content hr {
  margin: 2em 0;
}

/* Accessibility improvements */
.certification-content a:focus {
  outline: 2px solid var(--color-ring);
  outline-offset: 2px;
}

/* Table of contents hover state */
.certification-content table + .table-of-contents-heading {
  margin-top: 2.5em;
}
</file>

<file path="components/content/SocialShare.tsx">
'use client';

import React, { useState } from 'react';

interface SocialShareProps {
  title: string;
  url: string;
  description?: string;
  className?: string;
}

export default function SocialShare({ 
  title, 
  url, 
  description = '', 
  className = '' 
}: SocialShareProps) {
  const [copied, setCopied] = useState(false);
  
  // Ensure we're using the full URL and correct path format
  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://testero.ai';
  
  // Make sure URL is properly formatted with /content/ prefix for hub and spoke content
  let formattedUrl = url;
  if (url.startsWith('/hub/')) {
    formattedUrl = `/content${url}`;
  } else if (!url.startsWith('/content/') && (url.includes('/hub/') || url.includes('/spoke/'))) {
    formattedUrl = `/content${url.substring(url.indexOf('/'))}`;
  }
  
  const fullUrl = formattedUrl.startsWith('http') ? formattedUrl : `${baseUrl}${formattedUrl}`;
  
  // Prepare sharing URLs
  const shareUrls = {
    twitter: `https://twitter.com/intent/tweet?text=${encodeURIComponent(title)}&url=${encodeURIComponent(fullUrl)}`,
    linkedin: `https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(fullUrl)}&title=${encodeURIComponent(title)}&summary=${encodeURIComponent(description)}`,
    facebook: `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(fullUrl)}`,
  };
  
  // Copy URL to clipboard
  const copyToClipboard = () => {
    navigator.clipboard.writeText(fullUrl).then(() => {
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    });
  };
  
  return (
    <div className={`flex items-center space-x-4 ${className}`}>
      <span className="text-gray-500 text-sm">Share:</span>
      
      {/* Twitter/X */}
      <a 
        href={shareUrls.twitter} 
        target="_blank" 
        rel="noopener noreferrer"
        className="text-gray-600 hover:text-blue-400 transition-colors"
        aria-label="Share on Twitter"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
          <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"></path>
        </svg>
      </a>
      
      {/* LinkedIn */}
      <a 
        href={shareUrls.linkedin} 
        target="_blank" 
        rel="noopener noreferrer"
        className="text-gray-600 hover:text-blue-600 transition-colors"
        aria-label="Share on LinkedIn"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
          <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
        </svg>
      </a>
      
      {/* Facebook */}
      <a 
        href={shareUrls.facebook} 
        target="_blank" 
        rel="noopener noreferrer"
        className="text-gray-600 hover:text-blue-800 transition-colors"
        aria-label="Share on Facebook"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
          <path d="M9.032 23L9 13H5V9h4V6.5C9 2.789 11.298 1 14.61 1c1.585 0 2.948.118 3.345.17v3.88H15.66c-1.315 0-1.57.623-1.57 1.536V9h4.34l-1 4h-3.34v10H9.032z"/>
        </svg>
      </a>
      
      {/* Copy Link Button */}
      <button 
        onClick={copyToClipboard}
        className="text-gray-600 hover:text-blue-600 transition-colors focus:outline-none"
        aria-label="Copy link"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
          <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
        </svg>
        {copied && (
          <span className="absolute -mt-8 ml-2 bg-gray-800 text-white text-xs px-2 py-1 rounded">
            Copied!
          </span>
        )}
      </button>
    </div>
  );
}
</file>

<file path="components/providers/PostHogProvider.tsx">
'use client'
import { PostHogProvider as PHProvider, usePostHog } from 'posthog-js/react'
import posthog from 'posthog-js'
import { usePathname, useSearchParams } from 'next/navigation'
import { useEffect, ReactNode, Suspense } from 'react' // Import Suspense

// Check that PostHog is client-side (used to handle Next.js SSR)
if (typeof window !== 'undefined') {
  posthog.init(process.env.NEXT_PUBLIC_POSTHOG_KEY!, {
    api_host: process.env.NEXT_PUBLIC_POSTHOG_HOST!,
    // Disable web vitals tracking to prevent console errors
    capture_pageview: false, // We'll handle pageviews manually
    // Enable debug mode in development
    loaded: (posthog) => {
      if (process.env.NODE_ENV === 'development') posthog.debug()
    }
  })
}

function PostHogPageview(): null {
  const pathname = usePathname()
  const searchParams = useSearchParams()
  const posthog = usePostHog()

  // Track pageviews
  useEffect(() => {
    if (pathname && posthog) {
      let url = window.origin + pathname
      if (searchParams && searchParams.toString()) {
        url = url + `?${searchParams.toString()}`
      }
      posthog.capture(
        '$pageview',
        {
          '$current_url': url,
        }
      )
    }
  }, [pathname, searchParams, posthog])

  return null
}

export function PostHogProvider({ children }: { children: ReactNode }) {
  return (
    <PHProvider client={posthog}>
      {children}
      {/* Wrap PostHogPageview in Suspense */}
      <Suspense fallback={null}>
        <PostHogPageview />
      </Suspense>
    </PHProvider>
  )
}
</file>

<file path="components/ui/final-cta-section.tsx">
"use client";

import React from "react";
import { WaitlistForm } from "@/components/ui/waitlist-form";
import { motion } from "framer-motion";

export function FinalCtaSection() {
  return (
    <section className="w-full bg-gradient-to-br from-orange-50 via-orange-100 to-orange-50 py-10 sm:py-16 md:py-24 px-4 sm:px-6 text-center relative overflow-hidden">
      {/* Enhanced Background Elements */}
      <div className="absolute inset-0 overflow-hidden" aria-hidden="true">
        <div className="absolute top-0 right-0 opacity-20 transform translate-x-1/4 -translate-y-1/4">
          <svg width="400" height="400" viewBox="0 0 400 400" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="200" cy="200" r="180" stroke="#ED8936" strokeWidth="2" strokeDasharray="8 8"/>
            <circle cx="200" cy="200" r="120" stroke="#ED8936" strokeWidth="2" strokeDasharray="6 6"/>
            <circle cx="200" cy="200" r="60" stroke="#ED8936" strokeWidth="2" strokeDasharray="4 4"/>
          </svg>
        </div>
        <div className="absolute bottom-0 left-0 opacity-20 transform -translate-x-1/4 translate-y-1/4">
          <svg width="320" height="320" viewBox="0 0 320 320" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect x="40" y="40" width="240" height="240" stroke="#ED8936" strokeWidth="2" strokeDasharray="6 6"/>
            <rect x="80" y="80" width="160" height="160" stroke="#ED8936" strokeWidth="2" strokeDasharray="4 4"/>
          </svg>
        </div>
        {/* Subtle diagonal lines */}
        <div className="absolute inset-0 opacity-10" style={{ 
          backgroundImage: "repeating-linear-gradient(45deg, #ED8936, #ED8936 1px, transparent 1px, transparent 20px)" 
        }}></div>
      </div>
      
      <div className="max-w-4xl mx-auto space-y-8 relative z-10">
        {/* Attention grabber with pulse animation */}
        <motion.div 
          className="mb-8 inline-block"
          animate={{ scale: [1, 1.05, 1] }}
          transition={{ duration: 2, repeat: Infinity }}
        >
          <span className="bg-gradient-to-r from-orange-500 to-orange-600 text-white px-5 py-2.5 rounded-full text-sm font-medium shadow-md">
            <span className="mr-2" aria-hidden="true">🔥</span>
            Limited Time Cloud Certification Offer
            <span className="ml-2" aria-hidden="true">🔥</span>
          </span>
        </motion.div>
        
        {/* Headline with more emphasis */}
        <h2 
          id="final-cta-heading"
          className="text-2xl sm:text-3xl md:text-5xl font-bold leading-tight text-slate-800 drop-shadow-sm"
        >
          Unlock Your <span className="text-orange-500">Fastest Path</span> to Google Cloud, AWS, and Azure Certification
          <br />
          Join the Waitlist Now
        </h2>
        
        {/* Value proposition with enhanced highlight */}
        <p className="text-base sm:text-lg md:text-xl text-slate-700 max-w-2xl mx-auto leading-relaxed">
          Be first to access Testero&apos;s AI-powered cloud certification platform and transform your study routine. Limited spots for Google Cloud, AWS, and Azure certification preparation. Secure your advantage today.
        </p>
        
        {/* Feature bullets with icons */}
        <ul className="flex flex-col md:flex-row gap-4 justify-center text-left max-w-2xl mx-auto" role="list">
          <li className="bg-white bg-opacity-70 backdrop-blur-sm p-4 rounded-lg border border-orange-200 flex items-start gap-3 flex-1">
            <div className="bg-orange-100 p-2 rounded-full text-orange-600" aria-hidden="true">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
                <path strokeLinecap="round" strokeLinejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
              </svg>
            </div>
            <div>
              <h3 className="font-semibold text-slate-800">Priority Cloud Certification Access</h3>
              <p className="text-sm text-slate-600">Be among the first to use Testero for your cloud certifications in July 2025.</p>
            </div>
          </li>
          
          <li className="bg-white bg-opacity-70 backdrop-blur-sm p-4 rounded-lg border border-orange-200 flex items-start gap-3 flex-1">
            <div className="bg-orange-100 p-2 rounded-full text-orange-600" aria-hidden="true">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
                <path strokeLinecap="round" strokeLinejoin="round" d="M9 14.25l6-6m4.5-3.493V21.75l-3.75-1.5-3.75 1.5-3.75-1.5-3.75 1.5V4.757c0-1.108.806-2.057 1.907-2.185a48.507 48.507 0 0 1 11.186 0c1.1.128 1.907 1.077 1.907 2.185Z" />
              </svg>
            </div>
            <div>
              <h3 className="font-semibold text-slate-800">30% Lifetime Certification Discount</h3>
              <p className="text-sm text-slate-600">Lock in your permanent Pro plan discount for all cloud certification prep.</p>
            </div>
          </li>
        </ul>
          
          {/* Enhanced Form Container with floating label effect */}
          <div className="pt-6 mx-auto max-w-md">
            <motion.div 
              className="bg-white p-4 sm:p-6 md:p-8 rounded-xl shadow-xl border border-orange-200"
              initial={{ y: 20, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ duration: 0.5 }}
            >
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-xl font-semibold text-slate-800" id="waitlist-form-heading">Join the Cloud Certification Waitlist</h3>
                <div className="bg-orange-100 text-orange-700 text-sm font-medium px-3 py-1 rounded-full flex items-center">
                  <span className="inline-block w-2 h-2 bg-orange-500 rounded-full mr-2 animate-pulse" aria-hidden="true"></span>
                  <span aria-live="polite">300 spots left</span>
                </div>
              </div>
            
            <WaitlistForm 
              includeExamDropdown={true} 
              buttonText="Claim My Cloud Certification Discount" 
              className="space-y-5"
              ctaLocation="final_cta_section"
              aria-labelledby="waitlist-form-heading"
            />
            
            {/* Trust indicators */}
            <ul className="flex flex-col gap-2 mt-4" aria-label="Trust guarantees">
              <li className="flex items-center text-xs text-slate-500">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4 mr-1 text-green-500" aria-hidden="true">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                </svg>
                100% privacy. Your certification prep info stays safe, always.
              </li>
              <li className="flex items-center text-xs text-slate-500">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4 mr-1 text-green-500" aria-hidden="true">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                </svg>
                No risk. Cancel your cloud certification prep anytime, no obligation.
              </li>
            </ul>
          </motion.div>
        </div>
        
        {/* Countdown and social proof */}
        <div className="flex flex-col md:flex-row items-center justify-center gap-2 md:gap-6 text-sm text-slate-600">
          <div className="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4 mr-1 text-orange-500" aria-hidden="true">
              <path strokeLinecap="round" strokeLinejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
            </svg>
            Cloud certification early access begins July 2025
          </div>
          <div className="h-1 w-1 bg-slate-300 rounded-full hidden md:block" aria-hidden="true"></div>
          <div className="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4 mr-1 text-orange-500" aria-hidden="true">
              <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z" />
            </svg>
            Join 1,200+ cloud certification professionals already on the waitlist
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="components/ui/social-proof-section.tsx">
"use client";

import { useState } from 'react';
import { cn } from '@/lib/utils';
import { colors } from '@/lib/design-system/colors';
import { duration, easing } from '@/lib/design-system/animations';

interface SocialProofCardProps {
  icon: React.ReactNode;
  title: string;
  subtitle: string;
  color: string;
  delay?: number;
}

const SocialProofCard: React.FC<SocialProofCardProps> = ({ 
  icon, 
  title, 
  subtitle,
  color,
  delay = 0
}) => {
  const [isHovered, setIsHovered] = useState(false);

  return (
    <article 
      className={cn(
        "bg-white p-4 sm:p-6 rounded-lg shadow-md border border-slate-100",
        "transform transition-all duration-300",
        "hover:shadow-lg hover:-translate-y-1"
      )}
      style={{
        animationDelay: `${delay}ms`,
        animationFillMode: 'both',
        animation: `fadeInUp ${duration.slow}ms ${easing.spring} forwards`,
        opacity: 0,
        transform: 'translateY(20px)'
      }}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <div className="flex flex-col items-center">
        <div 
          className={cn(
            "w-12 h-12 mb-4 rounded-full flex items-center justify-center transition-transform",
            isHovered ? "scale-110" : "scale-100"
          )}
          style={{ 
            backgroundColor: `${color}50`, // Lightened version of the color
            transition: `transform ${duration.fast}ms ${easing.spring}`
          }}
          aria-hidden="true"
        >
          <div className="text-[color] transition-all" style={{ color }}>
            {icon}
          </div>
        </div>
        
        <h3 className={cn(
          "text-center transition-all duration-300",
          isHovered ? "text-3xl font-bold" : "text-2xl font-semibold", 
          title.length > 10 ? "text-lg" : "text-xl"
        )}>
          {title}
        </h3>
        
        <p className="text-slate-600 text-center">{subtitle}</p>
      </div>
    </article>
  );
};

// Animation for staggered card appearance
const fadeInUp = `
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
`;

export function SocialProofSection() {
  return (
    <section className="w-full bg-slate-100 py-8 sm:py-12 md:py-20 px-4 sm:px-6 relative">
      {/* Add styles to head for animations */}
      <style jsx global>{fadeInUp}</style>
      
      {/* Subtle background pattern */}
      <div className="absolute inset-0 opacity-5 overflow-hidden" aria-hidden="true">
        <div className="grid grid-cols-10 grid-rows-10 w-full h-full">
          {Array.from({ length: 100 }).map((_, i) => (
            <div key={i} className="border-b border-r border-slate-500"></div>
          ))}
        </div>
      </div>
      
      <div className="max-w-5xl mx-auto text-center space-y-8 relative z-10">
        <h2 
          id="social-proof-heading"
          className={cn(
            "text-xl sm:text-2xl md:text-3xl font-semibold text-slate-700",
            "opacity-0"
          )}
          style={{
            animation: `fadeInUp ${duration.slow}ms ${easing.spring} forwards`,
            animationDelay: `${duration.fast}ms`
          }}
        >
          Join 1,200+ Cloud Certification Professionals Already Preparing with Testero
        </h2>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 pt-4" role="list">
          {/* Card 1: Waitlist Count */}
          <SocialProofCard
            icon={
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M15 19.128a9.38 9.38 0 0 0 2.625.372 9.337 9.337 0 0 0 4.121-.952 4.125 4.125 0 0 0-7.533-2.493M15 19.128v-.003c0-1.113-.285-2.16-.786-3.07M15 19.128v.106A12.318 12.318 0 0 1 8.624 21c-2.331 0-4.512-.645-6.374-1.766l-.001-.109a6.375 6.375 0 0 1 11.964-3.07M12 6.375a3.375 3.375 0 1 1-6.75 0 3.375 3.375 0 0 1 6.75 0Zm8.25 2.25a2.625 2.625 0 1 1-5.25 0 2.625 2.625 0 0 1 5.25 0Z" />
              </svg>
            }
            title="1,200+ Cloud Certification Pros"
            subtitle="Already on the Testero Waitlist"
            color={colors.primary[400]}
            delay={duration.fast * 2}
          />
          
          {/* Card 2: Founder */}
          <SocialProofCard
            icon={
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75 11.25 15 15 9.75M21 12c0 1.268-.63 2.39-1.593 3.068a3.745 3.745 0 0 1-1.043 3.296 3.745 3.745 0 0 1-3.296 1.043A3.745 3.745 0 0 1 12 21c-1.268 0-2.39-.63-3.068-1.593a3.746 3.746 0 0 1-3.296-1.043 3.745 3.745 0 0 1-1.043-3.296A3.745 3.745 0 0 1 3 12c0-1.268.63-2.39 1.593-3.068a3.745 3.745 0 0 1 1.043-3.296 3.746 3.746 0 0 1 3.296-1.043A3.746 3.746 0 0 1 12 3c1.268 0 2.39.63 3.068 1.593a3.746 3.746 0 0 1 3.296 1.043 3.746 3.746 0 0 1 1.043 3.296A3.745 3.745 0 0 1 21 12Z" />
              </svg>
            }
            title="Built by Cloud Certification Experts"
            subtitle="Ex-Google Cloud PSO Leadership Team"
            color={colors.feedback.success.base}
            delay={duration.fast * 3}
          />
          
          {/* Card 3: Featured */}
          <SocialProofCard
            icon={
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M11.48 3.499a.562.562 0 0 1 1.04 0l2.125 5.111a.563.563 0 0 0 .475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 0 0-.182.557l1.285 5.385a.562.562 0 0 1-.84.61l-4.725-2.885a.562.562 0 0 0-.586 0L6.982 20.54a.562.562 0 0 1-.84-.61l1.285-5.386a.562.562 0 0 0-.182-.557l-4.204-3.602a.562.562 0 0 1 .321-.988l5.518-.442a.563.563 0 0 0 .475-.345L11.48 3.5Z" />
              </svg>
            }
            title="Award-Winning Platform"
            subtitle="Product Hunt Top Launch for Certification Tools"
            color={colors.accent[400]}
            delay={duration.fast * 4}
          />
          
          {/* Card 4: Testimonial */}
          <SocialProofCard
            icon={
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
              </svg>
            }
            title="Real Cloud Certification Results"
            subtitle='&quot;Cut my GCP certification study time in half!&quot;'
            color={colors.accent[600]}
            delay={duration.fast * 5}
          />
        </div>
        
        {/* Additional Testimonial Row (Optional) */}
        <figure 
          className="mt-8 sm:mt-12 bg-white rounded-xl p-4 sm:p-6 shadow-md border border-slate-200 max-w-2xl mx-auto opacity-0"
          style={{
            animation: `fadeInUp ${duration.slow}ms ${easing.spring} forwards`,
            animationDelay: `${duration.fast * 6}ms`
          }}
        >
          <h3 className="sr-only">Customer Testimonial</h3>
          <blockquote className="text-base sm:text-lg italic text-slate-700">
            &quot;Testero&apos;s AI-powered practice questions helped me focus on what matters most for my Google Cloud certification. I felt more confident and passed my Professional Cloud Architect exam on the first try!&quot;
          </blockquote>
          <figcaption className="mt-4 flex items-center justify-center">
            <div className="w-10 h-10 bg-slate-200 rounded-full flex items-center justify-center text-slate-700 font-medium" aria-hidden="true">JD</div>
            <div className="ml-3 text-left">
              <p className="font-medium">Jane Doe</p>
              <p className="text-sm text-slate-500">Senior Google Cloud Architect</p>
            </div>
          </figcaption>
        </figure>
        
        {/* Logos Section (Placeholder - Replace with actual partner logos when available) */}
        <div 
          className="mt-16 opacity-0"
          style={{
            animation: `fadeInUp ${duration.slow}ms ${easing.spring} forwards`,
            animationDelay: `${duration.fast * 7}ms`
          }}
        >
          <h3 className="text-sm uppercase tracking-wide text-slate-500 mb-6" id="certification-communities">Recognized by Leading Cloud Certification Communities</h3>
          <ul className="flex flex-wrap justify-center gap-4 sm:gap-8 opacity-60" aria-labelledby="certification-communities">
            {/* These are placeholder grayscale logo elements - replace with actual partner logos */}
            <li className="w-24 h-12 bg-slate-200 rounded flex items-center justify-center text-slate-400">GCP Community</li>
            <li className="w-24 h-12 bg-slate-200 rounded flex items-center justify-center text-slate-400">AWS Experts</li>
            <li className="w-24 h-12 bg-slate-200 rounded flex items-center justify-center text-slate-400">Azure Guild</li>
          </ul>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="DEPLOYMENT.md">
# Testero Frontend Deployment Guide

This guide explains how to deploy the Testero frontend application to Google Cloud Platform (GCP) Cloud Run.

## Prerequisites

Before deploying, ensure you have the following:

1. A GCP account with billing enabled
2. The [Google Cloud SDK](https://cloud.google.com/sdk/docs/install) installed and configured
3. Docker installed on your local machine (for local testing)
4. Necessary permissions to create and manage GCP resources

## Configuration Files

The deployment setup includes the following files:

- `Dockerfile`: Defines how to build the container image
- `.dockerignore`: Specifies which files to exclude from the Docker build
- `cloudbuild.yaml`: Configures the automated build and deployment process
- `next.config.mjs`: Configured with `output: 'standalone'` for optimal containerization

## Manual Deployment Steps

### 1. Build the Docker image locally (optional, for testing)

```bash
docker build -t testero-frontend .
docker run -p 3000:3000 testero-frontend
```

Visit `http://localhost:3000` to verify the application works correctly.

### 2. Set up GCP Project

If you haven't already, create a new GCP project or select an existing one:

```bash
gcloud projects create testero-project --name="Testero Project"
gcloud config set project testero-project
```

### 3. Enable required APIs

```bash
gcloud services enable cloudbuild.googleapis.com
gcloud services enable run.googleapis.com
gcloud services enable artifactregistry.googleapis.com
```

### 3.1. Create Artifact Registry repository

We've provided a script to create and configure the Artifact Registry repository:

```bash
# Make the script executable
chmod +x scripts/setup-artifact-registry.sh

# Run the script
./scripts/setup-artifact-registry.sh
```

This script will:
1. Check if the repository already exists
2. Create a Docker repository named `testero` in the us-central1 region if it doesn't exist
3. Set up lifecycle policies for automatic cleanup:
   - Keep only the 10 most recent versions (excluding 'latest' and semantic version tags)
   - Remove untagged images older than 14 days

Alternatively, you can create the repository manually:

```bash
gcloud artifacts repositories create testero \
  --repository-format=docker \
  --location=us-central1 \
  --description="Docker repository for Testero frontend"
```

Note that the manual approach doesn't set up lifecycle policies.

### 4. Build and deploy manually

```bash
# Configure Docker to use Google Cloud as a credential helper
gcloud auth configure-docker us-central1-docker.pkg.dev

# Build and tag the image
docker build -t us-central1-docker.pkg.dev/testero-project/testero/frontend:latest .

# Push to Artifact Registry
docker push us-central1-docker.pkg.dev/testero-project/testero/frontend:latest

# Deploy to Cloud Run
gcloud run deploy testero-frontend \
  --image=us-central1-docker.pkg.dev/testero-project/testero/frontend:latest \
  --region=us-central1 \
  --platform=managed \
  --allow-unauthenticated \
  --memory=1Gi \
  --cpu=1 \
  --min-instances=0 \
  --max-instances=10 \
  --port=3000 \
  --set-env-vars=NODE_ENV=production
```

## Automated Deployment

### GitHub Actions

For automated CI/CD deployment using GitHub Actions:

1. Set up the required GitHub secrets as described in [GitHub Secrets Setup](./docs/github-secrets-setup.md)
2. Push to the main branch to trigger the full CI/CD pipeline
3. Create pull requests to run code quality checks and build verification without deployment

The comprehensive CI/CD pipeline is configured in `.github/workflows/deploy-to-cloud-run.yml` and includes:

- **Code Quality Checks**: Linting and type checking
- **Build Verification**: Building and pushing Docker images
- **Deployment**: Deploying to Cloud Run (only on main branch)

The workflow provides:
- Automated quality checks for all pull requests
- Build verification without deployment for pull requests
- Full deployment pipeline for main branch pushes
- Status notifications for deployment success or failure

See [GitHub Actions Deployment](./docs/github-actions-deployment.md) for detailed information about the CI/CD pipeline.

### Cloud Build (Alternative)

Alternatively, you can use Cloud Build for automated CI/CD deployment:

1. Connect your GitHub repository to Cloud Build
2. Create a trigger that uses the `cloudbuild.yaml` configuration

```bash
gcloud builds triggers create github \
  --repo=your-repo-name \
  --branch-pattern=main \
  --build-config=cloudbuild.yaml
```

Now, every push to the main branch will trigger a build and deployment to Cloud Run.

## Cloud Run Configuration

The Cloud Run service is configured with:

- **Memory**: 1GB
- **CPU**: 1 vCPU
- **Concurrency**: Default (80)
- **Scaling**: Min instances = 0, Max instances = 10
- **Authentication**: Public (allow unauthenticated)
- **Region**: us-central1 (change as needed)

## Environment Variables

The following environment variables are set in the Cloud Run service:

- `NODE_ENV=production`

Add additional environment variables as needed:

```bash
gcloud run services update testero-frontend \
  --set-env-vars=KEY1=VALUE1,KEY2=VALUE2
```

## Custom Domain Setup

To map a custom domain to your Cloud Run service:

1. Verify domain ownership in GCP
2. Map the domain to your service:

```bash
gcloud beta run domain-mappings create \
  --service=testero-frontend \
  --domain=www.yourdomain.com \
  --region=us-central1
```

3. Update your DNS records as instructed by GCP

## Monitoring and Logging

- View logs in the GCP Console under Cloud Run > testero-frontend > Logs
- Set up alerts for errors or high latency in Cloud Monitoring
- Monitor resource usage in the Cloud Run dashboard

## Troubleshooting

If you encounter issues:

1. Check the container logs in Cloud Run
2. Verify the build logs in Cloud Build
3. Test the container locally to isolate the issue
4. Ensure all required environment variables are set
5. Check for any region-specific issues

For specific issues with Artifact Registry (such as 404 errors when pushing images), refer to our detailed troubleshooting guide:
- [Troubleshooting Artifact Registry Issues](./docs/troubleshooting-artifact-registry.md)

We've also provided a troubleshooting script that can automatically identify and fix common issues:
```bash
# Make the script executable
chmod +x scripts/troubleshoot-artifact-registry.sh

# Run the script
./scripts/troubleshoot-artifact-registry.sh
```

## Cost Management

Cloud Run charges based on:
- Number of requests
- Time spent processing requests
- Memory and CPU allocated

Setting min-instances to 0 allows the service to scale to zero when not in use, minimizing costs.
</file>

<file path="next.config.mjs">
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'standalone',
  // Configure image optimization
  images: {
    formats: ['image/webp', 'image/avif'],
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048],
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
    domains: [],
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'storage.googleapis.com',
        pathname: '/**',
      },
    ],
    minimumCacheTTL: 60,
    dangerouslyAllowSVG: false,
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
  },
};

export default nextConfig;
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss"

const config = {
  darkMode: "class",
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
	],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate"), require("@tailwindcss/typography")],
} satisfies Config

export default config
</file>

<file path="app/content/hub/google-cloud-certification-guide.md">
---
title: "The Ultimate Google Cloud Certification Guide for 2025"
description: "A comprehensive roadmap to Google Cloud certifications – which one to choose, how to prepare, and what to expect on exam day."
date: "2025-05-03"
author: "Testero Team"
tags: ["Google Cloud", "Certification", "Cloud Computing", "Career Development"]
coverImage: "/images/google-cloud-certification-guide.jpg"
---

# The Ultimate Google Cloud Certification Guide for 2025

In today's competitive tech landscape, cloud skills are no longer optional – they're essential. With Google Cloud Platform (GCP) continuing to gain market share against AWS and Azure, Google Cloud certifications have become valuable credentials that can significantly boost your career prospects and earning potential.

But with multiple certification paths available, how do you choose the right one? And once you've decided, what's the best way to prepare?

This comprehensive guide will walk you through everything you need to know about Google Cloud certifications in 2025, from choosing your path to acing the exam. (See also: [What is Google Cloud certification?](/faq/what-is-google-cloud-certification))

## Why Get Google Cloud Certified?

Before diving into the specifics, let's address the fundamental question: why should you invest time and money in a Google Cloud certification? (Related: [Is Google Cloud certification worth it?](/faq/is-google-cloud-certification-worth-it))

### Industry Recognition and Demand

- **Growing Market Share**: Google Cloud continues to expand its footprint, with a 34% increase in enterprise adoption over the past year
- **Salary Premium**: On average, cloud-certified professionals earn 25-30% more than their non-certified peers
- **Hiring Advantage**: 93% of IT managers consider cloud certifications when making hiring decisions

### Career Advancement Benefits

- **Validated Expertise**: Demonstrate your GCP knowledge with an industry-recognized credential
- **Internal Mobility**: Unlock new opportunities within your current organization
- **External Opportunities**: Stand out in a competitive job market

### Personal and Professional Development

- **Structured Learning**: Follow a comprehensive curriculum that covers essential GCP services and best practices
- **Hands-on Skills**: Develop practical abilities that directly apply to real-world scenarios
- **Continued Education**: Keep your cloud knowledge current in a rapidly evolving field

## Google Cloud Certification Paths

Google offers a range of certifications designed for different roles and experience levels. Here's a breakdown of the main certification paths available in 2025:

### Foundational Level

**Cloud Digital Leader**

- **Focus**: Business and non-technical roles
- **Topics**: Cloud concepts, GCP services, business transformation
- **Difficulty**: Entry-level, no technical prerequisites
- **Ideal for**: Business leaders, product managers, non-technical professionals (FAQ: [How much does Google Cloud Digital Leader cost?](/faq/how-much-does-google-cloud-digital-leader-cost))

### Associate Level

**Associate Cloud Engineer**

- **Focus**: Day-to-day cloud operations and maintenance
- **Topics**: Deploying applications, monitoring services, managing enterprise solutions (Learn about [the five sections of the Associate Cloud Engineer exam](/faq/what-are-the-five-sections-of-the-associate-cloud-engineer-certification-by-google))
- **Difficulty**: Intermediate, requires basic technical knowledge
- **Ideal for**: Cloud administrators, DevOps engineers, IT professionals

### Professional Level

**Professional Cloud Architect**

- **Focus**: Designing, developing, and managing robust cloud solutions
- **Topics**: Solution design, security, compliance, reliability
- **Difficulty**: Advanced, requires substantial cloud experience
- **Ideal for**: Solutions architects, cloud consultants, technical leads

**Professional Data Engineer**

- **Focus**: Data processing systems and machine learning models
- **Topics**: Data processing, pipeline design, machine learning implementation
- **Difficulty**: Advanced, requires data engineering background
- **Ideal for**: Data engineers, ETL developers, data scientists

**Professional Cloud DevOps Engineer**

- **Focus**: Efficient development operations and service reliability
- **Topics**: CI/CD pipelines, monitoring, service management
- **Difficulty**: Advanced, requires DevOps experience
- **Ideal for**: DevOps engineers, SRE professionals, platform engineers

**Professional Cloud Security Engineer**

- **Focus**: Security in Google Cloud environments
- **Topics**: Security controls, identity management, compliance
- **Difficulty**: Advanced, requires security background
- **Ideal for**: Security engineers, compliance specialists, cloud administrators

**Professional Cloud Network Engineer**

- **Focus**: GCP networking design and implementation
- **Topics**: VPC design, hybrid connectivity, network services
- **Difficulty**: Advanced, requires networking experience
- **Ideal for**: Network engineers, cloud architects, infrastructure specialists

**Professional Cloud Database Engineer**

- **Focus**: Database deployment, migration, and management
- **Topics**: Database design, migration strategies, performance optimization
- **Difficulty**: Advanced, requires database experience
- **Ideal for**: Database administrators, data architects, application developers

## How to Choose the Right Certification

With so many options, selecting the right certification path can be challenging. Consider these factors:

### 1. Your Current Role and Experience

- Match the certification to your existing skills and experience
- Consider the learning curve required for each path

### 2. Career Goals

- Identify which certification aligns with your desired career trajectory
- Research job postings to see which certifications are in demand

### 3. Company Needs

- Determine which Google Cloud technologies your organization uses or plans to adopt
- Consider skills gaps within your team or department

### 4. Personal Interest

- Choose a subject area that genuinely interests you
- Passion for the material will make the learning process more enjoyable and effective

## Certification Preparation Strategy

Once you've chosen your certification path, follow these steps to prepare effectively:

### 1. Understand the Exam Format

Each Google Cloud certification exam has its own format, including:

- Number of questions (typically 50-60)
- Time limit (usually 2 hours)
- Passing score (typically 70-80%)
- Question types (multiple choice, multiple select)

### 2. Review the Exam Guide

Google provides detailed exam guides for each certification, outlining:

- Topics covered
- Percentage breakdown by domain
- Sample questions
- Recommended experience

### 3. Develop a Study Plan

Create a structured study plan based on your available time and learning style:

- **Timeline**: Allow 2-3 months for preparation, depending on experience
- **Schedule**: Dedicate regular time slots for studying
- **Topics**: Prioritize domains with higher percentage weights
- **Resources**: Combine different learning materials and approaches (Learn [how to register for Google Cloud certification](/faq/how-do-you-register-for-google-cloud-certification))

### 4. Use Official Training Resources

Google offers several official training resources:

- **Google Cloud Skills Boost**: Interactive courses and labs
- **Training courses**: Instructor-led and on-demand options
- **Documentation**: Comprehensive service documentation
- **Architecture Center**: Reference architectures and best practices

### 5. Gain Hands-on Experience

Theoretical knowledge alone isn't enough—practical experience is crucial:

- **Google Cloud Free Tier**: Experiment with core services for free
- **Qwiklabs**: Complete hands-on labs to build practical skills
- **Personal Projects**: Build your own solutions using GCP services
- **Work Projects**: Apply concepts to real-world scenarios when possible

### 6. Take Practice Exams

Assess your readiness with practice exams:

- **Official Sample Questions**: Available in the exam guide
- **Practice Tests**: From Google and third-party providers
- **Self-Assessment**: Create your own scenarios to test understanding

## Exam Day Preparation

When exam day approaches, follow these tips to maximize your chances of success:

### Before the Exam

- Get a good night's sleep
- Review key concepts and service limits
- Prepare required identification
- Test your equipment if taking the exam remotely

### During the Exam

- Read each question carefully
- Manage your time (approximately 2 minutes per question)
- Flag difficult questions and return to them later
- Eliminate obviously incorrect answers

### After the Exam

- Review your performance
- Identify knowledge gaps if you need to retake
- Share your accomplishment if you pass
- Plan your next certification step

## Maintaining Your Certification

Google Cloud certifications are valid for two years. To maintain certification status:

- Stay current with GCP developments
- Recertify before expiration
- Consider pursuing additional certifications
- Apply your knowledge in real-world scenarios

## Conclusion

Google Cloud certifications represent a valuable investment in your professional development and career advancement. By choosing the right certification path, following a structured preparation strategy, and committing to continuous learning, you can position yourself as a highly qualified Google Cloud professional in the increasingly competitive tech landscape.

Ready to start your Google Cloud certification journey? Check out our in-depth guides for specific certification paths, including the [Google Cloud Digital Leader Certification](https://testero.ai/content/spoke/google-cloud-digital-leader-certification), [Professional Cloud Architect](https://testero.ai/content/spoke/professional-cloud-architect-certification), and [Professional Machine Learning Engineer](https://testero.ai/content/spoke/google-professional-machine-learning-engineer-certification).
</file>

<file path="app/content/hub/google-data-analytics-professional-certificate-2025-guide.md">
---
title: "Google Data Analytics Professional Certificate: 2025 Guide"
description: "Does the Google Data Analytics Certificate deliver on its promise in 2025? This guide explores costs, outcomes, and whether it's the right investment for aspiring analysts."
date: "2025-05-04"
author: "Testero Team"
tags: ["Google", "Data Analytics", "Certification", "Coursera", "Career Development"]
coverImage: "/images/google-data-analytics-professional.jpg"
---

# Google Data Analytics Professional Certificate: 2025 Guide

Stuck at a career crossroads? The Google Data Analytics Certificate promises to transform beginners into job-ready analysts in just months. But in 2025's competitive tech landscape, does it actually deliver on that promise? Let's cut through the marketing hype and dig into what matters: real costs, actual outcomes, and whether this investment will truly pay off for you.

## What Is the Google Data Analytics Certificate?

Picture this: You're sitting at your desk six months from now, confidently manipulating massive datasets that once seemed like incomprehensible strings of numbers. This is exactly what Google's Data Analytics Certificate aims to help you achieve.

But what exactly is it?

This entry-level program throws open the doors to data analytics for complete beginners. Hosted on Coursera and created by Google, it's designed for career switchers, upskillers, and analytics newbies looking to break into the field without a specialized degree.

The certificate packs eight courses that mimic real-world analysis projects. You'll journey through the complete data lifecycle – from framing smart questions to cleaning messy data and creating visualizations that tell compelling stories.

What tools will you master? The program covers spreadsheets, SQL, R programming, and Tableau – the bread and butter of entry-level data analyst positions.

Don't confuse it with the "Google Advanced Data Analytics Certificate" though. The standard certificate builds fundamental skills for beginners, while the Advanced version kicks things up several notches with statistical analysis, Python, regression models, and machine learning.

**Bottom line:** The Google Data Analytics Certificate is your entry ramp to the data highway – accessible to beginners and focused on building practical, job-ready skills that employers actually want.

## Cost Breakdown and Time Commitment

Ever wondered if you'll need to empty your savings account for decent tech training? I've got good news.

The Google Data Analytics Certificate runs $49 monthly in the U.S. and Canada, after a 7-day free trial. That means your final bill depends entirely on how quickly you power through the material.

Most people carve out about 10 hours weekly and finish in 3-6 months:

- [How long to complete the Google Data Analytics certification?](/faq/how-long-to-complete-google-data-analytics-certification)
- [How long does the Google Data Analytics certification take?](/faq/how-long-does-the-google-data-analytics-certification-take)

- Sprint through in 3 months: Pay roughly $147
- Take a steady 6-month approach: Spend around $294

That's substantially less than a single college course at most universities.

Looking to slash that cost even further? Try these money-saving tricks:

- Blitz through as much content as possible during your free trial week
- Apply for Coursera's financial aid (available right on the course page)
- Check if your employer offers tuition reimbursement (many do!)
- Look into Google's scholarship programs, distributed through partners like Merit America and Per Scholas

Beyond just courses, your subscription unlocks valuable extras: access to an exclusive job board with 150+ partner employers (including Google itself), a shareable certificate for your LinkedIn profile, portfolio projects, and career prep resources like resume reviews and interview coaching.

**The takeaway:** At under $300 for the complete program, the certificate offers solid value compared to traditional education options, especially with the included career resources.

## Is the Google Data Analytics Certificate Worth It?

[Is the Google Data Analytics certification worth it?](/faq/is-google-data-analytics-certification-worth-it)

"Will this actually help me get hired?" Let's face it – that's the million-dollar question.

The numbers paint an interesting picture. There are over 251,000 open data analytics jobs nationwide with median entry-level salaries hitting $95,000. That's attention-grabbing ROI potential for a sub-$300 investment.

Even more telling: 75% of certificate graduates report landing a positive career outcome (new job, promotion, or raise) within six months of finishing. As of April 2025, professionals with this credential average $81,518 annually – about $39 per hour.

But let's get real. The certificate isn't a magical job guarantee.

Many employers still want to see you put those skills to work. They're looking for your portfolio projects, problem-solving abilities, and how you apply your knowledge – not just a certification on your resume.

So who gets the most bang for their buck?

The certificate shines brightest for:

- Career switchers fleeing unrelated fields
- Recent grads needing to prove job-readiness
- Self-learners craving structure
- Working professionals wanting to formalize their existing data skills

But it might miss the mark for:

- Seasoned data pros seeking advanced knowledge
- Python enthusiasts (the program teaches R instead)
- Anyone hunting for deep machine learning or AI skills

How does it stack up against competitors? The Microsoft Power BI certificate zeroes in on visualization expertise with their industry-standard dashboard tool. AWS Data Analytics caters to cloud specialists with years of experience. IBM's offering dives deeper into Python. Meanwhile, Meta's program specializes in marketing analytics applications.

Google's edge? Its comprehensive curriculum, massive brand recognition, and robust career support ecosystem.

**Key insight:** The certificate delivers solid value for beginners but works best as one piece of your career strategy – not a standalone solution.

## Reviews and Learner Experiences

What do actual students say after completing the journey?

Scrolling through reviews reveals consistent praise for the program's beginner-friendly approach. Many graduates highlight the practical case studies that connect abstract concepts to real-world scenarios. The Google brand name also opens doors that lesser-known certifications might not.

"The Google Data Analytics Certification remains a strong choice in 2025 for anyone looking to build or refresh their data analytics skills," notes one recent review.

Success stories pop up regularly, with graduates landing roles at major companies after completing the program.

But it's not all five-star ratings.

Common criticisms? Some find the "job-ready" promise oversold. The certificate builds a foundation, but many employers expect more than just coursework. Other reviewers already familiar with analytics basics found the content too elementary.

The bluntest criticism: "It's not enough to get a job" in today's competitive market without supplementing it with additional skills and a standout portfolio.

The recurring theme in critical reviews is that you'll need to go beyond just earning the certificate – by building projects, mastering additional skills, and preparing thoroughly for technical interviews.

**Reality check:** Most successful graduates use the certificate as a launching pad, not their entire career strategy.

## Conclusion

Staring at the "Enroll" button and wondering if you should click? Here's the straight talk.

The Google Data Analytics Professional Certificate remains a worthy investment in 2025 for analytics newcomers. At under $300 for typical completion, it delivers solid fundamentals backed by Google's powerful brand recognition.

It works best for beginners and career-changers who thrive with structured learning and appreciate having a clear roadmap. But treat it as your starting point, not your destination.

To truly maximize your return:

1. Build a portfolio showcasing real projects beyond the coursework
2. Learn Python alongside the R-focused curriculum
3. Network with professionals through LinkedIn and community forums
4. Consider specialized certifications after mastering the basics

Remember this: certificates open doors, but your skills, portfolio, and interview performance seal the deal.

### Next Steps

Ready to explore further? Start with the 7-day free trial to test-drive the curriculum before committing. If you complete the certificate and catch the data bug, the Google Advanced Data Analytics Certificate offers a natural next step.

Most importantly, connect with fellow learners in online communities to share tips and stay motivated throughout your journey.

**Explore your next step in data analytics with confidence, knowing exactly what you're signing up for.**

---

**Related Articles:**

- [Top 5 Data Certifications Compared (Google vs AWS vs Microsoft)](https://claude.ai/chat/81a38186-ac02-4a81-9faa-c922d7e85c02#)
- [How to Build a Cloud Career in 2025](https://claude.ai/chat/81a38186-ac02-4a81-9faa-c922d7e85c02#)
- [Beginner's Guide to Learning Data Analytics](https://claude.ai/chat/81a38186-ac02-4a81-9faa-c922d7e85c02#)
- [Coursera vs edX vs Udacity: Which Is Better?](https://claude.ai/chat/81a38186-ac02-4a81-9faa-c922d7e85c02#)
- [Best Entry-Level Tech Certifications for Career Switchers](https://claude.ai/chat/81a38186-ac02-4a81-9faa-c922d7e85c02#)
</file>

<file path="app/content/hub/google-professional-machine-learning-engineer-certification-roadmap-2025.md">
---
title: "Google Professional Machine Learning Engineer Certification Guide (2025)"
description: "A step‑by‑step roadmap to pass the Google Professional Machine Learning Engineer (PMLE) exam—format, 30‑day study plan, domain breakdown, practice questions, and next steps."
date: "2025-05-04"
author: "Testero Team"
tags: ["Google Cloud", "Machine Learning", "Certification", "MLOps", "AI", "Vertex AI"]
coverImage: "/images/google-professional-machine-learning-engineer.jpg"
---

> **Quick‑Glance Summary**  
> - **Exam**: 50–60 questions, 120 min, $200  
> - **Biggest Domain**: Monitoring (21 %)  
> - **Target Prep Time**: 4 weeks with daily hands‑on labs  
> - **Passing Goal**: ≥ 70 % of scored items  
> - **Credential Validity**: 2 years  

---

# Google Professional Machine Learning Engineer Certification Guide (2025)

[Is the Google Professional Machine Learning Engineer certification worth it?](/faq/is-the-google-professional-machine-learning-engineer-certification-worth-it)

Ready to prove you can turn cutting‑edge models into production‑grade business value? The Google Professional Machine Learning Engineer (PMLE) certification is the industry's litmus test for engineers who design, build, and maintain ML on Google Cloud. This guide walks you through **everything**—from how the exam works to what, when, and how to study—so you pass on the first try and immediately leverage the credential for career growth.

---

## Table of Contents
- [1. Exam Format](#exam-format)  
- [2. 30‑Day Study Plan](#study-plan)  
- [3. Key Exam Domains](#key-domains)  
- [4. Sample Questions](#sample-questions)  
- [5. Next Steps](#next-steps)  

---

## <a id="exam-format"></a>1. Exam Format

### 1.1 Snapshot

| Item | Details |
|---|---|
| **Question count** | 50–60 |
| **Duration** | 120 minutes ([How long is the Google ML Engineer exam?](/faq/how-long-is-the-google-ml-engineer-exam)) |
| **Format** | Multiple‑choice & multiple‑select |
| **Delivery** | Online proctored or test centre |
| **Cost** | $200 USD |
| **Passing score** | Not published (aim ≥ 70 %) |

> **Callout – Version Update**  
> The PMLE exam was **overhauled in Oct 2024** to add generative‑AI tooling (Model Garden, Vertex AI Agent Builder). Any resources older than that date are incomplete—verify study materials match the current blueprint.

### 1.2 Prerequisites

Google **recommends** 3 + years of industry experience (1 + year on GCP), but determined learners regularly succeed with less by combining:
- Solid Python and SQL foundations  
- Familiarity with core ML concepts (supervised vs. unsupervised, evaluation metrics, overfitting, drift)  
- Hands‑on projects in BigQuery ML, Vertex AI, or TensorFlow  

### 1.3 Retakes & Recertification

| Attempt | Wait Period |
|---|---|
| 1 → 2 | 14 days |
| 2 → 3 | 60 days |
| 3 → 4 | 365 days |

The credential expires every **24 months**. Google typically halves the renewal fee (~$100) and tests only on the current blueprint, keeping you sharp on new services.

---

## <a id="study-plan"></a>2. 30‑Day Study Plan

A month is tight but realistic if you focus on **deep practice over passive reading**. Allocate **2–3 hours on weekdays & 4–5 hours on weekends**.

| Week | Focus | Key Activities | Outputs |
|---|---|---|---|
| **W1 – Foundation** | Domains 1 & 2 | • Cloud Skills Boost "Data Engineering, ML & AI" path<br>• BigQuery ML + Vision/Natural Language API labs | Notes on feature engineering, API vs AutoML trade‑offs |
| **W2 – Build & Deploy** | Domains 3 & 4 | • TensorFlow on Vertex AI custom training<br>• Containerize model, deploy to Cloud Run<br>• A/B rollout with traffic splits | End‑to‑end prototype app in GitHub |
| **W3 – MLOps** | Domains 5 & 6 | • Vertex AI Pipelines + CI/CD via Cloud Build<br>• Monitoring with Cloud Logging, Error Reporting, custom drift alerts | Automated pipeline with model registry & alert rules |
| **W4 – Polish** | All domains | • 2 × full‑length timed practice exams<br>• Flashcards for products & quotas<br>• Review wrong answers → targeted lab repetition | ≥ 80 % on practice, exam booked |

> **Pro Tip**  
> Schedule your real exam **before** Week 4 begins. A fixed date injects useful pressure and forces backward planning.

---

## <a id="key-domains"></a>3. Key Exam Domains

### Domain Weighting

```

Monitoring & Responsible AI …… 21 %
Scaling Prototypes → Models …… 18 %
Automating ML Pipelines ………… 18 %
Serving & Scaling Models ……… 16 %
Low‑Code / Pre‑built AI ………… 13 %
Data & Model Collaboration ……… 14 %

```

### 3.1 Low‑Code AI (13 %)

**What's tested**

- BigQuery ML SQL syntax & inference  
- AutoML Vision / Tables / Vertex Forecasting  
- Pre‑trained APIs (Document AI, Video AI, Retail API)

**Study hacks**

- Memorize **when** AutoML outperforms pre‑built APIs (custom data, unsatisfied accuracy, domain uniqueness).  
- Practice a BigQuery ML logistic‑regression model end‑to‑end in under 30 min.

### 3.2 Data & Model Collaboration (14 %)

Focus on cross‑team workflows:

- Data governance, PII handling, DLP API  
- Responsible AI policy (bias testing, interpretability)  
- Stakeholder alignment during experimentation

> **Callout – Responsible AI**  
> Google expects engineers to **design for fairness & security from day 1**, not bolt it on after deployment.

### 3.3 Scaling Prototypes → Models (18 %)

Key skills:

- Vertex AI SDK, custom training images  
- Hyperparameter tuning with Vizier  
- Distributed training on TPU / multi‑GPU  
- Performance tuning (batch size, mixed precision)

### 3.4 Serving & Scaling (16 %)

- Multi‑model endpoints vs one‑model‑per‑endpoint  
- Cloud Run vs Vertex Prediction vs GKE Autopilot  
- Canary & shadow traffic patterns  
- Latency troubleshooting (Cold‑start mitigation)

### 3.5 Automating ML Pipelines (18 %)

- Vertex AI Pipelines (KFP v2) components & DSL  
- CI/CD: Cloud Source Repos / GitHub → Cloud Build → Artifact Registry  
- Metadata tracking (ML Metadata store, lineage)  
- Model versioning & rollback

### 3.6 Monitoring & Responsible AI (21 %)

- Vertex Model Monitoring (skew & drift thresholds)  
- Custom drift detection with Cloud Functions  
- Security: IAM least privilege, private service connect, CMEK  
- Incident response playbooks

---

## <a id="sample-questions"></a>4. Sample Questions

> **Disclaimer**: These are **original practice items**, **not** actual exam questions, but they replicate style and difficulty.

### Q1 – Service Selection  
Your team needs to classify millions of documents daily. Accuracy is paramount; a small labelled dataset exists. Which approach maximizes accuracy **and** minimizes time ‑to‑value?

A. Fine‑tune PaLM 2 in Model Garden  
B. Train a custom text model in Vertex AI from scratch  
C. Use AutoML Text Classification on Vertex AI  
D. Call Cloud Natural Language API for each document  

**Answer**: C. AutoML provides high accuracy with limited data and fast deployment, beating pre‑trained (low accuracy) and custom (long timeline) options.

---

### Q2 – Pipeline Design  
You manage a pipeline with data preprocessing, training, evaluation, and deployment steps. A new compliance rule requires auditability of every model artifact. What is the **simplest** way to meet the requirement?

A. Export artifacts to Cloud Storage and manually update a spreadsheet  
B. Add a Vertex ML Metadata sink to the pipeline for artifact lineage  
C. Enable VPC Service Controls around GCS buckets  
D. Write Cloud Logging filters and forward logs to BigQuery  

**Answer**: B. Vertex ML Metadata automatically tracks and stores lineage without manual work, satisfying audit needs.

---

### Q3 – Monitoring  
A production model's **precision** dropped sharply overnight, while recall stayed stable. What's the most likely root cause?

A. Label noise from annotation errors  
B. Concept drift in the minority class  
C. Data schema change removed a feature  
D. Class‑imbalance increased in incoming data  

**Answer**: D. Precision drop with stable recall often signals higher false positives, common when class balance shifts.

---

### Q4 – Cost vs Latency  
You serve an image‑classification model with tight 80 ms latency SLO. Traffic is spiky: 0–500 RPS. Which deployment minimizes **both** cost and cold‑start latency?

A. Vertex AI Prediction Standard Tier  
B. Cloud Run min instances = 0, max instances = 20  
C. Cloud Run min instances = 1, CPU / mem tuned, concurrency = 10  
D. GKE Autopilot with horizontal pod autoscaling  

**Answer**: C. One warm instance controls cold starts; Cloud Run scales down to 1 during idle, cheaper than always‑on Vertex Prediction.

---

## <a id="next-steps"></a>5. Next Steps

### 5.1 Build Your Personalized Plan
1. **Book the exam**—commitment drives action.  
2. Copy the **30‑day study table** into your calendar.  
3. Reserve **hands‑on lab credits** (Qwiklabs / Cloud Skills Boost).  
4. Assemble a **study squad**—accountability improves throughput.  

### 5.2 Leverage the Credential
- **LinkedIn**: Add the digital badge and a short post summarizing your prep journey.  
- **Resume**: Pair the cert with quantified project outcomes (e.g., *"Cut inference latency 40 % on Vertex AI"*).  
- **Internal Advocacy**: Host a lunch‑and‑learn; teaching reinforces mastery and boosts internal visibility.  

### 5.3 Level‑Up Paths
| Next Certification | Why It Pairs Well |
|---|---|
| **Google Cloud Professional Data Engineer** | Complements ML with data pipelines & warehousing |
| **Professional Cloud DevOps Engineer** | Deepens CI/CD & reliability for ML services |
| **TensorFlow Developer Certificate** | Showcases framework‑specific expertise |
| **AWS Machine Learning Specialty** | Validates multi‑cloud versatility |

---

## Your Road Ahead

You now hold a **battle‑tested roadmap**: clear exam logistics, a disciplined 30‑day regimen, domain‑weighted study priorities, realistic practice questions, and actionable steps to amplify your brand once certified.

**Take the first step today**: schedule your exam and spin up your initial Vertex AI lab. The sooner you begin, the sooner you'll join the small but growing cadre of engineers who can translate ML hype into production impact.

_The AI era rewards action—see you on the other side of the pass screen._

---
```
</file>

<file path="app/content/spoke/[slug]/page.tsx">
import React from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { notFound } from 'next/navigation';
import { 
  getAllContentSlugs, 
  getSpokeContent, 
  getHubContent, 
  getSpokesForHub 
} from '@/lib/content/loader';
import { generateContentMetadata, generateStructuredData } from '@/lib/content/meta';
import TableOfContents from '@/components/content/TableOfContents';
import SocialShare from '@/components/content/SocialShare';
import RecommendedContent from '@/components/content/RecommendedContent';

// Generate static params for all spoke content
export async function generateStaticParams() {
  const { spokeSlugs } = await getAllContentSlugs();
  return spokeSlugs.map(slug => ({ slug }));
}

// Generate metadata for the spoke page
export async function generateMetadata({ params }: { params: Promise<{ slug: string }> }) {
  const unwrappedParams = await params;
  const { slug } = unwrappedParams;
  const content = await getSpokeContent(slug);
  if (!content) return {};
  return generateContentMetadata(content);
}

// For now, we'll just use our default spoke content directly
// This is a workaround for Next.js params issues in SSR
export default async function SpokePage({ params }: { params: Promise<{ slug: string }> }) {
  const unwrappedParams = await params;
  const { slug } = unwrappedParams;
  const content = await getSpokeContent(slug);
  if (!content) notFound();
  
  // Get the parent hub if available
  const hubContent = content.meta.hubSlug 
    ? await getHubContent(content.meta.hubSlug) 
    : null;
  
  // Get related content if we have a hub
  const relatedContent = hubContent && content.meta.hubSlug
    ? await getSpokesForHub(content.meta.hubSlug)
    : [];
  
  // JSON-LD structured data
  const structuredData = generateStructuredData(content);
  
  return (
    <main className="container mx-auto px-4 py-12">
      <div className="max-w-4xl mx-auto">
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{ __html: JSON.stringify(structuredData) }}
        />
        
        {/* Breadcrumb navigation */}
        <nav className="flex items-center text-sm text-gray-500 mb-6">
          <Link href="/content" className="hover:text-gray-700">Resources</Link>
          <span className="mx-2">›</span>
          {hubContent ? (
            <>
              <Link 
                href={`/content/hub/${hubContent.slug}`} 
                className="hover:text-gray-700"
              >
                {hubContent.meta.title}
              </Link>
              <span className="mx-2">›</span>
            </>
          ) : null}
          <span className="text-gray-900">{content.meta.title}</span>
        </nav>
        
        <header className="mb-8">
          <h1 className="text-4xl md:text-5xl font-bold mb-4">{content.meta.title}</h1>
          <SocialShare 
            title={content.meta.title}
            url={`/content/spoke/${content.slug}`}
            description={content.meta.description}
            className="mb-4"
          />
          {content.meta.author && (
            <div className="text-gray-600 mb-4">
              By {content.meta.author} • 
              {new Date(content.meta.date).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
              })}
              {content.meta.readingTime && (
                <span> • {content.meta.readingTime} min read</span>
              )}
            </div>
          )}
          {content.meta.tags && content.meta.tags.length > 0 && (
            <div className="flex flex-wrap gap-2 mb-6">
              {content.meta.tags.map(tag => (
                <span key={tag} className="bg-gray-100 text-gray-800 px-3 py-1 rounded-full text-sm">
                  {tag}
                </span>
              ))}
            </div>
          )}
          {content.meta.coverImage && (
            <div className="relative w-full h-96 mb-8 rounded-lg overflow-hidden">
              <Image 
                src={content.meta.coverImage} 
                alt={content.meta.title} 
                fill 
                className="object-cover"
                priority
                sizes="(max-width: 768px) 100vw, (max-width: 1200px) 1200px, 1200px"
                quality={85}
              />
            </div>
          )}
        </header>
        
        <div className="flex flex-col lg:flex-row gap-8">
          <article className="prose prose-lg max-w-none mb-12 lg:flex-grow" id="article-content">
            <div 
              dangerouslySetInnerHTML={{ __html: content.content }} 
              className="certification-content"
            />
          </article>
          
          <div className="lg:w-64 lg:flex-shrink-0">
            <div className="sticky top-8">
              <TableOfContents contentId="article-content" className="bg-gray-50 p-4 rounded-lg" />
            </div>
          </div>
        </div>
        
        {/* Page navigation */}
        <div className="mt-12 pt-6 border-t flex flex-col sm:flex-row justify-between">
          {hubContent && (
            <Link 
              href={`/content/hub/${hubContent.slug}`}
              className="mb-4 sm:mb-0 text-blue-600 hover:text-blue-800 font-medium"
            >
              ← Back to {hubContent.meta.title}
            </Link>
          )}
          <Link 
            href="/content" 
            className="text-blue-600 hover:text-blue-800 font-medium"
          >
            View all resources
          </Link>
        </div>
        
        {/* Related Content from same hub */}
        {relatedContent.length > 1 && (
          <RecommendedContent
            content={relatedContent}
            currentSlug={content.slug}
            title={`More About ${hubContent?.meta.title || 'Google Cloud Certifications'}`}
          />
        )}
        
        {/* CTAs */}
        <div className="mt-16 p-8 bg-gray-50 rounded-xl">
          <h3 className="text-2xl font-bold mb-4">Ready to take the next step?</h3>
          <p className="text-lg mb-6">
            Sign up for Testero to track your certification progress, access practice exams, 
            and connect with other professionals on the same journey.
          </p>
          <div className="flex flex-col sm:flex-row gap-4">
            <Link 
              href="/" 
              className="bg-blue-600 text-white px-6 py-3 rounded-lg font-medium text-center hover:bg-blue-700 transition-colors"
            >
              Get Started with Testero
            </Link>
            <Link 
              href="/" 
              className="bg-white border border-gray-300 text-gray-700 px-6 py-3 rounded-lg font-medium text-center hover:bg-gray-50 transition-colors"
            >
              Learn More
            </Link>
          </div>
        </div>
      </div>
    </main>
  );
}
</file>

<file path="components/ui/benefits-section.tsx">
"use client";

import React, { useState } from 'react';
import { cn } from '@/lib/utils';
import { colors } from '@/lib/design-system/colors';
import { duration, easing } from '@/lib/design-system/animations';

interface BenefitCardProps {
  icon: React.ReactNode;
  title: string;
  description: string;
  highlight?: string;
  highlightColor?: string;
  bgColor: string;
  iconColor: string;
  delay?: number;
}

const BenefitCard: React.FC<BenefitCardProps> = ({
  icon,
  title,
  description,
  highlight,
  highlightColor = colors.accent[500],
  bgColor,
  iconColor,
  delay = 0
}) => {
  const [isHovered, setIsHovered] = useState(false);
  
  // Replace highlight text with styled version if provided
  const processedDescription = highlight ? (
    <>
      {description.split(highlight).map((part, index, array) => (
        <React.Fragment key={index}>
          {part}
          {index < array.length - 1 && (
            <span className="font-semibold" style={{ color: highlightColor }}>
              {highlight}
            </span>
          )}
        </React.Fragment>
      ))}
    </>
  ) : (
    description
  );

  return (
    <article
      className={cn(
        "bg-white p-4 sm:p-6 rounded-xl shadow-md border border-slate-100",
        "transform transition-all duration-300",
        "hover:shadow-lg"
      )}
      style={{
        animationDelay: `${delay}ms`,
        animationFillMode: 'both',
        animation: `fadeInUp ${duration.slow}ms ${easing.spring} forwards`,
        opacity: 0,
        transform: 'translateY(20px)'
      }}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <div className="flex items-start space-x-4">
        <div 
          className={cn(
            "p-3 rounded-lg transition-transform",
            isHovered ? "scale-110" : "scale-100"
          )}
          style={{ 
            backgroundColor: bgColor,
            transition: `transform ${duration.fast}ms ${easing.spring}`
          }}
          aria-hidden="true"
        >
          <div className="transition-all" style={{ color: iconColor }}>
            {icon}
          </div>
        </div>
        <div className="flex-1">
          <h3 className={cn(
            "text-lg font-semibold text-slate-800 mb-2 transition-all",
            isHovered && "text-accent-600"
          )}>
            {title}
          </h3>
          <p className="text-slate-600">{processedDescription}</p>
        </div>
      </div>
    </article>
  );
};

// Animation keyframes
const fadeInUp = `
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
`;

const slideInFromSide = `
  @keyframes slideInFromSide {
    from {
      opacity: 0;
      transform: translateX(-30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
`;

const pulse = `
  @keyframes pulse {
    0% {
      opacity: 0.2;
      transform: scale(1);
    }
    50% {
      opacity: 0.3;
      transform: scale(1.05);
    }
    100% {
      opacity: 0.2;
      transform: scale(1);
    }
  }
`;

// Skeleton loader component for the benefits section
export function BenefitsSectionSkeleton() {
  return (
    <section className="w-full py-10 sm:py-16 md:py-24 px-4 sm:px-6 relative">
      {/* Background element */}
      <div 
        className="absolute right-0 top-1/4 -translate-y-1/2 w-64 h-64 bg-blue-50 rounded-full opacity-20 blur-3xl"
        aria-hidden="true"
      ></div>
      <div 
        className="absolute left-0 bottom-1/4 translate-y-1/2 w-64 h-64 bg-orange-50 rounded-full opacity-20 blur-3xl"
        aria-hidden="true"
      ></div>
      
      <div className="max-w-4xl mx-auto text-center space-y-8 relative z-10">
        {/* Skeleton heading */}
        <div className="h-12 bg-slate-200 rounded-lg w-3/4 mx-auto animate-pulse"></div>
        
        {/* Skeleton paragraph */}
        <div className="h-6 bg-slate-200 rounded-lg w-5/6 mx-auto animate-pulse"></div>
        
        {/* Skeleton cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 pt-4">
          {[...Array(4)].map((_, index) => (
            <div key={index} className="bg-white p-4 sm:p-6 rounded-xl shadow-md border border-slate-100 animate-pulse">
              <div className="flex items-start space-x-4">
                <div className="p-3 rounded-lg bg-slate-200 h-12 w-12"></div>
                <div className="flex-1">
                  <div className="h-6 bg-slate-200 rounded w-3/4 mb-3"></div>
                  <div className="h-4 bg-slate-200 rounded w-full mb-2"></div>
                  <div className="h-4 bg-slate-200 rounded w-5/6"></div>
                </div>
              </div>
            </div>
          ))}
        </div>
        
        {/* Skeleton comparison */}
        <div className="mt-12 sm:mt-16 pt-6 sm:pt-8 border-t border-slate-200">
          <div className="flex flex-col md:flex-row justify-center items-center gap-8">
            <div className="flex-1">
              <div className="h-6 bg-slate-200 rounded w-1/2 mx-auto md:ml-auto md:mr-0 mb-4"></div>
              <div className="space-y-2">
                {[...Array(3)].map((_, index) => (
                  <div key={index} className="h-4 bg-slate-200 rounded w-3/4 mx-auto md:ml-auto md:mr-0"></div>
                ))}
              </div>
            </div>
            
            <div className="hidden md:block h-40 border-l border-slate-300" aria-hidden="true"></div>
            
            <div className="flex-1">
              <div className="h-6 bg-slate-200 rounded w-1/2 mx-auto md:mr-auto md:ml-0 mb-4"></div>
              <div className="space-y-2">
                {[...Array(3)].map((_, index) => (
                  <div key={index} className="h-4 bg-slate-200 rounded w-3/4 mx-auto md:mr-auto md:ml-0"></div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

export function BenefitsSection() {
  return (
    <section className="w-full py-10 sm:py-16 md:py-24 px-4 sm:px-6 relative">
      {/* Add styles to head for animations */}
      <style jsx global>{`${fadeInUp} ${slideInFromSide} ${pulse}`}</style>
      
      {/* Background element */}
      <div 
        className="absolute right-0 top-1/4 -translate-y-1/2 w-64 h-64 bg-blue-50 rounded-full opacity-20 blur-3xl"
        style={{
          animation: `pulse 15s ease-in-out infinite alternate`,
        }}
        aria-hidden="true"
      ></div>
      <div 
        className="absolute left-0 bottom-1/4 translate-y-1/2 w-64 h-64 bg-orange-50 rounded-full opacity-20 blur-3xl"
        style={{
          animation: `pulse 18s ease-in-out infinite alternate-reverse`,
        }}
        aria-hidden="true"
      ></div>
      
      <div className="max-w-4xl mx-auto text-center space-y-8 relative z-10">
        <h2 
          id="benefits-heading"
          className="text-2xl sm:text-3xl md:text-5xl font-bold text-slate-800 drop-shadow-sm opacity-0"
          style={{
            animation: `fadeInUp ${duration.slow}ms ${easing.spring} forwards`,
            animationDelay: `${duration.fast}ms`
          }}
        >
          Cloud Certification Success: <span className="text-orange-500">Smarter Prep. Less Stress.</span> Better Results.
        </h2>
        
        <p 
          className="text-base sm:text-lg md:text-xl text-slate-600 max-w-3xl mx-auto opacity-0"
          style={{
            animation: `fadeInUp ${duration.slow}ms ${easing.spring} forwards`,
            animationDelay: `${duration.fast * 2}ms`
          }}
        >
          No more outdated PDFs or endless Q&A threads. Testero gives you a smarter, easier path to Google Cloud, AWS, and Azure certification success:
        </p>
        
        <div 
          className="grid grid-cols-1 md:grid-cols-2 gap-8 pt-4 text-left"
          role="list"
        >
          {/* Benefit 1 */}
          <BenefitCard
            icon={
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M3.75 3v11.25A2.25 2.25 0 0 0 6 16.5h2.25M3.75 3h-1.5m1.5 0h16.5m0 0h1.5m-1.5 0v11.25A2.25 2.25 0 0 1 18 16.5h-2.25m-7.5 0h7.5m-7.5 0-1 3m8.5-3 1 3m0 0 .5 1.5m-.5-1.5h-9.5m0 0-.5 1.5m.75-9 3-3 2.148 2.148A12.061 12.061 0 0 1 16.5 7.605" />
              </svg>
            }
            title="Personalized Cloud Certification Study"
            description="AI pinpoints your weak spots in Google Cloud, AWS, and Azure exams and builds a plan just for you. No wasted effort."
            bgColor={colors.primary[50]}
            iconColor={colors.primary[500]}
            delay={duration.fast * 3}
          />
          
          {/* Benefit 2 */}
          <BenefitCard
            icon={
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
              </svg>
            }
            title="Master Cloud Certification Material 40% Faster"
            description="Adaptive, always-current questions help you learn what matters most for your cloud certification exam. Get results fast."
            highlight="40% Faster"
            highlightColor={colors.feedback.success.base}
            bgColor={colors.feedback.success.light}
            iconColor={colors.feedback.success.base}
            delay={duration.fast * 4}
          />
          
          {/* Benefit 3 */}
          <BenefitCard
            icon={
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75 11.25 15 15 9.75M21 12c0 1.268-.63 2.39-1.593 3.068a3.745 3.745 0 0 1-1.043 3.296 3.745 3.745 0 0 1-3.296 1.043A3.745 3.745 0 0 1 12 21c-1.268 0-2.39-.63-3.068-1.593a3.746 3.746 0 0 1-3.296-1.043 3.745 3.745 0 0 1-1.043-3.296A3.745 3.745 0 0 1 3 12c0-1.268.63-2.39 1.593-3.068a3.745 3.745 0 0 1 1.043-3.296 3.746 3.746 0 0 1 3.296-1.043A3.746 3.746 0 0 1 12 3c1.268 0 2.39.63 3.068 1.593a3.746 3.746 0 0 1 3.296 1.043 3.746 3.746 0 0 1 1.043 3.296A3.745 3.745 0 0 1 21 12Z" />
              </svg>
            }
            title="Know Exactly When You're Ready for Your Cloud Exam"
            description="Live dashboard predicts your pass date for Google Cloud, AWS, and Azure certification exams. Boost your pass rate by 15 points."
            highlight="15 points"
            highlightColor={colors.accent[500]}
            bgColor={colors.primary[100]}
            iconColor={colors.accent[500]}
            delay={duration.fast * 5}
          />
          
          {/* Benefit 4 */}
          <BenefitCard
            icon={
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M3 3v1.5M3 21v-6m0 0 2.77-.693a9 9 0 0 1 6.208.682l.108.054a9 9 0 0 0 6.086.71l3.114-.732a48.524 48.524 0 0 1-.005-10.499l-3.11.732a9 9 0 0 1-6.085-.711l-.108-.054a9 9 0 0 0-6.208-.682L3 4.5M3 15V4.5" />
              </svg>
            }
            title="Always Up-to-Date Cloud Certification Content"
            description="Question bank refreshes within 14 days of any Google Cloud, AWS, or Azure exam change. Never study outdated certification material."
            highlight="14 days"
            highlightColor={colors.accent[500]}
            bgColor={colors.accent[50]}
            iconColor={colors.accent[500]}
            delay={duration.fast * 6}
          />
        </div>
        
        {/* Optional: Visual benefit comparison or graphic */}
        <div 
          className="mt-12 sm:mt-16 pt-6 sm:pt-8 border-t border-slate-200 opacity-0"
          style={{
            animation: `fadeInUp ${duration.slow}ms ${easing.spring} forwards`,
            animationDelay: `${duration.fast * 7}ms`
          }}
        >
          <div className="flex flex-col md:flex-row justify-center items-center gap-8">
            <div className="flex-1 text-center md:text-right">
              <h3 className="text-lg sm:text-xl font-semibold text-red-500 mb-2" id="traditional-approach">Traditional Approach</h3>
              <ul className="list-none space-y-2" aria-labelledby="traditional-approach">
                <li className="flex items-center justify-end">
                  <span>Outdated study materials</span>
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 text-red-500 ml-2" aria-hidden="true">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M6 18 18 6M6 6l12 12" />
                  </svg>
                </li>
                <li className="flex items-center justify-end">
                  <span>Generic study plans</span>
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 text-red-500 ml-2" aria-hidden="true">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M6 18 18 6M6 6l12 12" />
                  </svg>
                </li>
                <li className="flex items-center justify-end">
                  <span>Uncertainty about readiness</span>
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 text-red-500 ml-2" aria-hidden="true">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M6 18 18 6M6 6l12 12" />
                  </svg>
                </li>
              </ul>
            </div>
            
            <div className="hidden md:block h-40 border-l border-slate-300" aria-hidden="true"></div>
            
            <div className="flex-1 text-center md:text-left">
              <h3 className="text-lg sm:text-xl font-semibold text-green-500 mb-2" id="testero-approach">Testero Approach</h3>
              <ul className="list-none space-y-2" aria-labelledby="testero-approach">
                <li className="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 text-green-500 mr-2" aria-hidden="true">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                  </svg>
                  <span>Always current, AI-generated content</span>
                </li>
                <li className="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 text-green-500 mr-2" aria-hidden="true">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                  </svg>
                  <span>Personalized weak-spot focusing</span>
                </li>
                <li className="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 text-green-500 mr-2" aria-hidden="true">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                  </svg>
                  <span>Predicted pass date with confidence</span>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

// For backward compatibility
export default BenefitsSection;
</file>

<file path="components/ui/navbar.tsx">
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { colors } from '@/lib/design-system/colors';
import { typography } from '@/lib/design-system/typography';

const navigationItems = [
  { name: 'Home', href: '/' },
  { name: 'Content Hub', href: '/content' },
  { name: 'FAQ', href: '/faq' },
  // Design System link removed
  // Resources dropdown temporarily removed until pages are created
];

const Navbar = () => {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isScrolled, setIsScrolled] = useState(false);
  // const [isResourcesDropdownOpen, setIsResourcesDropdownOpen] = useState(false); // Removed
  const pathname = usePathname();

  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > 0) {
        setIsScrolled(true);
      } else {
        setIsScrolled(false);
      }
    };

    window.addEventListener('scroll', handleScroll);

    // Clean up the event listener on component unmount
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);

  // Close mobile menu when screen size changes to desktop
  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth >= 768 && isMobileMenuOpen) {
        setIsMobileMenuOpen(false);
      }
    };

    window.addEventListener('resize', handleResize);

    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, [isMobileMenuOpen]);


  // Removed unused click handler for dropdown toggle
  // const handleResourcesClick = () => {
  //   setIsResourcesDropdownOpen(!isResourcesDropdownOpen);
  // };

  return (
    <header
      className={`fixed top-0 left-0 right-0 z-50 h-[72px] bg-white bg-opacity-80 backdrop-blur-md ${
        isScrolled ? 'shadow-sm border-b border-ui-border-light' : ''
      }`}
      style={{ borderColor: colors.ui.border.light }}
    >
      <div className="container mx-auto px-4 h-full flex items-center justify-between md:justify-start">
        {/* Logo Placeholder */}
        <div className="flex-shrink-0 md:mr-6">
          {/* Replace with actual logo component */}
          <Link href="/" aria-label="Testero Home">
            <span className="text-xl font-bold" style={{ color: colors.primary[800] }}>Testero</span> {/* Replace with actual logo */}
          </Link>
        </div>

        {/* Mobile Menu Button */}
        <div className="md:hidden flex items-center ml-auto">
          <button
            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
            className="text-ui-text-primary focus:outline-none focus:ring-2 focus:ring-accent-500"
            style={{ color: colors.primary[800] }}
            aria-label="Toggle mobile menu"
            aria-expanded={isMobileMenuOpen}
            aria-controls="mobile-menu"
          >
            {/* Hamburger Icon */}
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16m-7 6h7"></path></svg>
          </button>
        </div>

        {/* Navigation Links (Desktop) */}
        <nav className="hidden md:flex space-x-6 flex-grow justify-center" aria-label="Primary navigation">
          {navigationItems.map((item) => (
            <Link
              key={item.name}
              href={item.href}
              className={`relative ${pathname === item.href ? 'text-accent-500' : 'text-primary-800'} hover:text-accent-500 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-accent-500`}
              style={{ ...typography.button.default }}
              aria-current={pathname === item.href ? 'page' : undefined}
            >
              {item.name}
              {pathname === item.href && (
                <span
                  className="absolute bottom-0 left-0 right-0 h-0.5 bg-accent-500 transform translate-y-3"
                  style={{ backgroundColor: colors.accent[500] }}
                ></span>
              )}
            </Link>
          ))}
        </nav>

        {/* Action Elements (Desktop) */}
        <div className="hidden md:flex items-center space-x-4 flex-shrink-0 ml-auto">
          <Link
            href="/waitlist"
            className="px-4 py-2 rounded focus:outline-none focus:ring-2 focus:ring-accent-500"
            style={{ backgroundColor: colors.accent[500], color: colors.ui.white, ...typography.button.default }}
          >
            Join Waitlist
          </Link>
          <Link
            href="/login"
            className="text-ui-text-primary hover:text-accent-500 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-accent-500"
            style={{ color: colors.primary[800], ...typography.button.default }}
          >
            Login
          </Link>
        </div>
      </div>

      {/* Mobile Menu (Collapsible) */}
      {isMobileMenuOpen && (
        <div id="mobile-menu" className="md:hidden fixed inset-0 top-[72px] bg-white shadow-md transition-transform transform ease-in-out duration-300 translate-x-0">
          <nav className="flex flex-col space-y-4 px-4 py-6" aria-label="Mobile navigation">
            {navigationItems.map((item) => (
              <Link
                key={item.name}
                href={item.href}
                className={`relative ${pathname === item.href ? 'text-accent-500' : 'text-primary-800'} hover:text-accent-500 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-accent-500`}
                style={{ ...typography.button.default }}
                onClick={() => setIsMobileMenuOpen(false)} // Close menu on link click
                aria-current={pathname === item.href ? 'page' : undefined}
              >
                {item.name}
              </Link>
            ))}
            {/* Action elements (Mobile) */}
            <div className="flex flex-col space-y-4 mt-4 pt-4 border-t border-ui-border-light" style={{ borderColor: colors.ui.border.light }}>
              <Link href="/waitlist" className="px-4 py-2 rounded text-center focus:outline-none focus:ring-2 focus:ring-accent-500" style={{ backgroundColor: colors.accent[500], color: colors.ui.white, ...typography.button.default }} onClick={() => setIsMobileMenuOpen(false)}>
                Join Waitlist
              </Link>
              <Link href="/login" className="text-ui-text-primary text-center hover:text-accent-500 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-accent-500" style={{ color: colors.primary[800], ...typography.button.default }} onClick={() => setIsMobileMenuOpen(false)}>
                Login
              </Link>
            </div>
          </nav>
        </div>
      )}
    </header>
  );
};

export default Navbar;
</file>

<file path="components/ui/waitlist-form.tsx">
"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { usePostHog } from "posthog-js/react"; // Import usePostHog
import { Form, FormControl, FormField, FormItem, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { HoverButton } from "@/components/ui/hover-button";
import { motion, AnimatePresence } from "framer-motion";

// Define the form schema with zod validation
const formSchema = z.object({
  email: z
    .string()
    .min(1, { message: "Email is required" })
    .email({ message: "Must be a valid email address" })
    .transform((val) => val.toLowerCase().trim()),
  examType: z.string().optional(),
});

type FormValues = z.infer<typeof formSchema>;

// Define props with optional className and onSuccess callback
interface WaitlistFormProps {
  className?: string;
  buttonText?: string;
  includeExamDropdown?: boolean;
  ctaLocation?: string; // Add optional prop for CTA location context
  onSuccess?: (data: FormValues) => void;
}

export function WaitlistForm({ 
  className = "", 
  buttonText = "Join the Waitlist & Get 30% Off",
  includeExamDropdown = false,
  ctaLocation = 'unknown', // Default location if not provided
  onSuccess,
  ...props
}: WaitlistFormProps) {
  // Form submission states
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const posthog = usePostHog(); // Get PostHog instance

  // Initialize the form
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: "",
      examType: "",
    },
  });

  // Handle form submission
  async function onSubmit(data: FormValues) {
    setIsSubmitting(true);
    setError(null);
    
    try {
      // Submit to API endpoint
      const response = await fetch('/api/waitlist', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to submit');
      }

      // Handle success
      setIsSuccess(true);

      // Capture PostHog event
      if (posthog) {
        posthog.capture('waitlist_joined', {
          email: data.email,
          examType: data.examType || 'not_selected', // Include exam type if present
        });
      }

      // Call the success callback if provided
      if (onSuccess) {
        onSuccess(data);
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : "Something went wrong. Please try again.";
      // Handle error
      setError(errorMessage);
      // Capture PostHog error event
      if (posthog) {
        posthog.capture('waitlist_form_submission_error', {
          error_message: errorMessage,
        });
      }
    } finally {
      setIsSubmitting(false);
    }
  }

  // Exam type options
  const examOptions = [
    { value: "", label: "Select your main certification interest (optional)" },
    { value: "gcp", label: "Google Cloud (GCP)" },
    { value: "aws", label: "Amazon Web Services (AWS)" },
    { value: "azure", label: "Microsoft Azure" },
    { value: "multiple", label: "Multiple cloud platforms" },
    { value: "other", label: "Other certifications" },
  ];

  return (
    <div className={className} {...props}>
      <AnimatePresence mode="wait">
        {!isSuccess ? (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            key="form"
          >
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="email"
                  render={({ field, fieldState }) => (
                    <FormItem>
              <div className="relative">
                <FormControl>
                  <Input
                    type="email"
                    placeholder="Enter your email address"
                    className={`px-3 sm:px-4 py-2 sm:py-3 text-base sm:text-lg rounded-md transition-all duration-300 border-2 ${
                      fieldState.error 
                        ? "border-red-400 bg-red-50" 
                        : fieldState.isDirty && !fieldState.error
                          ? "border-green-400 bg-green-50" 
                          : "border-slate-300 focus:border-orange-400 focus:ring focus:ring-orange-200 focus:ring-opacity-50"
                    }`}
                    disabled={isSubmitting}
                    autoComplete="email"
                    autoFocus
                    aria-required="true"
                    aria-invalid={fieldState.error ? "true" : "false"}
                    {...field}
                    onFocus={() => { // Track form interaction start
                      if (posthog) {
                        posthog.capture('waitlist_form_interaction_start');
                      }
                    }}
                  />
                </FormControl>
                        
                        {/* Validation icon */}
                        {fieldState.isDirty && (
                          <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                            {fieldState.error ? (
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                              </svg>
                            ) : (
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                              </svg>
                            )}
                          </div>
                        )}
                      </div>
                      <FormMessage className="text-left mt-1 font-medium" />
                    </FormItem>
                  )}
                />

                {includeExamDropdown && (
                  <FormField
                    control={form.control}
                    name="examType"
                    render={({ field, fieldState }) => (
                      <FormItem>
                        <div className="relative">
                          <FormControl>
                            <select
                              className={`px-3 sm:px-4 py-2 sm:py-3 rounded-md w-full text-base sm:text-lg text-slate-600 bg-white appearance-none transition-all duration-300 border-2 ${
                                fieldState.error 
                                  ? "border-red-400 bg-red-50" 
                                  : "border-slate-300 focus:border-orange-400 focus:ring focus:ring-orange-200 focus:ring-opacity-50"
                              }`}
                              disabled={isSubmitting}
                              aria-label="Select your main certification interest"
                              {...field}
                            >
                              {examOptions.map((option) => (
                                <option key={option.value} value={option.value}>
                                  {option.label}
                                </option>
                              ))}
                            </select>
                          </FormControl>
                          {/* Custom dropdown arrow */}
                          <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-slate-500" aria-hidden="true">
                            <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                              <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                            </svg>
                          </div>
                        </div>
                        <FormMessage className="text-left mt-1 font-medium" />
                      </FormItem>
                    )}
                  />
                )}

                <HoverButton
                  className="bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white px-6 sm:px-8 py-3 sm:py-4 rounded-full text-base sm:text-xl font-semibold shadow-lg w-full transition-all"
                  type="submit"
                  disabled={isSubmitting}
                  aria-busy={isSubmitting ? "true" : "false"}
                  onClick={() => { // Track CTA click intent using the location prop
                    if (posthog) {
                      posthog.capture('cta_click', { cta_location: ctaLocation });
                    }
                  }}
                >
                  {isSubmitting ? (
                    <div className="flex items-center justify-center">
                      <svg 
                        className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" 
                        xmlns="http://www.w3.org/2000/svg" 
                        fill="none" 
                        viewBox="0 0 24 24"
                        aria-hidden="true"
                      >
                        <circle 
                          className="opacity-25" 
                          cx="12" 
                          cy="12" 
                          r="10" 
                          stroke="currentColor" 
                          strokeWidth="4"
                        ></circle>
                        <path 
                          className="opacity-75" 
                          fill="currentColor" 
                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        ></path>
                      </svg>
                      Processing...
                    </div>
                  ) : (
                    <div className="flex items-center justify-center gap-2">
                      <span>{buttonText}</span>
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={2} stroke="currentColor" className="w-5 h-5" aria-hidden="true">
                        <path strokeLinecap="round" strokeLinejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
                      </svg>
                    </div>
                  )}
                </HoverButton>

                {error && (
                  <motion.div
                    initial={{ opacity: 0, y: -10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="bg-red-50 border border-red-200 rounded-md px-4 py-3 text-center"
                    role="alert"
                    aria-live="assertive"
                  >
                    <p className="text-red-600 font-medium flex items-center justify-center">
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2" aria-hidden="true">
                        <path strokeLinecap="round" strokeLinejoin="round" d="M12 9v3.75m9-.75a9 9 0 11-18 0 9 9 0 0118 0zm-9 3.75h.008v.008H12v-.008z" />
                      </svg>
                      {error}
                    </p>
                  </motion.div>
                )}
              </form>
            </Form>
          </motion.div>
        ) : (
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0 }}
            key="success"
            className="bg-green-50 p-6 rounded-lg border border-green-200 text-center"
            role="status"
            aria-live="polite"
          >
            <div className="flex flex-col items-center space-y-4">
              <div className="bg-green-100 p-3 rounded-full" aria-hidden="true">
                <svg 
                  className="h-8 w-8 text-green-600" 
                  xmlns="http://www.w3.org/2000/svg" 
                  fill="none" 
                  viewBox="0 0 24 24" 
                  stroke="currentColor"
                >
                  <path 
                    strokeLinecap="round" 
                    strokeLinejoin="round" 
                    strokeWidth={2} 
                    d="M5 13l4 4L19 7" 
                  />
                </svg>
              </div>
              <h3 className="text-xl font-semibold text-slate-800">You&apos;re on the list!</h3>
              <p className="text-slate-600">
                Thanks for joining the Testero waitlist. We&apos;ll notify you when beta access is available in July 2025.
              </p>
              <p className="text-green-600 font-medium">
                Your 30% lifetime discount has been reserved.
              </p>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}
</file>

<file path="lib/content/meta.ts">
import { Metadata } from 'next';
import { Content } from './loader';

/**
 * Generate SEO metadata for content pages
 */
export function generateContentMetadata(content: Content): Metadata {
  const { meta } = content;
  
  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://testero.ai';
  const imageUrl = meta.coverImage 
    ? `${baseUrl}${meta.coverImage}` 
    : `${baseUrl}/og-image.jpg`;

  return {
    title: meta.title,
    description: meta.description,
    openGraph: {
      title: meta.title,
      description: meta.description,
      type: 'article',
      url: `${baseUrl}/content/${meta.type === 'hub' ? 'hub' : 'spoke'}/${meta.slug}`,
      images: [
        {
          url: imageUrl,
          width: 1200,
          height: 630,
          alt: meta.title,
        },
      ],
      publishedTime: meta.date,
      modifiedTime: meta.lastModified,
      authors: meta.author ? [meta.author] : undefined,
      tags: meta.tags,
    },
    alternates: {
      canonical: `${baseUrl}/content/${meta.type === 'hub' ? 'hub' : 'spoke'}/${meta.slug}`,
    },
    twitter: {
      card: 'summary_large_image',
      title: meta.title,
      description: meta.description,
      images: [imageUrl],
    },
  };
}

/**
 * Types for JSON-LD structured data
 */
interface StructuredDataPerson {
  '@type': 'Person';
  name: string;
}

interface StructuredDataImageObject {
  '@type': 'ImageObject';
  url: string;
}

interface StructuredDataOrganization {
  '@type': 'Organization';
  name: string;
  logo: StructuredDataImageObject;
}

interface StructuredDataWebPage {
  '@type': 'WebPage';
  '@id': string;
}

interface StructuredDataArticle {
  '@context': 'https://schema.org';
  '@type': 'Article';
  headline: string;
  description: string;
  image: string;
  datePublished: string;
  dateModified: string;
  author?: StructuredDataPerson;
  publisher: StructuredDataOrganization;
  mainEntityOfPage: StructuredDataWebPage;
}

/**
 * Generate structured data for content pages (JSON-LD)
 */
export function generateStructuredData(content: Content): StructuredDataArticle {
  const { meta } = content;
  
  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://testero.ai';
  const contentUrl = `${baseUrl}/content/${meta.type === 'hub' ? 'hub' : 'spoke'}/${meta.slug}`;
  const imageUrl = meta.coverImage 
    ? `${baseUrl}${meta.coverImage}` 
    : `${baseUrl}/og-image.jpg`;

  return {
    '@context': 'https://schema.org',
    '@type': 'Article',
    headline: meta.title,
    description: meta.description,
    image: imageUrl,
    datePublished: meta.date,
    dateModified: meta.lastModified || meta.date,
    author: meta.author ? {
      '@type': 'Person',
      name: meta.author,
    } : undefined,
    publisher: {
      '@type': 'Organization',
      name: 'Testero',
      logo: {
        '@type': 'ImageObject',
        url: `${baseUrl}/logo.png`,
      },
    },
    mainEntityOfPage: {
      '@type': 'WebPage',
      '@id': contentUrl,
    },
  };
}
</file>

<file path="lib/supabase/client.ts">
import { createClient } from '@supabase/supabase-js';

// Read Supabase URL and Anon Key from environment variables
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

// 
// Basic validation
if (!supabaseUrl) {
  throw new Error("Missing env.NEXT_PUBLIC_SUPABASE_URL");
}
if (!supabaseKey) {
  throw new Error("Missing env.NEXT_PUBLIC_SUPABASE_ANON_KEY");
}

export const supabase = createClient(supabaseUrl, supabaseKey);

export function createBrowserClient() {
  // Ensure variables are available in the browser context as well
  const browserSupabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
  const browserSupabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
  
  if (!browserSupabaseUrl || !browserSupabaseKey) {
    console.error("Supabase URL or Key missing in browser environment.");
    // Depending on your error handling strategy, you might throw an error 
    // or return a non-functional client. For now, let's proceed but log error.
  }

  return createClient(browserSupabaseUrl, browserSupabaseKey);
}
</file>

<file path="public/sitemap-pages.xml">
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>https://testero.ai/content</loc>
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.8</priority>
  </url>

  <url>
    <loc>https://testero.ai/faq</loc>
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.8</priority>
  </url>

  <url>
    <loc>https://testero.ai/forgot-password</loc>
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.8</priority>
  </url>

  <url>
    <loc>https://testero.ai/login</loc>
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.8</priority>
  </url>

  <url>
    <loc>https://testero.ai/</loc>
    <lastmod>2025-05-18</lastmod>
    <changefreq>weekly</changefreq>
    <priority>1.0</priority>
  </url>

  <url>
    <loc>https://testero.ai/practice/question</loc>
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.6</priority>
  </url>

  <url>
    <loc>https://testero.ai/waitlist</loc>
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.8</priority>
  </url>

  <url>
    <loc>https://testero.ai/faq/what-is-google-cloud-certification</loc>
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.6</priority>
  </url>

  <url>
    <loc>https://testero.ai/faq/is-google-cloud-certification-worth-it</loc>
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.6</priority>
  </url>

  <url>
    <loc
      >https://testero.ai/faq/what-are-the-five-sections-of-the-associate-cloud-engineer-certification-by-google</loc
    >
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.6</priority>
  </url>

  <url>
    <loc>https://testero.ai/faq/how-much-does-google-cloud-digital-leader-cost</loc>
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.6</priority>
  </url>

  <url>
    <loc>https://testero.ai/faq/how-do-you-register-for-google-cloud-certification</loc>
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.6</priority>
  </url>

  <url>
    <loc>https://testero.ai/faq/how-long-to-complete-google-data-analytics-certification</loc>
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.6</priority>
  </url>

  <url>
    <loc>https://testero.ai/faq/is-google-data-analytics-certification-worth-it</loc>
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.6</priority>
  </url>

  <url>
    <loc
      >https://testero.ai/faq/is-the-google-professional-machine-learning-engineer-certification-worth-it</loc
    >
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.6</priority>
  </url>

  <url>
    <loc>https://testero.ai/faq/how-long-is-the-google-ml-engineer-exam</loc>
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.6</priority>
  </url>

  <url>
    <loc>https://testero.ai/content/hub/google-cloud-certification-guide</loc>
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.4</priority>
  </url>

  <url>
    <loc
      >https://testero.ai/content/hub/google-data-analytics-professional-certificate-2025-guide</loc
    >
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.4</priority>
  </url>

  <url>
    <loc
      >https://testero.ai/content/hub/google-professional-machine-learning-engineer-certification-roadmap-2025</loc
    >
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.4</priority>
  </url>

  <url>
    <loc
      >https://testero.ai/content/hub/the-2025-google-cloud-digital-leader-certification-roadmap</loc
    >
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.4</priority>
  </url>

  <url>
    <loc>https://testero.ai/content/spoke/google-cloud-digital-leader-certification</loc>
    <lastmod>2025-05-18</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.4</priority>
  </url>
</urlset>
</file>

<file path="app/faq/layout.tsx">
import { ReactNode } from 'react';
import { generateMetadata as generateSeoMetadata } from '@/lib/seo/seo';
import Link from 'next/link';

// Placeholder for a simpler navigation if needed for FAQ, or reuse existing
// For now, let's assume a simple header or reuse ContentNavigation if appropriate
// import ContentNavigation from '@/components/content/ContentNavigation';

export const metadata = generateSeoMetadata({
  title: 'Frequently Asked Questions | Testero',
  description: 'Find answers to common questions about Testero and Google Cloud certifications.',
  canonical: '/faq',
});

export default function FaqLayout({
  children,
}: {
  children: ReactNode;
}) {
  return (
    <div className="min-h-screen flex flex-col">
      {/* <ContentNavigation /> */}
      <header className="bg-white dark:bg-slate-900 border-b border-slate-200 dark:border-slate-700">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <Link href="/" className="flex items-center">
            {/* Replace with your logo component or image */}
            <span className="text-2xl font-bold text-slate-900 dark:text-white">Testero</span>
          </Link>
          <nav>
            <ul className="flex space-x-4">
              <li>
                <Link href="/faq" className="text-slate-600 dark:text-slate-400 hover:text-orange-500 dark:hover:text-orange-400 transition-colors">
                  FAQs
                </Link>
              </li>
              {/* Add other navigation links as needed */}
            </ul>
          </nav>
        </div>
      </header>
      <main className="flex-grow">{children}</main> {/* Use main tag for content */}
      <footer className="bg-slate-50 dark:bg-slate-900 border-t border-slate-200 dark:border-slate-700">
        <div className="container mx-auto px-4 py-8 text-center">
          <p className="text-slate-600 dark:text-slate-400 mb-4">
            Need more help? 
          </p>
          <div className="mt-8 text-slate-500 dark:text-slate-500">
            <p>© {new Date().getFullYear()} Testero. All rights reserved.</p>
          </div>
        </div>
      </footer>
    </div>
  );
}
</file>

<file path="app/faq/page.tsx">
'use client';

import React, { useState, useRef, useEffect } from 'react';
import Link from 'next/link';
import { faqData, FaqEntry } from '@/lib/content/faqData';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';
import { motion } from 'framer-motion';

// Group FAQs by their pillar
const groupFaqsByPillar = () => {
  const groups: Record<string, FaqEntry[]> = {};
  faqData.forEach(faq => {
    if (!groups[faq.pillar]) {
      groups[faq.pillar] = [];
    }
    groups[faq.pillar].push(faq);
  });
  return groups;
};

export default function FaqPage() {
  const [searchTerm, setSearchTerm] = useState('');
  const [activeCategory, setActiveCategory] = useState('All');
  const [visibleFaqs, setVisibleFaqs] = useState(faqData);
  const searchInputRef = useRef<HTMLInputElement>(null);
  
  const faqsByPillar = groupFaqsByPillar();
  const categories = ['All', ...Object.keys(faqsByPillar)];
  
  useEffect(() => {
    let filtered = faqData;
    
    // Filter by search term
    if (searchTerm) {
      filtered = filtered.filter(faq => 
        faq.question.toLowerCase().includes(searchTerm.toLowerCase()) || 
        faq.answerSnippet.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    // Filter by category
    if (activeCategory !== 'All') {
      filtered = filtered.filter(faq => faq.pillar === activeCategory);
    }
    
    setVisibleFaqs(filtered);
  }, [searchTerm, activeCategory]);

  const handleSearchFocus = () => {
    if (searchInputRef.current) {
      searchInputRef.current.scrollIntoView?.({ behavior: 'smooth', block: 'center' });
    }
  };

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0, transition: { type: 'spring', stiffness: 300, damping: 24 } }
  };

  return (
    <div className="bg-gradient-to-b from-slate-50 to-white dark:from-slate-900 dark:to-slate-800 min-h-screen">
      <div className="container mx-auto px-4 py-20">
        {/* Hero section */}
        <div className="text-center mb-16">
          <motion.h1 
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, ease: 'easeOut' }}
            className="text-5xl md:text-6xl font-bold mb-4 bg-clip-text text-transparent bg-gradient-to-r from-slate-900 to-slate-700 dark:from-slate-50 dark:to-slate-300"
          >
            Questions? We&apos;ve Got You Covered
          </motion.h1>
          <motion.p 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            className="text-xl md:text-2xl text-slate-600 dark:text-slate-400 max-w-3xl mx-auto"
          >
            Everything you need to know about Testero and Google Cloud certifications
          </motion.p>
        </div>

        {/* Search and filter section */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.3 }}
          className="mb-10 max-w-2xl mx-auto"
        >
          <div className="relative mb-8">
            <input
              ref={searchInputRef}
              type="text"
              placeholder="Search for questions..."
              className="w-full px-6 py-4 rounded-full border-2 border-slate-200 dark:border-slate-700 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent text-lg shadow-sm dark:bg-slate-800 dark:text-white"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              onFocus={handleSearchFocus}
            />
            <div className="absolute right-4 top-1/2 transform -translate-y-1/2 text-slate-400">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <circle cx="11" cy="11" r="8"></circle>
                <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
              </svg>
            </div>
          </div>

          <div className="flex flex-wrap gap-2 justify-center">
            {categories.map(category => (
              <Button
                key={category}
                variant={activeCategory === category ? "default" : "outline"}
                className={cn(
                  "rounded-full px-6 py-2",
                  activeCategory === category 
                    ? "bg-orange-500 hover:bg-orange-600 text-white" 
                    : "hover:bg-slate-100 dark:hover:bg-slate-700"
                )}
                onClick={() => setActiveCategory(category)}
              >
                {category}
              </Button>
            ))}
          </div>
        </motion.div>

        {/* FAQ cards */}
        {visibleFaqs.length === 0 ? (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="text-center py-12"
          >
            <h3 className="text-2xl font-semibold mb-4 text-slate-700 dark:text-slate-300">No results found</h3>
            <p className="text-slate-600 dark:text-slate-400">Try adjusting your search or category filter</p>
          </motion.div>
        ) : (
          <motion.div 
            variants={container}
            initial="hidden"
            animate="show"
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
          >
            {visibleFaqs.map((faq) => (
              <motion.div key={faq.slug} variants={item}>
                <Link href={`/faq/${faq.slug}`} className="block h-full">
                  <Card className={cn(
                    "h-full overflow-hidden group hover:shadow-md transition-all duration-300 border-slate-200 dark:border-slate-700",
                    "dark:bg-slate-800/60 backdrop-blur-sm hover:scale-[1.02] hover:border-orange-200 dark:hover:border-orange-800",
                    "relative"
                  )}>
                    <div className="absolute top-0 left-0 w-2 h-full bg-gradient-to-b from-orange-400 to-orange-600"></div>
                    <CardContent className="p-6">
                      <div className="mb-1 text-xs font-medium text-orange-500 dark:text-orange-400 uppercase tracking-wider">
                        {faq.pillar}
                      </div>
                      <h3 className="text-xl font-bold text-slate-900 dark:text-white mb-3 group-hover:text-orange-600 dark:group-hover:text-orange-400 transition-colors">
                        {faq.question}
                      </h3>
                      <div className="text-slate-600 dark:text-slate-300">
                        {faq.answerSnippet}
                        <span className="text-orange-600 dark:text-orange-400 ml-1 inline-block group-hover:translate-x-1 transition-transform">→</span>
                      </div>
                    </CardContent>
                  </Card>
                </Link>
              </motion.div>
            ))}
          </motion.div>
        )}

        {/* Contact section */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.5 }}
          className="mt-16 text-center py-10 px-8 rounded-2xl bg-gradient-to-r from-slate-100 to-slate-200 dark:from-slate-800 dark:to-slate-900 shadow-sm"
        >
          <h2 className="text-2xl font-bold mb-4 text-slate-900 dark:text-white">Still have questions?</h2>
          <p className="text-slate-600 dark:text-slate-300 max-w-2xl mx-auto mb-6">
            Our team is here to help. If you can&apos;t find the answer you&apos;re looking for, 
            don&apos;t hesitate to reach out to us directly.
          </p>
          <Button className="bg-orange-500 hover:bg-orange-600 text-white py-2 px-6 rounded-full shadow-sm">
            Contact Support
          </Button>
        </motion.div>
      </div>
    </div>
  );
}
</file>

<file path="app/layout.tsx">
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { PostHogProvider } from "@/components/providers/PostHogProvider";
import Script from "next/script";
import { generateMetadata, generateJsonLd, generateViewport } from "@/lib/seo";
import Navbar from "@/components/ui/navbar"; // Import the Navbar component

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// Generate default metadata for the root layout
export const metadata = generateMetadata();

// Generate viewport configuration
export const viewport = generateViewport();

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <head>
        <Script
          id="json-ld"
          type="application/ld+json"
          dangerouslySetInnerHTML={{
            __html: generateJsonLd()
          }}
        />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        suppressHydrationWarning
      >
        {/* Skip to content link for accessibility */}
        <a
          href="#main-content"
          className="sr-only focus:not-sr-only focus:absolute focus:z-50 focus:p-4 focus:bg-white focus:text-black focus:outline-none"
        >
          Skip to content
        </a>
        <Navbar /> {/* Add the Navbar component here */}
        <main id="main-content" className="pt-[72px]"> {/* Add padding to main content */}
          <PostHogProvider>{children}</PostHogProvider>
        </main>
      </body>
    </html>
  );
}
</file>

<file path="lib/seo/seo.ts">
import type { Metadata, Viewport } from "next";

// Define image URL types
type ImageUrls = {
  ogImage: {
    jpg: string;
    webp: string;
  };
  twitterImage: {
    jpg: string;
    webp: string;
  };
  logo: {
    png: string;
    webp: string;
  };
};

// Default CDN image URLs
// In a production environment, these would be loaded from a configuration
// or fetched from an API endpoint
const cdnImageUrls: ImageUrls = {
  ogImage: {
    jpg: "/og-image.jpg",
    webp: "/og-image.webp"
  },
  twitterImage: {
    jpg: "/twitter-image.jpg",
    webp: "/twitter-image.webp"
  },
  logo: {
    png: "/logo.png",
    webp: "/logo.webp"
  }
};

type SeoProps = {
  title?: string;
  description?: string;
  keywords?: string[];
  ogImage?: string;
  twitterImage?: string;
  noIndex?: boolean;
  canonical?: string;
  useCdn?: boolean;
};

/**
 * Generates customizable SEO metadata for Next.js pages
 * 
 * @param props - SEO properties to customize
 * @returns Metadata object for Next.js
 */
export function generateMetadata(props: SeoProps = {}): Metadata {
  const {
    title = "Testero | AI-Powered Certification Exam Preparation",
    description = "Testero helps you ace Google Cloud, AWS, and Azure certification exams with AI-generated practice questions, adaptive study plans, and exam readiness predictions.",
    keywords = [
      "certification exam", 
      "cloud certification", 
      "Google Cloud", 
      "AWS", 
      "Azure", 
      "AI learning", 
      "exam preparation", 
      "practice questions", 
      "study plan"
    ],
    ogImage = "/og-image.jpg",
    twitterImage = "/twitter-image.jpg",
    noIndex = false,
    canonical = "/",
    useCdn = true,
  } = props;

  // Use CDN URLs if available and enabled
  const finalOgImage = (useCdn && cdnImageUrls?.ogImage?.jpg) || ogImage;
  const finalTwitterImage = (useCdn && cdnImageUrls?.twitterImage?.jpg) || twitterImage;

  return {
    metadataBase: new URL("https://testero.ai"),
    title,
    description,
    keywords,
    authors: [{ name: "Testero Team" }],
    creator: "Testero AI",
    publisher: "Testero AI",
    formatDetection: {
      email: false,
      address: false,
      telephone: false,
    },
    alternates: {
      canonical: canonical.startsWith('/') ? `https://testero.ai${canonical}` : canonical,
    },
    robots: {
      index: !noIndex,
      follow: !noIndex,
    },
    openGraph: {
      type: "website",
      locale: "en_US",
      url: canonical.startsWith('/') ? `https://testero.ai${canonical}` : canonical,
      siteName: "Testero",
      title,
      description,
      images: [
        {
          url: finalOgImage,
          width: 1200,
          height: 630,
          alt: "Testero - AI-Powered Certification Exam Preparation",
          // Add WebP version if available
          ...(useCdn && cdnImageUrls?.ogImage?.webp && {
            secureUrl: cdnImageUrls.ogImage.webp,
          }),
        },
      ],
    },
    twitter: {
      card: "summary_large_image",
      title,
      description,
      images: [finalTwitterImage],
      creator: "@testero_ai",
    },
  };
}

/**
 * Generates viewport configuration for Next.js pages
 * 
 * @returns Viewport object for Next.js
 */
export function generateViewport(): Viewport {
  return {
    width: "device-width",
    initialScale: 1,
    maximumScale: 1,
  };
}

/**
 * Generates JSON-LD structured data for SEO
 * 
 * @param customData - Optional custom data to merge with default structured data
 * @param useCdn - Whether to use CDN URLs for images
 * @returns JSON-LD structured data as a string
 */
export function generateJsonLd(
  customData: Record<string, unknown> = {}, 
  useCdn: boolean = true
): string {
  // Use CDN URL for logo if available and enabled
  const logoUrl = (useCdn && cdnImageUrls?.logo?.png) || "https://testero.ai/logo.png";
  
  const defaultData = {
    "@context": "https://schema.org",
    "@graph": [
      {
        "@type": "Organization",
        "@id": "https://testero.ai/#organization",
        "name": "Testero AI",
        "url": "https://testero.ai",
        "logo": {
          "@type": "ImageObject",
          "@id": "https://testero.ai/#logo",
          "inLanguage": "en-US",
          "url": logoUrl,
          "contentUrl": logoUrl,
          "width": 512,
          "height": 512,
          "caption": "Testero AI"
        },
        "image": { "@id": "https://testero.ai/#logo" }
      },
      {
        "@type": "WebSite",
        "@id": "https://testero.ai/#website",
        "url": "https://testero.ai",
        "name": "Testero",
        "description": "AI-Powered Certification Exam Preparation",
        "publisher": { "@id": "https://testero.ai/#organization" },
        "inLanguage": "en-US"
      },
      {
        "@type": "WebPage",
        "@id": "https://testero.ai/#webpage",
        "url": "https://testero.ai",
        "name": "Testero | AI-Powered Certification Exam Preparation",
        "isPartOf": { "@id": "https://testero.ai/#website" },
        "about": { "@id": "https://testero.ai/#organization" },
        "description": "Testero helps you ace Google Cloud, AWS, and Azure certification exams with AI-generated practice questions, adaptive study plans, and exam readiness predictions.",
        "inLanguage": "en-US",
        "potentialAction": [
          {
            "@type": "ReadAction",
            "target": ["https://testero.ai"]
          }
        ]
      },
      {
        "@type": "SoftwareApplication",
        "name": "Testero",
        "operatingSystem": "Web",
        "applicationCategory": "EducationalApplication",
        "offers": {
          "@type": "Offer",
          "price": "0",
          "priceCurrency": "USD",
          "availability": "https://schema.org/ComingSoon"
        },
        "aggregateRating": {
          "@type": "AggregateRating",
          "ratingValue": "4.8",
          "ratingCount": "1200",
          "bestRating": "5",
          "worstRating": "1"
        }
      }
    ]
  };

  // Deep merge custom data with default data
  const mergedData = deepMerge(defaultData, customData);
  
  return JSON.stringify(mergedData);
}

/**
 * Deep merges two objects
 * 
 * @param target - Target object
 * @param source - Source object to merge into target
 * @returns Merged object
 */
function deepMerge(target: Record<string, unknown>, source: Record<string, unknown>): Record<string, unknown> {
  const output = { ...target };
  
  if (isObject(target) && isObject(source)) {
    Object.keys(source).forEach(key => {
      if (isObject(source[key])) {
        if (!(key in target)) {
          Object.assign(output, { [key]: source[key] });
        } else {
          output[key] = deepMerge(
            target[key] as Record<string, unknown>, 
            source[key] as Record<string, unknown>
          );
        }
      } else {
        Object.assign(output, { [key]: source[key] });
      }
    });
  }
  
  return output;
}

/**
 * Checks if value is an object
 * 
 * @param item - Value to check
 * @returns Whether the value is an object
 */
function isObject(item: unknown): boolean {
  return (item !== null && typeof item === 'object' && !Array.isArray(item));
}
</file>

<file path="public/sitemap.xml">
<?xml version="1.0" encoding="UTF-8"?>
<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <sitemap>
    <loc>https://testero.ai/sitemap-pages.xml</loc>
    <lastmod>2025-05-18</lastmod>
  </sitemap>

  <sitemap>
    <loc>https://testero.ai/sitemap-questions.xml</loc>
    <lastmod>2025-05-18</lastmod>
  </sitemap>
</sitemapindex>
</file>

<file path="scripts/generate-sitemap.js">
// This script generates a sitemap.xml file for the website
// Run with: node scripts/generate-sitemap.js

const fs = require('fs');
const path = require('path');
const prettier = require('prettier');
require('dotenv').config({ path: path.resolve(__dirname, '../.env.local') }); // Load environment variables

// Try to import dependencies, but don't fail if they're missing
let faqData = [];
let supabase;

try {
  const faqDataModule = require('../lib/content/faqData');
  faqData = faqDataModule.faqData || [];
} catch (err) {
  console.warn('Warning: Could not load faqData module. FAQ routes will not be included in sitemap.');
}

try {
  const supabaseModule = require('../lib/supabase/client');
  supabase = supabaseModule.supabase;
} catch (err) {
  console.warn('Warning: Could not load Supabase client. Question routes will not be included in sitemap.');
}

// Configuration
const SITE_URL = 'https://testero.ai'; // Used for sitemap <loc> tags
// const LOCAL_API_URL = 'http://localhost:3000'; // No longer needed
const PUBLIC_DIR = path.join(__dirname, '../public');
const APP_DIR = path.join(__dirname, '../app');
// const fetch = require('node-fetch'); // No longer needed
const HUB_CONTENT_DIR = path.join(__dirname, '../app/content/hub');
const SPOKE_CONTENT_DIR = path.join(__dirname, '../app/content/spokes');

// Get current date in YYYY-MM-DD format
const getCurrentDate = () => {
  const date = new Date();
  return date.toISOString().split('T')[0];
};

// Get all page routes from the app directory (excluding dynamic routes handled separately)
const getPageRoutes = (dir, basePath = '') => {
  let routes = [];
  const entries = fs.readdirSync(dir, { withFileTypes: true });

  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name);
    const relativePath = path.join(basePath, entry.name);

    if (entry.isDirectory()) {
      // Skip directories that start with _ or ., or are the design-system directory
      if (entry.name.startsWith('_') || entry.name.startsWith('.') || entry.name === 'design-system') {
        continue;
      }

      // Skip api routes and dynamic route directories
      if (relativePath === 'api' || entry.name.includes('[') && entry.name.includes(']')) {
        continue;
      }

      // Recursively get routes from subdirectories
      routes = [...routes, ...getPageRoutes(fullPath, relativePath)];
    } else if (
      entry.name === 'page.tsx' ||
      entry.name === 'page.jsx' ||
      entry.name === 'page.js'
    ) {
      // Convert route path to URL path
      let routePath = basePath.replace(/\\/g, '/');

      // Handle index route
      if (routePath === '') {
        routes.push('/');
      } else {
        routes.push(`/${routePath}`);
      }
    }
  }

  return routes;
};

// Get slugs from markdown files in a directory
const getMarkdownSlugs = (dir, routePrefix) => {
  const files = fs.readdirSync(dir);
  return files
    .filter(file => file.endsWith('.md'))
    .map(file => {
      const slug = file.replace(/\.md$/, '');
      return `${routePrefix}/${slug}`;
    });
};


// Generate sitemap XML for specific routes and filename
const generateIndividualSitemap = async (routes, filename) => {
  const currentDate = getCurrentDate();

  const sitemap = `
    <?xml version="1.0" encoding="UTF-8"?>
    <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
      ${routes
        .map(route => {
          // Set priority based on route depth
          const depth = (route.match(/\//g) || []).length;
          const priority = Math.max(0.1, 1 - depth * 0.2).toFixed(1);

          return `
            <url>
              <loc>${SITE_URL}${route}</loc>
              <lastmod>${currentDate}</lastmod>
              <changefreq>${route === '/' ? 'weekly' : 'monthly'}</changefreq>
              <priority>${route === '/' ? '1.0' : priority}</priority>
            </url>
          `;
        })
        .join('')}
    </urlset>
  `;

  // Format XML with prettier
  const formattedSitemap = await prettier.format(sitemap, {
    parser: 'html',
    printWidth: 100,
  });

  fs.writeFileSync(path.join(PUBLIC_DIR, filename), formattedSitemap);
  console.log(`${filename} generated successfully!`);
};

// Generate sitemap index XML
const generateSitemapIndex = async (sitemapFiles) => {
  const currentDate = getCurrentDate();
  const sitemapIndex = `
    <?xml version="1.0" encoding="UTF-8"?>
    <sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
      ${sitemapFiles
        .map(sitemapFile => `
          <sitemap>
            <loc>${SITE_URL}/${sitemapFile}</loc>
            <lastmod>${currentDate}</lastmod>
          </sitemap>
        `)
        .join('')}
    </sitemapindex>
  `;

  const formattedSitemapIndex = await prettier.format(sitemapIndex, {
    parser: 'html',
    printWidth: 100,
  });

  fs.writeFileSync(path.join(PUBLIC_DIR, 'sitemap.xml'), formattedSitemapIndex);
  console.log('Sitemap index (sitemap.xml) generated successfully!');
};


// Fetch question IDs directly from Supabase
const getQuestionRoutes = async () => {
  // If supabase client wasn't loaded, return empty array
  if (!supabase) {
    console.warn('Supabase client not available, skipping question routes.');
    return [];
  }
  
  try {
    const { data: questions, error: questionError } = await supabase
      .from('questions')
      .select('id')
      .order('id', { ascending: true });

    if (questionError || !questions) {
      console.error('Error fetching question routes from Supabase:', questionError);
      return []; // Return empty array on error
    }
    return questions.map(q => `/practice/question/${q.id}`);
  } catch (error) {
    console.error('Error in getQuestionRoutes:', error);
    return []; // Return empty array on error
  }
};


// Main function
async function main() {
  try {
    // Install prettier if not already installed
    // dotenv is also a dependency now
    const packagesToInstall = [];
    try {
      require.resolve('prettier');
    } catch (error) {
      packagesToInstall.push('prettier');
    }
    try {
      require.resolve('dotenv');
    } catch (error) {
      packagesToInstall.push('dotenv');
    }


    if (packagesToInstall.length > 0) {
      console.log(`Installing ${packagesToInstall.join(' and ')}...`);
      // It's generally better to ensure dev dependencies are installed via package.json
      // but for this script's self-containment, we'll keep it.
      require('child_process').execSync(`npm install --save-dev ${packagesToInstall.join(' ')}`);
      // Re-require dotenv if it was just installed
      if (packagesToInstall.includes('dotenv')) {
        require('dotenv').config({ path: path.resolve(__dirname, '../.env.local') });
      }
    }

    // Generate sitemap for pages
    let pageRoutes = getPageRoutes(APP_DIR);

    // Add FAQ routes if faqData is available
    if (faqData && faqData.length > 0) {
      const faqRoutes = faqData.map(faq => `/faq/${faq.slug}`);
      pageRoutes = [...pageRoutes, ...faqRoutes];
    }

    // Add Hub content routes
    const hubRoutes = getMarkdownSlugs(HUB_CONTENT_DIR, '/content/hub');
    pageRoutes = [...pageRoutes, ...hubRoutes];

    // Add Spoke content routes
    const spokeRoutes = getMarkdownSlugs(SPOKE_CONTENT_DIR, '/content/spoke');
    pageRoutes = [...pageRoutes, ...spokeRoutes];

    // Remove duplicate routes if any
    pageRoutes = [...new Set(pageRoutes)];
    await generateIndividualSitemap(pageRoutes, 'sitemap-pages.xml');

    // Generate sitemap for questions
    const questionRoutes = await getQuestionRoutes();
    if (questionRoutes.length > 0) {
      await generateIndividualSitemap(questionRoutes, 'sitemap-questions.xml');
    } else {
      console.log('No question routes found, skipping sitemap-questions.xml generation.');
    }

    // Generate sitemap index
    const sitemapFiles = ['sitemap-pages.xml'];
    if (questionRoutes.length > 0) {
      sitemapFiles.push('sitemap-questions.xml');
    }
    await generateSitemapIndex(sitemapFiles);

  } catch (error) {
    console.error('Error generating sitemaps:', error);
  }
}

main();
</file>

<file path="Dockerfile">
# Use Node.js 20 as the base image
FROM node:20-alpine AS base

# Install dependencies only when needed
FROM base AS deps
WORKDIR /app

# Install system dependencies for Sharp image processing
RUN apk add --no-cache \
    build-base \
    g++ \
    cairo-dev \
    jpeg-dev \
    pango-dev \
    giflib-dev \
    librsvg-dev \
    fontconfig-dev

# Copy package.json and package-lock.json
COPY package.json package-lock.json ./

# Install dependencies
RUN npm ci

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app

# Install system dependencies for Sharp image processing in the builder stage
RUN apk add --no-cache \
    build-base \
    g++ \
    cairo-dev \
    jpeg-dev \
    pango-dev \
    giflib-dev \
    librsvg-dev \
    fontconfig-dev

COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Declare build arguments for NEXT_PUBLIC variables
ARG NEXT_PUBLIC_POSTHOG_KEY
ARG NEXT_PUBLIC_POSTHOG_HOST
ARG NEXT_PUBLIC_SUPABASE_URL
ARG NEXT_PUBLIC_SUPABASE_ANON_KEY

# Declare build arguments for GCP variables
ARG GCP_STORAGE_BUCKET_NAME
ARG GCP_CDN_URL
ARG USE_GCP_STORAGE
ARG GCP_PROJECT_ID
ARG GCP_SERVICE_ACCOUNT_KEY

# Set environment variables from build arguments for the build stage
ENV NEXT_PUBLIC_POSTHOG_KEY=$NEXT_PUBLIC_POSTHOG_KEY
ENV NEXT_PUBLIC_POSTHOG_HOST=$NEXT_PUBLIC_POSTHOG_HOST
ENV NEXT_PUBLIC_SUPABASE_URL=$NEXT_PUBLIC_SUPABASE_URL
ENV NEXT_PUBLIC_SUPABASE_ANON_KEY=$NEXT_PUBLIC_SUPABASE_ANON_KEY

# Set GCP environment variables
ENV GCP_STORAGE_BUCKET_NAME=$GCP_STORAGE_BUCKET_NAME
ENV GCP_CDN_URL=$GCP_CDN_URL
ENV USE_GCP_STORAGE=$USE_GCP_STORAGE
ENV GCP_PROJECT_ID=$GCP_PROJECT_ID

# If GCP service account key is provided, save it to a file
RUN if [ -n "$GCP_SERVICE_ACCOUNT_KEY" ]; then \
      echo "$GCP_SERVICE_ACCOUNT_KEY" > /app/gcp-service-account.json && \
      chmod 600 /app/gcp-service-account.json && \
      export GCP_KEY_FILE_PATH=/app/gcp-service-account.json; \
    fi

# Build the Next.js application
# These ENV variables will be available during the build
RUN npm run build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production

    # Copy GCP service account key if it exists
    COPY --from=builder --chown=nextjs:nodejs /app/gcp-service-account.json* ./gcp-service-account.json*

    # Create a non-root user to run the application
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy the built application
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Set permissions for GCP service account key if it exists
RUN if [ -f ./gcp-service-account.json ]; then \
      chown nextjs:nodejs ./gcp-service-account.json && \
      chmod 600 ./gcp-service-account.json; \
    fi

# Set the user to run the application
USER nextjs

# Expose the port the app runs on
EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Start the application
CMD ["node", "server.js"]
</file>

<file path="app/page.tsx">
"use client"; // Make this a client component

import { useEffect, useState } from "react";
import { useInView } from "react-intersection-observer";
import { usePostHog } from "posthog-js/react";
import dynamic from "next/dynamic";
import Link from "next/link";
import { StaggeredText } from "@/components/ui/staggered-text";
import { BenefitsSectionSkeleton } from "@/components/ui/benefits-section";
import { WaitlistForm } from "@/components/ui/waitlist-form";
import { SocialProofSection } from "@/components/ui/social-proof-section";
import { FinalCtaSection } from "@/components/ui/final-cta-section";
import { JsonLd } from "./page.metadata";

// Dynamically import the BenefitsSection component
const BenefitsSection = dynamic(
  () => import("@/components/ui/benefits-section").then((mod) => mod.BenefitsSection),
  { 
    loading: () => <BenefitsSectionSkeleton />,
    ssr: false // Disable server-side rendering for this component
  }
);

// Helper hook for tracking section views and lazy loading
function useTrackSectionView(sectionName: string, loadThreshold = 0.1) {
  const posthog = usePostHog();
  const [shouldLoad, setShouldLoad] = useState(false);
  const { ref, inView } = useInView({
    triggerOnce: true, // Only trigger once per section
    threshold: loadThreshold, // Trigger when specified portion of the section is visible
    rootMargin: "200px 0px", // Start loading 200px before the element comes into view
  });

  useEffect(() => {
    if (inView) {
      // Track the view in PostHog
      if (posthog) {
        posthog.capture('section_viewed', { section_name: sectionName });
      }
      
      // Set the component to load
      setShouldLoad(true);
    }
  }, [inView, sectionName, posthog]);

  return { ref, shouldLoad, inView };
}

export default function Home() {
  const { ref: socialProofRef, shouldLoad: loadSocialProof } = useTrackSectionView("social_proof");
  const { ref: benefitsRef, shouldLoad: loadBenefits } = useTrackSectionView("benefits");
  const { ref: finalCtaRef } = useTrackSectionView("final_cta");

  return (
    <main className="flex min-h-screen flex-col items-center justify-start bg-gradient-to-b from-slate-50 to-slate-100">
      {/* Add JSON-LD structured data */}
      <JsonLd />
      {/* Hero Section */}
      <header className="w-full relative flex flex-col items-center justify-center p-4 sm:p-8 md:p-24 overflow-hidden" role="banner">
        {/* Background pattern */}
        <div className="absolute inset-0 opacity-10" aria-hidden="true">
          <div className="absolute top-10 left-1/4 w-64 h-64 rounded-full bg-blue-500 mix-blend-multiply blur-3xl"></div>
          <div className="absolute bottom-10 right-1/4 w-64 h-64 rounded-full bg-orange-500 mix-blend-multiply blur-3xl"></div>
        </div>
        
        <div className="z-10 max-w-5xl w-full flex flex-col items-center justify-center space-y-8">
          {/* Illustration */}
          <div className="mb-8 flex justify-center items-center relative">
            <div className="relative">
              <div className="absolute -top-12 -right-16 w-24 h-24 bg-blue-50 rounded-lg shadow-sm flex items-center justify-center transform rotate-12 border border-blue-100" aria-hidden="true">
                <svg width="40" height="40" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" className="opacity-70" aria-label="Cloud Platform" role="img">
                  <path d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666" fillRule="evenodd"/>
                </svg>
              </div>
              <div className="bg-gradient-to-br from-slate-100 to-slate-200 p-10 rounded-2xl shadow-lg border border-slate-200 flex items-center justify-center" aria-hidden="true">
                <svg width="80" height="80" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" className="opacity-80" aria-label="Certification" role="img">
                  <path d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666" fillRule="evenodd"/>
                </svg>
              </div>
              <div className="absolute -bottom-10 -left-14 w-28 h-28 bg-orange-50 rounded-xl shadow-sm flex items-center justify-center transform -rotate-6 border border-orange-100" aria-hidden="true">
                <svg width="44" height="44" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" className="opacity-70" aria-label="Exam" role="img">
                  <path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" fill="#666" fillRule="evenodd"/>
                </svg>
              </div>
            </div>
          </div>
          
          <StaggeredText className="text-center space-y-6" delay={0.2}>
            <h1 className="text-3xl sm:text-4xl md:text-7xl font-extrabold">
              <span className="bg-clip-text text-transparent bg-gradient-to-r from-slate-800 via-slate-700 to-slate-900">Ace Your Cloud Certification Exams</span>
              <br/>
              <span className="relative inline-block bg-gradient-to-r from-orange-500 to-red-600 bg-clip-text text-transparent">
                Confidently
                <span className="absolute -bottom-2 left-0 w-full h-1 bg-gradient-to-r from-orange-500 to-red-600 rounded-full"></span>
              </span>
            </h1>
            
            {/* Sub-headline */}
            <h2 className="text-lg sm:text-xl md:text-2xl text-slate-700 max-w-3xl mx-auto leading-relaxed">
              Testero is the upcoming AI learning platform that generates always-current practice questions, builds your adaptive study plan, and predicts precisely when you&apos;re ready to ace Google Cloud, AWS, and Azure certification exams.
            </h2>

            {/* Offer Statement with highlight box */}
            <div className="bg-orange-50 border border-orange-100 rounded-lg px-6 py-4 max-w-3xl mx-auto">
              <p className="text-lg md:text-xl text-orange-700 font-medium">
                Join the waitlist today for priority beta access (July 2025), lock in a <strong className="font-semibold bg-orange-100 px-2 py-1 rounded-md">30% lifetime Pro discount</strong>, and shape the future of Testero.
              </p>
            </div>
            
            {/* Above-the-Fold CTA with styled container */}
            <div className="pt-6 w-full max-w-md mx-auto">
              <div className="bg-white p-5 rounded-xl shadow-md border border-slate-100">
                <p className="text-sm text-slate-600 mb-3 font-medium" id="waitlist-form-label">Enter your email to join the waitlist:</p>
                <WaitlistForm buttonText="Reserve My Spot" ctaLocation="hero_section" aria-labelledby="waitlist-form-label" />
              </div>
              <p className="text-xs text-slate-500 mt-3 opacity-75">Join 1,200+ cloud pros already on the waitlist</p>
            </div>
          </StaggeredText>
        </div>
      </header>

      {/* Main content sections */}
      <div role="main" id="main-content">
        {/* Social Proof Section */}
        <section ref={socialProofRef} aria-labelledby="social-proof-heading">
          {loadSocialProof ? <SocialProofSection /> : null}
        </section>

        {/* Benefits Section - Lazy loaded */}
        <section ref={benefitsRef} aria-labelledby="benefits-heading">
          {loadBenefits ? <BenefitsSection /> : <BenefitsSectionSkeleton />}
        </section>
        
        {/* Placeholder for Optional Teaser Features Section */}
        {/* <section className="w-full bg-slate-50 py-12 md:py-20 px-6"> ... </section> */}

        {/* Placeholder for Optional "Why Join Now?" Section */}
        {/* <section className="w-full py-12 md:py-20 px-6"> ... </section> */}

        {/* Final CTA Section */}
        <section ref={finalCtaRef} aria-labelledby="final-cta-heading">
          <FinalCtaSection />
        </section>
      </div>

      {/* Related Content Links */}
      <section className="w-full py-12 md:py-20 px-6 bg-slate-50">
        <div className="max-w-5xl mx-auto text-center">
          <h2 className="text-2xl sm:text-3xl font-bold text-slate-800 mb-8">Explore Related Content</h2>
          <div className="flex flex-wrap justify-center gap-6">
            <Link href="/content/hub/google-cloud-certification-guide" className="text-blue-600 hover:underline text-lg">Google Cloud Certification Guide</Link>
            <Link href="/content/hub/google-data-analytics-professional-certificate-2025-guide" className="text-blue-600 hover:underline text-lg">Google Data Analytics Professional Certificate Guide</Link>
            <Link href="/content/hub/google-professional-machine-learning-engineer-certification-roadmap-2025" className="text-blue-600 hover:underline text-lg">Google Professional Machine Learning Engineer Certification Roadmap</Link>
            <Link href="/faq" className="text-blue-600 hover:underline text-lg">Frequently Asked Questions</Link>
          </div>
        </div>
      </section>

      {/* === WAITLIST PAGE CONTENT END === */}

    </main>
  );
}
</file>

<file path="package.json">
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "generate:sitemap": "ts-node scripts/generate-sitemap.js",
    "generate:social-images": "node scripts/generate-social-images.js || echo 'Warning: Social image generation failed, continuing build'",
    "generate:seo": "npm run generate:sitemap && npm run generate:social-images",
    "prebuild": "npm run generate:seo",
    "setup:gcp-storage": "node scripts/setup-gcp-storage.js",
    "gcp:enable": "cross-env USE_GCP_STORAGE=true npm run generate:social-images",
    "indexnow:submit": "node scripts/submit-to-indexnow.js"
  },
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@google-cloud/storage": "^7.16.0",
    "@hookform/resolvers": "^5.0.1",
    "@mui/material": "^7.0.2",
    "@radix-ui/react-label": "^2.1.4",
    "@radix-ui/react-slot": "^1.2.0",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@tabler/icons-react": "^3.31.0",
    "aceternity": "^1.0.1",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^12.7.4",
    "gray-matter": "^4.0.3",
    "lucide-react": "^0.501.0",
    "next": "15.3.1",
    "next-mdx-remote": "^5.0.0",
    "posthog-js": "^1.239.0",
    "react": "^18.3.0",
    "react-dom": "^18.3.0",
    "react-hook-form": "^7.56.0",
    "react-intersection-observer": "^9.16.0",
    "recharts": "^2.15.3",
    "rehype-raw": "^7.0.0",
    "rehype-stringify": "^10.0.1",
    "remark": "^15.0.1",
    "remark-gfm": "^4.0.1",
    "remark-html": "^16.0.1",
    "remark-rehype": "^11.1.2",
    "tailwind-merge": "^3.2.0",
    "zod": "^3.24.3"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@tailwindcss/typography": "^0.5.16",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "axios": "^1.9.0",
    "cross-env": "^7.0.3",
    "dotenv": "^16.5.0",
    "eslint": "^9",
    "eslint-config-next": "15.3.1",
    "fast-xml-parser": "^5.2.3",
    "prettier": "^3.5.3",
    "sharp": "^0.34.1",
    "tailwindcss": "^4",
    "ts-node": "^10.9.2",
    "typescript": "^5"
  }
}
</file>

<file path=".github/workflows/deploy-to-cloud-run.yml">
name: CI/CD Pipeline

on:
  # Trigger on push to main branch
  push:
    branches:
      - main
  # Trigger on pull requests
  pull_request:
    branches:
      - main
  # Optionally enable manual triggering
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
  REPOSITORY: ${{ secrets.ARTIFACT_REPOSITORY }}
  NODE_VERSION: '20'

jobs:
  # Job for code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
        
      - name: Type check
        run: npx tsc --noEmit
  
  # Job for building and pushing Docker image
  build:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: quality
    # Only run on main branch or pull requests that passed quality checks
    if: success() && (github.ref == 'refs/heads/main' || github.event_name == 'pull_request')
    
    permissions:
      contents: read
      id-token: write
    
    outputs:
      image: ${{ steps.set-image.outputs.image }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      
      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Pass secrets as build arguments
          build-args: |
            NEXT_PUBLIC_POSTHOG_KEY=${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}
            NEXT_PUBLIC_POSTHOG_HOST=${{ secrets.NEXT_PUBLIC_POSTHOG_HOST }}
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      
      - name: Image digest
        run: echo "Image digest=${{ steps.build-image.outputs.digest }}"
      
      - name: Set image output
        id: set-image
        run: echo "image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:${{ github.sha }}" >> "$GITHUB_OUTPUT"
  
  # Job for deploying to Cloud Run (only on main branch)
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build
    # Only deploy on main branch
    if: success() && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      # ----- Add this step for debugging -----
      - name: Debug Image Output
        run: "echo Image from build job is: [${{ needs.build.outputs.image }}]"
      # --------------------------------------
      
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:${{ github.sha }}
          flags: |
            --allow-unauthenticated
            --memory=1Gi
            --cpu=1
            --min-instances=0
            --max-instances=10
            --port=3000
            --set-env-vars=NODE_ENV=production
      
      - name: Show Output
        run: echo "Deployed to ${{ steps.deploy.outputs.url }}"
      
      - name: Deployment Status Notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful! Application is live at: ${{ steps.deploy.outputs.url }}"
          else
            echo "❌ Deployment failed. Check the logs for more information."
          fi
</file>

</files>

<prompt> <role> You are a ruthless code‑hygiene enforcer who treats technical debt like a blocked build: zero tolerance. </role> <goal> Systematically inspect {{repository_name}} before every sprint so the team ships clean, reliable code at velocity. </goal> <scope> Entire codebase (application, tests, infra-as‑code, CI/CD), plus docs and monitoring configs. </scope> <!--──────── 1. TECHNICAL‑DEBT ASSESSMENT ────────--> <assessment> <code_quality> • Flag unused code, TODOs, dead comments. • Hunt duplicate patterns—extract shared utilities. • List files breaching complexity thresholds (cyclomatic, length, nesting). • Catch style / architecture violations. • Diff new vs existing dependencies for overlap. </code_quality> <testing> • Current coverage %, delta vs last sprint. • Critical paths lacking tests. • Flaky, skipped, or disabled specs. • Stale fixtures / mocks vs latest models. </testing> <documentation> • Missing docs for new features / APIs. • Out‑of‑date READMEs, install guides, env setup. • Complex algorithms lacking inline explainers. • ADRs missing for recent major decisions. </documentation> <performance> • Regressions in APM since last sprint. • N+1 queries or heavy DB ops introduced. • Memory / resource leaks. • Endpoints breaching latency budgets. • Caching gaps on expensive calls. </performance> <security> • Open vuln scan findings. • Sensitive data leaked in logs. • Missing authZ / authN checks. • Inconsistent input validation. • Error messages revealing internals. </security> <infra_devops> <build_deploy> • CI/CD duration trend & failed runs. • Warnings during builds. • Doc accuracy for each env. </build_deploy> <observability> • Log consistency across components. • Alert coverage for health + KPIs. • Telemetry on new services. • Error spikes requiring triage. </observability> <env_mgmt> • Drift between dev / staging / prod. • Env‑specific bugs. • Secrets / env vars updates. • Schema sync status. </env_mgmt> </infra_devops> </assessment> <!--──────── 2. PRIORITIZATION FRAMEWORK ────────--> <prioritization_framework> Score each issue: Impact (High | Med | Low) × Effort (Small | Med | Large) × Risk (High | Med | Low) </prioritization_framework> <!--──────── 3. ACTION PLANNING ────────--> <action_plan> <quick_wins> High‑impact, low‑effort—fix before sprint starts. </quick_wins> <sprint_hygiene_tasks> Medium‑impact—commit to upcoming sprint. </sprint_hygiene_tasks> <tech_debt_backlog> Lower‑impact or high‑effort—track for future. </tech_debt_backlog> <architectural_concerns> Systemic issues needing design discussion or dedicated refactor. </architectural_concerns> </action_plan> <!--──────── 4. TEAM DISCUSSION ────────--> <team_questions> • Which tech‑debt hotspots slow us most? • Recurring patterns hinting deeper design flaws? • Practice tweaks to prevent repeat issues? • Metrics to prove debt‑reduction progress? </team_questions> <!--──────── 5. OUTCOME DOC TEMPLATE ────────--> <outcome_doc> • Date • Participants • Top issues • Immediate fixes • Sprint additions • Backlog entries • Follow‑up review date </outcome_doc> </prompt> <!--DEBUG [Style DNA] Tone: confident‑blunt, zero‑fluff. Sentence length: 8–15 words average, occasional punchy fragments. Pacing: staccato lists, rapid-fire bullets. Structure: XML‑like tags, clear sections, em dashes for force. Formality: professional but conversational. Favorite phrases: “zero tolerance”, “ruthless”, “hunt”, “flag”. Humor: dry, implicit. Confidence: 93% -->