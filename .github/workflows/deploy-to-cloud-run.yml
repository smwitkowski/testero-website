name: CI/CD Pipeline

on:
  # Trigger on push to main branch
  push:
    branches:
      - main
  # Trigger on pull requests
  pull_request:
    branches:
      - main
  # Optionally enable manual triggering
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
  REPOSITORY: ${{ secrets.ARTIFACT_REPOSITORY }}
  NODE_VERSION: '20'

jobs:
  # Job for code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
        
      - name: Type check
        run: npx tsc --noEmit -p tsconfig.build.json
  
  # Job for building and pushing Docker image
  build:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: quality
    # Only run on main branch or pull requests that passed quality checks
    if: success() && (github.ref == 'refs/heads/main' || github.event_name == 'pull_request')
    
    permissions:
      contents: read
      id-token: write
    
    outputs:
      image: ${{ steps.set-image.outputs.image }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      
      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Pass secrets as build arguments (fallback to production URL for PR builds)
          build-args: |
            NEXT_PUBLIC_SITE_URL=${{ secrets.NEXT_PUBLIC_SITE_URL || 'https://testero.ai' }}
            NEXT_PUBLIC_POSTHOG_KEY=${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}
            NEXT_PUBLIC_POSTHOG_HOST=${{ secrets.NEXT_PUBLIC_POSTHOG_HOST }}
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      
      - name: Image digest
        run: echo "Image digest=${{ steps.build-image.outputs.digest }}"
      
      - name: Set image output
        id: set-image
        run: echo "image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:${{ github.sha }}" >> "$GITHUB_OUTPUT"
  
  # Job for deploying to Cloud Run (only on main branch)
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build
    # Only deploy on main branch
    if: success() && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      # ----- Add this step for debugging -----
      - name: Debug Image Output
        run: "echo Image from build job is: [${{ needs.build.outputs.image }}]"
      # --------------------------------------
      
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:${{ github.sha }}
          flags: |
            --allow-unauthenticated
            --memory=1Gi
            --cpu=1
            --min-instances=0
            --max-instances=10
            --port=3000
            --set-env-vars=NODE_ENV=production
      
      - name: Show Output
        run: echo "Deployed to ${{ steps.deploy.outputs.url }}"
      
      - name: Deployment Status Notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful! Application is live at: ${{ steps.deploy.outputs.url }}"
          else
            echo "❌ Deployment failed. Check the logs for more information."
          fi
