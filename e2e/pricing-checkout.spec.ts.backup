/**
 * E2E Tests: Pricing Page Checkout Flows
 * 
 * Tests that all pricing buttons are enabled when price IDs are configured,
 * and that checkout flow correctly posts price IDs to the API.
 */

import { test, expect } from '@playwright/test';

test.describe('Pricing Page Checkout', () => {
  test.beforeEach(async ({ page }) => {
    // Mock checkout API endpoint
    await page.route('**/api/billing/checkout', async (route) => {
      const request = route.request();
      const postData = request.postDataJSON();
      
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({
          url: `https://checkout.stripe.com/pay/${postData.priceId}`,
        }),
      });
    });
  });

  test('should default to annual billing interval', async ({ page }) => {
    await page.goto('/pricing');
    
    // Verify annual is selected by default
    const annualButton = page.getByRole('button', { name: /annual/i });
    await expect(annualButton).toBeVisible();
    // The active button should have blue background
    const annualButtonClass = await annualButton.evaluate((el) => el.className);
    expect(annualButtonClass).toContain('bg-blue-600');
  });

  test('should enable all 6 subscription tier buttons (3 tiers Ã— 2 intervals)', async ({ page }) => {
    await page.goto('/pricing');
    
    // Wait for pricing cards to load
    await expect(page.getByText('Basic')).toBeVisible();
    await expect(page.getByText('Pro')).toBeVisible();
    await expect(page.getByText('All-Access')).toBeVisible();
    
    // Get all "Get started" buttons in subscription cards
    const subscriptionButtons = page.getByRole('button', { name: /get started/i });
    const buttons = await subscriptionButtons.all();
    
    // Should have 3 buttons (one per tier)
    expect(buttons.length).toBeGreaterThanOrEqual(3);
    
    // All buttons should be enabled
    for (const button of buttons.slice(0, 3)) {
      await expect(button).toBeEnabled();
      const configured = await button.getAttribute('data-checkout-configured');
      expect(configured).toBe('true');
    }
    
    // Toggle to monthly and verify buttons still enabled
    await page.getByRole('button', { name: /monthly/i }).click();
    await expect(page.getByRole('button', { name: /monthly/i })).toHaveClass(/bg-blue-600/);
    
    // Verify monthly buttons are also enabled
    const monthlyButtons = page.getByRole('button', { name: /get started/i });
    const monthlyButtonList = await monthlyButtons.all();
    for (const button of monthlyButtonList.slice(0, 3)) {
      await expect(button).toBeEnabled();
      const configured = await button.getAttribute('data-checkout-configured');
      expect(configured).toBe('true');
    }
  });

  test('should enable all 3 exam package buttons', async ({ page }) => {
    await page.goto('/pricing');
    
    // Expand exam packages section
    await page.getByRole('button', { name: /prefer a one-time purchase/i }).click();
    
    // Wait for exam packages to be visible
    await expect(page.getByText('3-Month Access')).toBeVisible();
    await expect(page.getByText('6-Month Access')).toBeVisible();
    await expect(page.getByText('12-Month Access')).toBeVisible();
    
    // Get all exam package buttons
    const examPackageButtons = page.locator('button:has-text("Get Started")');
    const buttons = await examPackageButtons.all();
    
    // Should have at least 3 buttons (exam packages + subscription cards)
    const examButtons = buttons.filter(async (btn) => {
      const parent = await btn.evaluateHandle((el) => el.closest('.border'));
      return parent !== null;
    });
    
    // Alternative: Check buttons within exam package cards
    const examCards = page.locator('.border.border-gray-200.rounded-lg');
    const cardCount = await examCards.count();
    expect(cardCount).toBe(3);
    
    // Verify each exam package has an enabled button
    for (let i = 0; i < 3; i++) {
      const card = examCards.nth(i);
      const button = card.getByRole('button', { name: /get started/i });
      await expect(button).toBeEnabled();
      await expect(button).not.toHaveClass(/disabled/);
    }
  });

  test('should post correct price ID when clicking Basic Monthly', async ({ page }) => {
    await page.goto('/pricing');
    
    // Switch to monthly
    await page.getByRole('button', { name: /monthly/i }).click();
    
    // Click Basic tier button
    let capturedPriceId: string | null = null;
    await page.route('**/api/billing/checkout', async (route) => {
      const request = route.request();
      const postData = request.postDataJSON();
      capturedPriceId = postData.priceId;
      
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({
          url: `https://checkout.stripe.com/pay/${postData.priceId}`,
        }),
      });
    });
    
    // Find Basic card and click its button
    const basicCard = page.locator('text=Basic').locator('..').locator('..');
    const basicButton = basicCard.getByRole('button', { name: /get started/i });
    await basicButton.click();
    
    // Verify correct price ID was sent
    await page.waitForTimeout(500); // Wait for API call
    expect(capturedPriceId).toBeTruthy();
    // Price ID should be a valid Stripe price ID format (starts with "price_")
    expect(capturedPriceId).toMatch(/^price_/);
  });

  test('should post correct price ID when clicking Pro Annual', async ({ page }) => {
    await page.goto('/pricing');
    
    // Ensure annual is selected (default)
    await expect(page.getByRole('button', { name: /annual/i })).toHaveClass(/bg-blue-600/);
    
    let capturedPriceId: string | null = null;
    await page.route('**/api/billing/checkout', async (route) => {
      const request = route.request();
      const postData = request.postDataJSON();
      capturedPriceId = postData.priceId;
      
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({
          url: `https://checkout.stripe.com/pay/${postData.priceId}`,
        }),
      });
    });
    
    // Find Pro card and click its button
    const proCard = page.locator('text=Pro').locator('..').locator('..');
    const proButton = proCard.getByRole('button', { name: /get started/i });
    await proButton.click();
    
    // Verify correct price ID was sent
    await page.waitForTimeout(500); // Wait for API call
    expect(capturedPriceId).toBeTruthy();
    // Price ID should be a valid Stripe price ID format (starts with "price_")
    expect(capturedPriceId).toMatch(/^price_/);
  });

  test('should post correct price ID when clicking 6-Month Exam Package', async ({ page }) => {
    await page.goto('/pricing');
    
    // Expand exam packages
    await page.getByRole('button', { name: /prefer a one-time purchase/i }).click();
    await expect(page.getByText('6-Month Access')).toBeVisible();
    
    let capturedPriceId: string | null = null;
    await page.route('**/api/billing/checkout', async (route) => {
      const request = route.request();
      const postData = request.postDataJSON();
      capturedPriceId = postData.priceId;
      
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({
          url: `https://checkout.stripe.com/pay/${postData.priceId}`,
        }),
      });
    });
    
    // Find 6-month package card and click its button
    const sixMonthCard = page.locator('text=6-Month Access').locator('..').locator('..');
    const button = sixMonthCard.getByRole('button', { name: /get started/i });
    await button.click();
    
    // Verify correct price ID was sent
    await page.waitForTimeout(500); // Wait for API call
    expect(capturedPriceId).toBeTruthy();
    // Price ID should be a valid Stripe price ID format (starts with "price_")
    expect(capturedPriceId).toMatch(/^price_/);
  });

  test('should toggle billing interval correctly', async ({ page }) => {
    await page.goto('/pricing');
    
    // Verify annual is default
    const annualButton = page.getByRole('button', { name: /annual/i });
    await expect(annualButton).toHaveClass(/bg-blue-600/);
    
    // Click monthly
    const monthlyButton = page.getByRole('button', { name: /monthly/i });
    await monthlyButton.click();
    
    // Verify monthly is now active
    await expect(monthlyButton).toHaveClass(/bg-blue-600/);
    await expect(annualButton).not.toHaveClass(/bg-blue-600/);
    
    // Click annual again
    await annualButton.click();
    
    // Verify annual is active again
    await expect(annualButton).toHaveClass(/bg-blue-600/);
    await expect(monthlyButton).not.toHaveClass(/bg-blue-600/);
  });

  test('should handle checkout redirect for authenticated user', async ({ page }) => {
    // Mock authentication state
    await page.addInitScript(() => {
      window.localStorage.setItem('sb-auth-token', JSON.stringify({
        access_token: 'mock-token',
        user: { id: 'test-user-id', email: 'test@example.com' },
      }));
    });
    
    await page.goto('/pricing');
    
    let checkoutUrl: string | null = null;
    await page.route('**/api/billing/checkout', async (route) => {
      const request = route.request();
      const postData = request.postDataJSON();
      
      const response = await route.fetch();
      const data = await response.json();
      
      checkoutUrl = data.url;
      
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({
          url: `https://checkout.stripe.com/pay/${postData.priceId}`,
        }),
      });
    });
    
    // Click a pricing button
    const firstButton = page.getByRole('button', { name: /get started/i }).first();
    await firstButton.click();
    
    // Verify checkout URL was generated
    await page.waitForTimeout(500);
    expect(checkoutUrl).toBeTruthy();
    expect(checkoutUrl).toContain('checkout.stripe.com');
  });
});
